{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "API documentation for Gundam Platform application",
        "title": "Gundam Platform API",
        "contact": {},
        "version": "1.0.0"
    },
    "host": "localhost:8080",
    "basePath": "/v1",
    "paths": {
        "/auctions": {
            "get": {
                "description": "Retrieves upcoming and ongoing auctions from the platform.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auctions"
                ],
                "summary": "Get platform auctions",
                "parameters": [
                    {
                        "enum": [
                            "scheduled",
                            "active"
                        ],
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of auctions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.AuctionDetails"
                            }
                        }
                    }
                }
            }
        },
        "/auctions/{auctionID}": {
            "get": {
                "description": "Retrieves details of a specific auction by its ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auctions"
                ],
                "summary": "Get auction details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the auction",
                        "name": "auctionID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Details of the auction",
                        "schema": {
                            "$ref": "#/definitions/db.AuctionDetails"
                        }
                    }
                }
            }
        },
        "/auctions/{auctionID}/stream": {
            "get": {
                "description": "Establishes an SSE connection to receive real-time updates about an auction",
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "auctions"
                ],
                "summary": "Stream auction events via Server-Sent Events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Auction ID",
                        "name": "auctionID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SSE connection established"
                    },
                    "400": {
                        "description": "Invalid auction ID format"
                    },
                    "404": {
                        "description": "Auction not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/auth/google-login": {
            "post": {
                "description": "Authenticate a user using Google ID token. If the user doesn't exist, a new user will be created.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Login or register a user with Google account",
                "parameters": [
                    {
                        "description": "Google ID Token",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.loginUserWithGoogleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully logged in",
                        "schema": {
                            "$ref": "#/definitions/api.loginUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body"
                    },
                    "401": {
                        "description": "Invalid Google ID token"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticate a user and return access token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.loginUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.loginUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters"
                    },
                    "401": {
                        "description": "Incorrect password"
                    },
                    "404": {
                        "description": "Email not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/cart/items": {
            "get": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Retrieves all items in the user's shopping cart with detailed information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cart"
                ],
                "summary": "List Cart Items",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved cart items",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.ListCartItemsWithDetailsRow"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Adds a Gundam model to the user's shopping cart",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cart"
                ],
                "summary": "Add Item to Cart",
                "parameters": [
                    {
                        "description": "Gundam to add to cart",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.addCartItemRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully added item to cart",
                        "schema": {
                            "$ref": "#/definitions/db.AddCartItemRow"
                        }
                    }
                }
            }
        },
        "/cart/items/{id}": {
            "delete": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Removes a specific item from the user's shopping cart",
                "tags": [
                    "cart"
                ],
                "summary": "Delete Cart Item",
                "parameters": [
                    {
                        "type": "string",
                        "example": "1",
                        "description": "Cart Item ID to delete",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted cart item"
                    }
                }
            }
        },
        "/check-email": {
            "post": {
                "description": "Checks if an email already exists in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Check Email Exists",
                "parameters": [
                    {
                        "description": "Check email request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.checkEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "boolean"
                            }
                        }
                    }
                }
            }
        },
        "/exchange-posts": {
            "get": {
                "description": "List all open exchange posts.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "exchanges"
                ],
                "summary": "List all open exchange posts",
                "responses": {
                    "200": {
                        "description": "List of open exchange posts",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.OpenExchangePostInfo"
                            }
                        }
                    }
                }
            }
        },
        "/exchanges": {
            "get": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Retrieves a list of all exchanges that the authenticated user is participating in.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "exchanges"
                ],
                "summary": "List user's exchanges",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by status (pending, packaging, delivering, delivered, completed, canceled, failed)",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of user's exchanges",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.UserExchangeDetails"
                            }
                        }
                    }
                }
            }
        },
        "/exchanges/{exchangeID}": {
            "get": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Retrieves detailed information about a specific exchange.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "exchanges"
                ],
                "summary": "Get exchange details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exchange ID",
                        "name": "exchangeID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Exchange details",
                        "schema": {
                            "$ref": "#/definitions/db.UserExchangeDetails"
                        }
                    }
                }
            }
        },
        "/exchanges/{exchangeID}/cancel": {
            "patch": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Cancel an exchange transaction that is in pending or packaging status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "exchanges"
                ],
                "summary": "Cancel an exchange",
                "parameters": [
                    {
                        "type": "string",
                        "example": "123e4567-e89b-12d3-a456-426614174000",
                        "description": "Exchange ID",
                        "name": "exchangeID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Cancel exchange request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.cancelExchangeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Exchange canceled successfully",
                        "schema": {
                            "$ref": "#/definitions/db.CancelExchangeTxResult"
                        }
                    }
                }
            }
        },
        "/exchanges/{exchangeID}/delivery-addresses": {
            "put": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Provides shipping addresses (from and to) for an exchange transaction. Both participants must provide their addresses before proceeding.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "exchanges"
                ],
                "summary": "Provide delivery addresses for exchange",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exchange ID",
                        "name": "exchangeID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Delivery addresses information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.provideExchangeDeliveryAddressesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.ProvideDeliveryAddressesForExchangeTxResult"
                        }
                    }
                }
            }
        },
        "/exchanges/{exchangeID}/pay-delivery-fee": {
            "post": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Pays the delivery fee for an exchange transaction. When both parties have paid, the system creates two orders.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "exchanges"
                ],
                "summary": "Pay delivery fee for exchange",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exchange ID",
                        "name": "exchangeID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Delivery fee information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.payExchangeDeliveryFeeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.PayExchangeDeliveryFeeTxResult"
                        }
                    }
                }
            }
        },
        "/grades": {
            "get": {
                "description": "Retrieves a list of all available Gundam model grades",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gundams"
                ],
                "summary": "List Gundam Grades",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of Gundam grades",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.GundamGrade"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to retrieve Gundam grades"
                    }
                }
            }
        },
        "/gundams": {
            "get": {
                "description": "Retrieves a list of selling Gundams, optionally filtered by grade",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gundams"
                ],
                "summary": "List Gundams",
                "parameters": [
                    {
                        "type": "string",
                        "example": "YR-04 Fire Lord",
                        "description": "Filter by Gundam name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "master-grade",
                        "description": "Filter by Gundam grade slug",
                        "name": "grade",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "in store",
                            "published",
                            "processing",
                            "pending auction approval",
                            "auctioning"
                        ],
                        "type": "string",
                        "description": "Filter by Gundam status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of Gundams",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.GundamDetails"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid query parameters"
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to retrieve Gundams"
                    }
                }
            }
        },
        "/gundams/:gundamID": {
            "get": {
                "description": "Retrieves detailed information about a specific Gundam model",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gundams"
                ],
                "summary": "Get Gundam details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Gundam ID",
                        "name": "gundamID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved Gundam details",
                        "schema": {
                            "$ref": "#/definitions/db.GundamDetails"
                        }
                    }
                }
            }
        },
        "/gundams/by-slug/{slug}": {
            "get": {
                "description": "Retrieves a specific Gundam model by its unique slug",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gundams"
                ],
                "summary": "Get Gundam by Slug",
                "parameters": [
                    {
                        "type": "string",
                        "example": "rx-78-2-gundam",
                        "description": "Gundam model slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "in store",
                            "published",
                            "processing",
                            "pending auction approval",
                            "auctioning"
                        ],
                        "type": "string",
                        "description": "Filter by Gundam status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved Gundam details",
                        "schema": {
                            "$ref": "#/definitions/db.GundamDetails"
                        }
                    },
                    "404": {
                        "description": "Not Found - Gundam with specified slug does not exist"
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to retrieve Gundam"
                    }
                }
            }
        },
        "/mod/auction-requests": {
            "get": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Get a list of all auction requests with optional status filter.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "moderator"
                ],
                "summary": "List all auction requests for moderator",
                "parameters": [
                    {
                        "enum": [
                            "pending",
                            "approved",
                            "rejected"
                        ],
                        "type": "string",
                        "description": "Filter by auction request status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of auction requests",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.AuctionRequest"
                            }
                        }
                    }
                }
            }
        },
        "/mod/auction-requests/{requestID}/approve": {
            "patch": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Moderator approves an auction request and schedules the auction.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "moderator"
                ],
                "summary": "Approve an auction request by moderator",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Auction Request ID (UUID format)",
                        "name": "requestID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Result of the approval transaction",
                        "schema": {
                            "$ref": "#/definitions/db.ApproveAuctionRequestTxResult"
                        }
                    }
                }
            }
        },
        "/mod/auction-requests/{requestID}/reject": {
            "patch": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Moderator rejects an auction request with a reason.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "moderator"
                ],
                "summary": "Reject an auction request by moderator",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Auction Request ID (UUID format)",
                        "name": "requestID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Rejection reason",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.rejectAuctionRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Rejected auction request",
                        "schema": {
                            "$ref": "#/definitions/db.AuctionRequest"
                        }
                    }
                }
            }
        },
        "/orders": {
            "get": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "List all orders of a member with optional filtering by order status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "List all orders of a member",
                "parameters": [
                    {
                        "enum": [
                            "pending",
                            "packaging",
                            "delivering",
                            "delivered",
                            "completed",
                            "canceled",
                            "failed"
                        ],
                        "type": "string",
                        "description": "Filter by order status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of orders",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.MemberOrderInfo"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Create a new order for purchasing Gundam models",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Create a new order",
                "parameters": [
                    {
                        "description": "FailedOrder details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.createOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "FailedOrder created successfully",
                        "schema": {
                            "$ref": "#/definitions/db.CreateOrderTxResult"
                        }
                    }
                }
            }
        },
        "/orders/{orderID}": {
            "get": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Get details of a specific order for a member",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Get order details for a member",
                "parameters": [
                    {
                        "type": "string",
                        "example": "123e4567-e89b-12d3-a456-426614174000",
                        "description": "FailedOrder ID",
                        "name": "orderID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "FailedOrder details",
                        "schema": {
                            "$ref": "#/definitions/db.MemberOrderDetails"
                        }
                    }
                }
            }
        },
        "/orders/{orderID}/cancel": {
            "patch": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Allows the buyer to cancel a regular order that is only in pending.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Cancel order by buyer",
                "parameters": [
                    {
                        "type": "string",
                        "example": "123e4567-e89b-12d3-a456-426614174000",
                        "description": "FailedOrder ID",
                        "name": "orderID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Cancel order request",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/api.cancelOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "FailedOrder canceled successfully",
                        "schema": {
                            "$ref": "#/definitions/db.CancelOrderByBuyerTxResult"
                        }
                    }
                }
            }
        },
        "/orders/{orderID}/complete": {
            "patch": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Confirm that the receiver has received the order. For regular orders, it completes the transaction and transfers payment to seller. For exchange orders, it updates exchange status and may complete the exchange if both parties have confirmed. For auction orders, it completes the auction transaction.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Confirm order received",
                "parameters": [
                    {
                        "type": "string",
                        "example": "123e4567-e89b-12d3-a456-426614174000",
                        "description": "FailedOrder ID",
                        "name": "orderID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "FailedOrder completed successfully"
                    }
                }
            }
        },
        "/orders/{orderID}/package": {
            "patch": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Upload package images, create a delivery order, and update order status for a specified order.\nHandles packaging for regular orders, exchange orders, and auction orders (future).",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Package an order for delivery",
                "parameters": [
                    {
                        "type": "string",
                        "description": "FailedOrder ID in UUID format",
                        "name": "orderID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Package images (at least one image required)",
                        "name": "package_images",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully packaged order with delivery details",
                        "schema": {
                            "$ref": "#/definitions/db.PackageOrderTxResult"
                        }
                    }
                }
            }
        },
        "/otp/email/generate": {
            "post": {
                "description": "Generates and sends an OTP to the specified email address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Generate a One-Time Password (OTP) for email",
                "parameters": [
                    {
                        "description": "OTP Generation Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.GenerateEmailOTPRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP generated successfully",
                        "schema": {
                            "$ref": "#/definitions/api.GenerateEmailOTPResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input"
                    },
                    "429": {
                        "description": "Too Many Requests - OTP request rate limit exceeded"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/otp/email/verify": {
            "post": {
                "description": "Verifies the OTP sent to a user's email address and updates the user's email if valid",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Verify One-Time Password (OTP) via email",
                "parameters": [
                    {
                        "description": "OTP Verification Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.VerifyEmailOTPRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP verified successfully"
                    },
                    "400": {
                        "description": "Bad Request - Invalid input or OTP verification failed"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid OTP code"
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to update user information"
                    }
                }
            }
        },
        "/otp/phone-number/generate": {
            "post": {
                "description": "Generates and sends an OTP to the specified phone number. The OTP will be valid for 10 minutes.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Generate a One-Time Password (OTP) for phone number",
                "parameters": [
                    {
                        "description": "OTP Generation Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.GeneratePhoneOTPRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP generated successfully",
                        "schema": {
                            "$ref": "#/definitions/api.GeneratePhoneOTPResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid phone number format"
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to generate or send OTP"
                    }
                }
            }
        },
        "/otp/phone-number/verify": {
            "post": {
                "description": "Verifies the OTP sent to a user's phone number and updates the user's phone number if valid",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Verify One-Time Password (OTP) via phone number",
                "parameters": [
                    {
                        "description": "OTP Verification Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.VerifyPhoneOTPRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP verified successfully"
                    },
                    "400": {
                        "description": "Bad Request - Invalid input or OTP verification failed"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid OTP code"
                    },
                    "404": {
                        "description": "Not Found - User not found"
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to update user information"
                    }
                }
            }
        },
        "/seller/profile": {
            "get": {
                "description": "Get detailed information about a specific seller",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "seller profile"
                ],
                "summary": "Get seller profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Seller profile details",
                        "schema": {
                            "$ref": "#/definitions/db.GetSellerDetailByIDRow"
                        }
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "description": "Creates a new seller profile",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "seller profile"
                ],
                "summary": "Create a seller profile",
                "parameters": [
                    {
                        "description": "Seller profile creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.createSellerProfileRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Seller profile created successfully",
                        "schema": {
                            "$ref": "#/definitions/db.SellerProfile"
                        }
                    },
                    "400": {
                        "description": "Invalid request format"
                    },
                    "409": {
                        "description": "Seller profile already exists"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "patch": {
                "description": "Update the seller's profile information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "seller profile"
                ],
                "summary": "Update seller profile",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.updateSellerProfileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated seller profile",
                        "schema": {
                            "$ref": "#/definitions/db.SellerProfile"
                        }
                    },
                    "400": {
                        "description": "Invalid request body"
                    },
                    "404": {
                        "description": "Seller not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/sellers/:sellerID/auction-requests": {
            "get": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "List all auction requests that belong to the specified seller, optionally filtered by status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auctions"
                ],
                "summary": "List auction requests of a seller",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID",
                        "name": "sellerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "pending",
                            "approved",
                            "rejected"
                        ],
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of auction requests",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.AuctionRequest"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Create a new auction request for a Gundam model",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auctions"
                ],
                "summary": "Create a new auction request by seller",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID",
                        "name": "sellerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Auction request details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.createAuctionRequestBody"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created auction request",
                        "schema": {
                            "$ref": "#/definitions/db.AuctionRequest"
                        }
                    }
                }
            }
        },
        "/sellers/:sellerID/auctions": {
            "get": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "List all auctions that belong to the specified seller, optionally filtered by status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auctions"
                ],
                "summary": "List all auctions of a seller",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID",
                        "name": "sellerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "scheduled",
                            "active",
                            "ended",
                            "completed",
                            "failed",
                            "canceled"
                        ],
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of auctions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.AuctionDetails"
                            }
                        }
                    }
                }
            }
        },
        "/sellers/:sellerID/orders": {
            "get": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Get all sales orders that belong to the specified seller ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sellers"
                ],
                "summary": "List all sales orders (excluding exchange orders) for a specific seller",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID",
                        "name": "sellerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "pending",
                            "packaging",
                            "delivering",
                            "delivered",
                            "completed",
                            "canceled",
                            "failed"
                        ],
                        "type": "string",
                        "description": "Filter by order status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of sales orders",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.SalesOrderInfo"
                            }
                        }
                    }
                }
            }
        },
        "/sellers/:sellerID/orders/:orderID": {
            "get": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Get details of a specific sales order for the seller",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sellers"
                ],
                "summary": "Get sales order details (excluding exchange orders)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID",
                        "name": "sellerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "FailedOrder ID",
                        "name": "orderID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sales order details",
                        "schema": {
                            "$ref": "#/definitions/db.SalesOrderDetails"
                        }
                    }
                }
            }
        },
        "/sellers/:sellerID/orders/:orderID/confirm": {
            "patch": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Confirm an order for the specified seller. This endpoint checks the order's status before proceeding.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sellers"
                ],
                "summary": "Confirm an order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID",
                        "name": "sellerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "FailedOrder ID",
                        "name": "orderID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully confirmed order",
                        "schema": {
                            "$ref": "#/definitions/db.ConfirmOrderTxResult"
                        }
                    }
                }
            }
        },
        "/sellers/:sellerID/subscriptions/active": {
            "get": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Get the current active subscription for the specified seller",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sellers"
                ],
                "summary": "Get current active subscription",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID",
                        "name": "sellerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved current active subscription"
                    },
                    "404": {
                        "description": "Subscription not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/sellers/{sellerID}/auction-requests/{requestID}": {
            "delete": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Delete an auction request. Only requests with 'pending' or 'rejected' status can be deleted.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auctions"
                ],
                "summary": "Delete an auction request by seller",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID",
                        "name": "sellerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Auction Request ID (UUID format)",
                        "name": "requestID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted auction request"
                    }
                }
            }
        },
        "/sellers/{sellerID}/auctions/{auctionID}": {
            "get": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Get details of a specific auction for the seller",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auctions"
                ],
                "summary": "Get auction details by seller",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID",
                        "name": "sellerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Auction ID (UUID format)",
                        "name": "auctionID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Auction details",
                        "schema": {
                            "$ref": "#/definitions/db.AuctionDetails"
                        }
                    }
                }
            }
        },
        "/sellers/{sellerID}/gundams/{gundamID}/publish": {
            "patch": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Publish a gundam for sale for the specified seller. This endpoint checks the gundam's status before proceeding.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sellers"
                ],
                "summary": "Publish a gundam for sale",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Gundam ID",
                        "name": "gundamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Seller ID",
                        "name": "sellerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully published gundam",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/sellers/{sellerID}/gundams/{gundamID}/unpublish": {
            "patch": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Unpublish a gundam for the specified seller. This endpoint checks the gundam's status before proceeding.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sellers"
                ],
                "summary": "Unpublish a gundam",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Gundam ID",
                        "name": "gundamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Seller ID",
                        "name": "sellerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully unsold gundam with details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid gundam ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Seller does not own this gundam",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Seller not found\u003cbr/\u003eGundam not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "Gundam is not currently listed for sale",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/sellers/{sellerID}/orders/{orderID}/cancel": {
            "patch": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Cancel a pending order by the seller",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sellers"
                ],
                "summary": "Cancel order by seller",
                "parameters": [
                    {
                        "type": "string",
                        "example": "s123e456-e789-45d0-9876-54321abcdef",
                        "description": "Seller ID",
                        "name": "sellerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "123e4567-e89b-12d3-a456-426614174000",
                        "description": "FailedOrder ID",
                        "name": "orderID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Cancellation reason",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/api.cancelOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "FailedOrder canceled successfully",
                        "schema": {
                            "$ref": "#/definitions/db.CancelOrderBySellerTxResult"
                        }
                    }
                }
            }
        },
        "/tokens/verify": {
            "post": {
                "description": "Verifies a JWT access token and returns the associated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Verify access token",
                "parameters": [
                    {
                        "description": "Token verification request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.verifyAccessTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User information",
                        "schema": {
                            "$ref": "#/definitions/db.User"
                        }
                    },
                    "400": {
                        "description": "Invalid request format"
                    },
                    "401": {
                        "description": "Invalid or expired token"
                    }
                }
            }
        },
        "/user/me/wallet/entries": {
            "get": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "List user wallet entries",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet"
                ],
                "summary": "List user wallet entries",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by wallet entry status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of wallet entries",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.WalletEntry"
                            }
                        }
                    }
                }
            }
        },
        "/users": {
            "post": {
                "description": "Create a new user with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.createUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created user",
                        "schema": {
                            "$ref": "#/definitions/db.User"
                        }
                    },
                    "400": {
                        "description": "Invalid request body"
                    },
                    "409": {
                        "description": "Email already exists"
                    },
                    "422": {
                        "description": "Validation error"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/users/:id/gundams": {
            "get": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Get all gundams that belong to the specified user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "List all gundams for a specific user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Gundam name to filter by",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of gundams",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.GundamDetails"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Create a new Gundam model with images and accessories",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new Gundam model",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Gundam name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Gundam grade ID",
                        "name": "grade_id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Gundam series name",
                        "name": "series",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Total number of parts",
                        "name": "parts_total",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Gundam material",
                        "name": "material",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Gundam version",
                        "name": "version",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "enum": [
                            "new",
                            "open box",
                            "used"
                        ],
                        "type": "string",
                        "description": "Condition of the Gundam",
                        "name": "condition",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Manufacturer name",
                        "name": "manufacturer",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "enum": [
                            "1/144",
                            "1/100",
                            "1/60"
                        ],
                        "type": "string",
                        "description": "Gundam scale",
                        "name": "scale",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Weight in grams",
                        "name": "weight",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Detailed description",
                        "name": "description",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Price in VND",
                        "name": "price",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "Release year",
                        "name": "release_year",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Primary image of the Gundam",
                        "name": "primary_image",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Secondary images of the Gundam",
                        "name": "secondary_images",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Additional details about condition",
                        "name": "condition_description",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Accessory as JSON object. Add multiple accessories by repeating this field with different values.",
                        "name": "accessory",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created Gundam",
                        "schema": {
                            "$ref": "#/definitions/db.GundamDetails"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input data"
                    },
                    "403": {
                        "description": "Forbidden - User is not authorized to create Gundam for this user"
                    },
                    "404": {
                        "description": "Not Found - User with specified ID does not exist"
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to create Gundam"
                    }
                }
            }
        },
        "/users/:id/gundams/:gundamID": {
            "get": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Retrieves detailed information about a specific Gundam model",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gundams"
                ],
                "summary": "Get Gundam details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Gundam ID",
                        "name": "gundamID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved Gundam details",
                        "schema": {
                            "$ref": "#/definitions/db.GundamDetails"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Hard delete a Gundam model by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gundams"
                ],
                "summary": "Hard delete Gundam",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Gundam ID",
                        "name": "gundamID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted Gundam"
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Update the basic information of a Gundam model",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gundams"
                ],
                "summary": "Update Gundam basis info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Gundam ID",
                        "name": "gundamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Gundam name",
                        "name": "name",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Gundam grade ID",
                        "name": "grade_id",
                        "in": "body",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Gundam series name",
                        "name": "series",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Total number of parts",
                        "name": "parts_total",
                        "in": "body",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Gundam material",
                        "name": "material",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Gundam version",
                        "name": "version",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Condition of the Gundam",
                        "name": "condition",
                        "in": "body",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "new",
                                "open box",
                                "used"
                            ]
                        }
                    },
                    {
                        "description": "Additional details about condition",
                        "name": "condition_description",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Manufacturer name",
                        "name": "manufacturer",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Weight in grams",
                        "name": "weight",
                        "in": "body",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Gundam scale",
                        "name": "scale",
                        "in": "body",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "1/144",
                                "1/100",
                                "1/60",
                                "1/48"
                            ]
                        }
                    },
                    {
                        "description": "Detailed description",
                        "name": "description",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Price in VND",
                        "name": "price",
                        "in": "body",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Release year",
                        "name": "release_year",
                        "in": "body",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated Gundam",
                        "schema": {
                            "$ref": "#/definitions/db.GundamDetails"
                        }
                    }
                }
            }
        },
        "/users/:id/gundams/:gundamID/accessories": {
            "put": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Update the accessories of a Gundam model",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gundams"
                ],
                "summary": "Update Gundam accessories",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Gundam ID",
                        "name": "gundamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Array of Gundam accessories",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.GundamAccessoryDTO"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated Gundam details",
                        "schema": {
                            "$ref": "#/definitions/db.GundamDetails"
                        }
                    }
                }
            }
        },
        "/users/:id/gundams/:gundamID/images": {
            "post": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Add secondary images to a Gundam model",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gundams"
                ],
                "summary": "Add secondary images to Gundam",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Gundam ID",
                        "name": "gundamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Array of secondary images",
                        "name": "images",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully added secondary images"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Delete a secondary image from a Gundam model",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gundams"
                ],
                "summary": "Delete secondary image from Gundam",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Gundam ID",
                        "name": "gundamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "URL of the secondary image to delete",
                        "name": "image_url",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted secondary image"
                    }
                }
            }
        },
        "/users/:id/gundams/:gundamID/primary-image": {
            "patch": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Update the primary image of a Gundam model",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gundams"
                ],
                "summary": "Update Gundam primary image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Gundam ID",
                        "name": "gundamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "New primary image of the Gundam",
                        "name": "primary_image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated Gundam details",
                        "schema": {
                            "$ref": "#/definitions/db.GundamDetails"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input data"
                    },
                    "403": {
                        "description": "Forbidden - User is not authorized to update Gundam for this user"
                    },
                    "404": {
                        "description": "Not Found - User or Gundam with specified ID does not exist"
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to update Gundam primary image"
                    }
                }
            }
        },
        "/users/:id/wallet": {
            "get": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Get user wallet information details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet"
                ],
                "summary": "Get user wallet information details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User wallet information",
                        "schema": {
                            "$ref": "#/definitions/db.Wallet"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/users/become-seller": {
            "post": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Upgrade the user's role to seller and create the trial subscription",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Become a seller",
                "responses": {
                    "200": {
                        "description": "Successfully became seller",
                        "schema": {
                            "$ref": "#/definitions/db.User"
                        }
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "409": {
                        "description": "User is already a seller"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/users/by-phone": {
            "get": {
                "description": "Get user details using a phone_number number as a query parameter",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Retrieve a user by phone_number number",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Phone Number",
                        "name": "phone_number",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user",
                        "schema": {
                            "$ref": "#/definitions/db.User"
                        }
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/users/me/auctions": {
            "get": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Retrieves a list of auctions the user has participated in. Each auction includes the auction information and the user's participation information.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auctions"
                ],
                "summary": "List user participated auctions",
                "responses": {
                    "200": {
                        "description": "List of participated auctions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.ListUserParticipatedAuctionsRow"
                            }
                        }
                    }
                }
            }
        },
        "/users/me/auctions/:auctionID/bids": {
            "get": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Retrieves a list of bids made by the user in a participated auction.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auctions"
                ],
                "summary": "List user bids",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Auction ID",
                        "name": "auctionID",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of user bids",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.AuctionBid"
                            }
                        }
                    }
                }
            }
        },
        "/users/me/auctions/{auctionID}/bids": {
            "post": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "User places a bid in an active auction they have participated in.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auctions"
                ],
                "summary": "Place a bid in an auction",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Auction ID",
                        "name": "auctionID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body containing bid amount",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.placeBidRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful bid placement"
                    }
                }
            }
        },
        "/users/me/auctions/{auctionID}/participate": {
            "post": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "User deposits money to participate in an active auction.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auctions"
                ],
                "summary": "Participate in an auction",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Auction ID",
                        "name": "auctionID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Participation result",
                        "schema": {
                            "$ref": "#/definitions/db.ParticipateInAuctionTxResult"
                        }
                    }
                }
            }
        },
        "/users/me/auctions/{auctionID}/payment": {
            "post": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Pay the remaining amount after deposit for a winning auction.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auctions"
                ],
                "summary": "Pay for winning auction bid",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Auction ID",
                        "name": "auctionID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Payment request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.payAuctionWinningBidRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment result",
                        "schema": {
                            "$ref": "#/definitions/db.PayAuctionWinningBidTxResult"
                        }
                    }
                }
            }
        },
        "/users/me/exchange-offers": {
            "get": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Get a list of all exchange offers created by the authenticated user, including details about the exchange posts, items, and negotiation notes.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "exchanges"
                ],
                "summary": "List user's exchange offers",
                "responses": {
                    "200": {
                        "description": "List of user's exchange offers",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.UserExchangeOfferDetails"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Create a new exchange offer for trading multiple Gundams between users with optional compensation.\n\n**Business Rules:**\n- Không thể tạo offer cho bài đăng của chính mình\n- Mỗi user chỉ có 1 offer cho mỗi bài đăng\n- Gundam của chủ bài đăng phải có status \"for exchange\"\n- Gundam của người đề xuất phải có status \"in store\" (sẽ được chuyển thành \"for exchange\" sau khi tạo offer)\n- Nếu có compensation, người trả phải có đủ số dư (chỉ kiểm tra nếu người đề xuất là người trả)\n- Compensation chỉ được trừ tiền khi offer được chấp nhận, không trừ ngay",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "exchanges"
                ],
                "summary": "Create an exchange offer",
                "parameters": [
                    {
                        "description": "Create exchange offer request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.createExchangeOfferRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Exchange offer created successfully",
                        "schema": {
                            "$ref": "#/definitions/db.CreateExchangeOfferTxResult"
                        }
                    }
                }
            }
        },
        "/users/me/exchange-offers/{offerID}": {
            "get": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Retrieves detailed information about a specific exchange offer created by the authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "exchanges"
                ],
                "summary": "Get user's exchange offer details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exchange Offer ID",
                        "name": "offerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.UserExchangeOfferDetails"
                        }
                    },
                    "400": {
                        "description": "Invalid offer ID",
                        "schema": {}
                    },
                    "403": {
                        "description": "Unauthorized access",
                        "schema": {}
                    },
                    "404": {
                        "description": "Offer not found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Delete an exchange offer created by the authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "exchanges"
                ],
                "summary": "Delete an exchange offer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exchange Offer ID",
                        "name": "offerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deleted offer response",
                        "schema": {
                            "$ref": "#/definitions/db.ExchangeOfferInfo"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "As an offerer, update exchange offer details. Only allowed when a negotiation is requested by the post owner.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "exchanges"
                ],
                "summary": "Update an exchange offer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exchange Offer OfferID",
                        "name": "offerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update offer request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.updateExchangeOfferRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated offer response",
                        "schema": {
                            "$ref": "#/definitions/db.UpdateExchangeOfferTxResult"
                        }
                    }
                }
            }
        },
        "/users/me/exchange-posts": {
            "get": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "List all exchange posts created by the current authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "exchanges"
                ],
                "summary": "List user's exchange posts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by status (open, closed)",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of user's exchange posts",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.UserExchangePostDetails"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Create a new exchange post.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "exchanges"
                ],
                "summary": "Create a new exchange post",
                "parameters": [
                    {
                        "description": "Create exchange post request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.createExchangePostRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create exchange post response",
                        "schema": {
                            "$ref": "#/definitions/db.CreateExchangePostTxResult"
                        }
                    }
                }
            }
        },
        "/users/me/exchange-posts/{id}": {
            "delete": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Deletes an exchange post and resets the status of associated gundams. Only the post owner can delete it.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "exchanges"
                ],
                "summary": "Delete an exchange post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exchange Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Delete exchange post response",
                        "schema": {
                            "$ref": "#/definitions/db.DeleteExchangePostTxResult"
                        }
                    }
                }
            }
        },
        "/users/me/exchange-posts/{postID}": {
            "get": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Get detailed information about a specific exchange post owned by the authenticated user, including items and offers.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "exchanges"
                ],
                "summary": "Get user's exchange post details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exchange Post ID",
                        "name": "postID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter by status (open, closed)",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User exchange post details",
                        "schema": {
                            "$ref": "#/definitions/db.UserExchangePostDetails"
                        }
                    },
                    "400": {
                        "description": "Invalid post ID or status",
                        "schema": {}
                    },
                    "404": {
                        "description": "Post not found",
                        "schema": {}
                    }
                }
            }
        },
        "/users/me/exchange-posts/{postID}/offers/{offerID}/accept": {
            "patch": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "As a post owner, accept an exchange offer. This will create an exchange transaction and related orders.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "exchanges"
                ],
                "summary": "Accept an exchange offer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exchange Post ID",
                        "name": "postID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Exchange Offer ID",
                        "name": "offerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Accepted offer response",
                        "schema": {
                            "$ref": "#/definitions/db.AcceptExchangeOfferTxResult"
                        }
                    }
                }
            }
        },
        "/users/me/exchange-posts/{postID}/offers/{offerID}/negotiate": {
            "patch": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "As a post owner, request negotiation with an offerer.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "exchanges"
                ],
                "summary": "Request negotiation for an exchange offer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exchange Post ID",
                        "name": "postID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Exchange Offer ID",
                        "name": "offerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Negotiation request",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/api.requestNegotiationForOfferRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Negotiation request response",
                        "schema": {
                            "$ref": "#/definitions/db.RequestNegotiationForOfferTxResult"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Get detailed information about a specific user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Retrieve a user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user",
                        "schema": {
                            "$ref": "#/definitions/db.User"
                        }
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "put": {
                "description": "Update specific user details by user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update a user's information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.updateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated user",
                        "schema": {
                            "$ref": "#/definitions/db.User"
                        }
                    },
                    "400": {
                        "description": "Invalid request body"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/users/{id}/addresses": {
            "get": {
                "description": "Get all addresses for a specific user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Retrieve user addresses",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user addresses",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.UserAddress"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "description": "Add a new address for a specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Address creation request",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/api.createUserAddressRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Address created successfully",
                        "schema": {
                            "$ref": "#/definitions/db.UserAddress"
                        }
                    },
                    "400": {
                        "description": "Invalid request body"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/users/{id}/addresses/pickup": {
            "get": {
                "description": "Get the pickup address of a specific user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user pickup address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user pickup address",
                        "schema": {
                            "$ref": "#/definitions/db.UserAddress"
                        }
                    },
                    "404": {
                        "description": "Pickup address not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/users/{id}/addresses/{address_id}": {
            "put": {
                "description": "Update an existing address information for a specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Address ID",
                        "name": "address_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Address information to update",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.updateUserAddressRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Address updated successfully",
                        "schema": {
                            "$ref": "#/definitions/db.UserAddress"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an address of a user",
                "tags": [
                    "users"
                ],
                "summary": "Delete user address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Address ID",
                        "name": "address_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Address deleted successfully"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "404": {
                        "description": "Address not found"
                    },
                    "409": {
                        "description": "Cannot delete primary or pickup address"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/users/{id}/avatar": {
            "patch": {
                "description": "Upload and update a user's profile avatar",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user avatar",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Avatar image file",
                        "name": "avatar",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated avatar",
                        "schema": {
                            "$ref": "#/definitions/api.updateAvatarResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/wallet/zalopay/create": {
            "post": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Create a ZaloPay order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet"
                ],
                "summary": "Create a ZaloPay order",
                "parameters": [
                    {
                        "description": "Create ZaloPay order request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.createZalopayOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Create ZaloPay order response",
                        "schema": {
                            "$ref": "#/definitions/zalopay.CreateOrderZalopayResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        }
    },
    "definitions": {
        "api.GenerateEmailOTPRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "api.GenerateEmailOTPResponse": {
            "type": "object",
            "required": [
                "created_at",
                "email",
                "expires_at",
                "otp_code"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "string"
                },
                "otp_code": {
                    "type": "string"
                }
            }
        },
        "api.GeneratePhoneOTPRequest": {
            "type": "object",
            "required": [
                "phone_number"
            ],
            "properties": {
                "phone_number": {
                    "description": "Số điện thoại cần gửi OTP",
                    "type": "string"
                }
            }
        },
        "api.GeneratePhoneOTPResponse": {
            "type": "object",
            "required": [
                "created_at",
                "expires_at",
                "otp_code",
                "phone_number"
            ],
            "properties": {
                "created_at": {
                    "description": "Thời điểm OTP được tạo",
                    "type": "string"
                },
                "expires_at": {
                    "description": "Thời điểm OTP hết hạn",
                    "type": "string"
                },
                "otp_code": {
                    "description": "Mã OTP được tạo",
                    "type": "string"
                },
                "phone_number": {
                    "description": "Số điện thoại đã gửi OTP",
                    "type": "string"
                }
            }
        },
        "api.VerifyEmailOTPRequest": {
            "type": "object",
            "required": [
                "email",
                "otp_code"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "otp_code": {
                    "type": "string"
                }
            }
        },
        "api.VerifyPhoneOTPRequest": {
            "type": "object",
            "required": [
                "otp_code",
                "phone_number",
                "user_id"
            ],
            "properties": {
                "otp_code": {
                    "description": "Mã OTP",
                    "type": "string"
                },
                "phone_number": {
                    "description": "Số điện thoại mới",
                    "type": "string"
                },
                "user_id": {
                    "description": "ID của user cần cập nhật số điện thoại",
                    "type": "string"
                }
            }
        },
        "api.addCartItemRequest": {
            "type": "object",
            "required": [
                "gundam_id"
            ],
            "properties": {
                "gundam_id": {
                    "type": "integer"
                }
            }
        },
        "api.cancelExchangeRequest": {
            "type": "object",
            "required": [
                "reason"
            ],
            "properties": {
                "reason": {
                    "type": "string"
                }
            }
        },
        "api.cancelOrderRequest": {
            "type": "object",
            "required": [
                "reason"
            ],
            "properties": {
                "reason": {
                    "type": "string"
                }
            }
        },
        "api.checkEmailRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "api.createAuctionRequestBody": {
            "type": "object",
            "required": [
                "bid_increment",
                "buy_now_price",
                "end_time",
                "gundam_id",
                "start_time",
                "starting_price"
            ],
            "properties": {
                "bid_increment": {
                    "type": "integer"
                },
                "buy_now_price": {
                    "type": "integer"
                },
                "end_time": {
                    "type": "string"
                },
                "gundam_id": {
                    "type": "integer"
                },
                "start_time": {
                    "type": "string"
                },
                "starting_price": {
                    "type": "integer"
                }
            }
        },
        "api.createExchangeOfferRequest": {
            "type": "object",
            "required": [
                "compensation_amount",
                "exchange_post_id",
                "note",
                "offerer_gundam_ids",
                "payer_id",
                "poster_gundam_ids"
            ],
            "properties": {
                "compensation_amount": {
                    "description": "Số tiền bù theo VND (bắt buộc nếu có payer_id, phải \u003e 0, chỉ trừ tiền khi offer được chấp nhận)",
                    "type": "integer",
                    "example": 50000
                },
                "exchange_post_id": {
                    "description": "UUID của bài đăng trao đổi mà bạn muốn tạo offer",
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "note": {
                    "description": "Tin nhắn gửi kèm cho chủ bài đăng (tùy chọn)",
                    "type": "string",
                    "example": "Tôi rất thích RG Unicorn của bạn!"
                },
                "offerer_gundam_ids": {
                    "description": "Danh sách ID các Gundam của bạn để đưa ra trao đổi (phải thuộc về bạn và có status \"in store\")",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        789,
                        321
                    ]
                },
                "payer_id": {
                    "description": "ID người phải trả tiền bù (chỉ có thể là bạn hoặc chủ bài đăng, để null nếu không có ai bù)",
                    "type": "string",
                    "example": "user_abc123"
                },
                "poster_gundam_ids": {
                    "description": "Danh sách ID các Gundam của chủ bài đăng mà bạn muốn nhận về (phải thuộc bài đăng này và có status \"for exchange\")",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        123,
                        456
                    ]
                }
            }
        },
        "api.createExchangePostRequest": {
            "type": "object",
            "required": [
                "content",
                "post_images",
                "post_item_id"
            ],
            "properties": {
                "content": {
                    "description": "Nội dung bài post",
                    "type": "string"
                },
                "post_images": {
                    "description": "Ảnh bài post",
                    "type": "array",
                    "maxItems": 5,
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/multipart.FileHeader"
                    }
                },
                "post_item_id": {
                    "description": "ID của các Gundam mà chủ bài post cho phép trao đổi",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "api.createOrderRequest": {
            "type": "object",
            "required": [
                "buyer_address_id",
                "delivery_fee",
                "expected_delivery_time",
                "gundam_ids",
                "items_subtotal",
                "note",
                "payment_method",
                "seller_id",
                "total_amount"
            ],
            "properties": {
                "buyer_address_id": {
                    "description": "ID of the buyer's chosen address\nexample: 42",
                    "type": "integer"
                },
                "delivery_fee": {
                    "description": "Delivery fee (VND)\nminimum: 0\nexample: 30000",
                    "type": "integer",
                    "minimum": 0
                },
                "expected_delivery_time": {
                    "description": "Expected delivery time\nexample: 2025-04-05T10:00:00Z",
                    "type": "string"
                },
                "gundam_ids": {
                    "description": "List of Gundam IDs in the order\nexample: [1, 2, 3]",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "items_subtotal": {
                    "description": "Total value of all items (excluding delivery fee)\nminimum: 0\nexample: 500000",
                    "type": "integer",
                    "minimum": 0
                },
                "note": {
                    "description": "Optional note for the order\nmaxLength: 255\nexample: Please deliver in the morning",
                    "type": "string",
                    "maxLength": 255
                },
                "payment_method": {
                    "description": "Payment method (wallet: pay via platform wallet, cod: cash on delivery)\nenums: wallet,cod\nexample: wallet",
                    "type": "string",
                    "enum": [
                        "wallet",
                        "cod"
                    ]
                },
                "seller_id": {
                    "description": "ID of the seller\nexample: user123",
                    "type": "string"
                },
                "total_amount": {
                    "description": "Total order amount (including delivery fee)\nminimum: 0\nexample: 530000",
                    "type": "integer",
                    "minimum": 0
                }
            }
        },
        "api.createSellerProfileRequest": {
            "type": "object",
            "required": [
                "shop_name",
                "user_id"
            ],
            "properties": {
                "shop_name": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "api.createUserAddressRequest": {
            "type": "object",
            "required": [
                "detail",
                "district_name",
                "full_name",
                "ghn_district_id",
                "ghn_ward_code",
                "is_pickup_address",
                "is_primary",
                "phone_number",
                "province_name",
                "ward_name"
            ],
            "properties": {
                "detail": {
                    "type": "string"
                },
                "district_name": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "ghn_district_id": {
                    "type": "integer"
                },
                "ghn_ward_code": {
                    "type": "string"
                },
                "is_pickup_address": {
                    "type": "boolean"
                },
                "is_primary": {
                    "type": "boolean"
                },
                "phone_number": {
                    "type": "string"
                },
                "province_name": {
                    "type": "string"
                },
                "ward_name": {
                    "type": "string"
                }
            }
        },
        "api.createUserRequest": {
            "type": "object",
            "required": [
                "email",
                "full_name",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "api.createZalopayOrderRequest": {
            "type": "object",
            "required": [
                "amount",
                "description",
                "redirect_url"
            ],
            "properties": {
                "amount": {
                    "type": "integer",
                    "minimum": 1000
                },
                "description": {
                    "type": "string",
                    "maxLength": 256
                },
                "redirect_url": {
                    "type": "string"
                }
            }
        },
        "api.loginUserRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "api.loginUserResponse": {
            "type": "object",
            "required": [
                "access_token",
                "access_token_expires_at",
                "user"
            ],
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "access_token_expires_at": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/db.User"
                }
            }
        },
        "api.loginUserWithGoogleRequest": {
            "type": "object",
            "required": [
                "id_token"
            ],
            "properties": {
                "id_token": {
                    "type": "string"
                }
            }
        },
        "api.payAuctionWinningBidRequest": {
            "type": "object",
            "required": [
                "delivery_fee",
                "expected_delivery_time",
                "note",
                "user_address_id"
            ],
            "properties": {
                "delivery_fee": {
                    "type": "integer"
                },
                "expected_delivery_time": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                },
                "user_address_id": {
                    "type": "integer"
                }
            }
        },
        "api.payExchangeDeliveryFeeRequest": {
            "type": "object",
            "required": [
                "delivery_fee",
                "expected_delivery_time",
                "note"
            ],
            "properties": {
                "delivery_fee": {
                    "type": "integer",
                    "minimum": 1
                },
                "expected_delivery_time": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                }
            }
        },
        "api.placeBidRequest": {
            "type": "object",
            "required": [
                "amount"
            ],
            "properties": {
                "amount": {
                    "type": "integer"
                }
            }
        },
        "api.provideExchangeDeliveryAddressesRequest": {
            "type": "object",
            "required": [
                "from_address_id",
                "to_address_id"
            ],
            "properties": {
                "from_address_id": {
                    "description": "ID địa chỉ gửi đã được lưu trong bảng user_addresses",
                    "type": "integer"
                },
                "to_address_id": {
                    "description": "ID địa chỉ nhận đã được lưu trong bảng user_addresses",
                    "type": "integer"
                }
            }
        },
        "api.rejectAuctionRequestBody": {
            "type": "object",
            "required": [
                "reason"
            ],
            "properties": {
                "reason": {
                    "type": "string"
                }
            }
        },
        "api.requestNegotiationForOfferRequest": {
            "type": "object",
            "required": [
                "note"
            ],
            "properties": {
                "note": {
                    "description": "Ghi chú từ người yêu cầu thương lượng, không bắt buộc",
                    "type": "string"
                }
            }
        },
        "api.updateAvatarResponse": {
            "type": "object",
            "required": [
                "avatar_url"
            ],
            "properties": {
                "avatar_url": {
                    "type": "string"
                }
            }
        },
        "api.updateExchangeOfferRequest": {
            "type": "object",
            "required": [
                "compensation_amount",
                "note",
                "payer_id",
                "require_compensation"
            ],
            "properties": {
                "compensation_amount": {
                    "description": "Bắt buộc khi require_compensation=true",
                    "type": "integer"
                },
                "note": {
                    "description": "Tin nhắn thương lượng, không bắt buộc",
                    "type": "string"
                },
                "payer_id": {
                    "description": "ID người trả tiền bù, bắt buộc khi require_compensation=true",
                    "type": "string"
                },
                "require_compensation": {
                    "description": "true = yêu cầu bù tiền, false = không yêu cầu bù tiền",
                    "type": "boolean"
                }
            }
        },
        "api.updateSellerProfileRequest": {
            "type": "object",
            "required": [
                "shop_name",
                "user_id"
            ],
            "properties": {
                "shop_name": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "api.updateUserAddressRequest": {
            "type": "object",
            "required": [
                "detail",
                "district_name",
                "full_name",
                "ghn_district_id",
                "ghn_ward_code",
                "is_pickup_address",
                "is_primary",
                "phone_number",
                "province_name",
                "ward_name"
            ],
            "properties": {
                "detail": {
                    "type": "string"
                },
                "district_name": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "ghn_district_id": {
                    "type": "integer"
                },
                "ghn_ward_code": {
                    "type": "string"
                },
                "is_pickup_address": {
                    "type": "boolean"
                },
                "is_primary": {
                    "type": "boolean"
                },
                "phone_number": {
                    "type": "string"
                },
                "province_name": {
                    "type": "string"
                },
                "ward_name": {
                    "type": "string"
                }
            }
        },
        "api.updateUserRequest": {
            "type": "object",
            "required": [
                "full_name"
            ],
            "properties": {
                "full_name": {
                    "type": "string"
                }
            }
        },
        "api.verifyAccessTokenRequest": {
            "type": "object",
            "required": [
                "access_token"
            ],
            "properties": {
                "access_token": {
                    "type": "string"
                }
            }
        },
        "db.AcceptExchangeOfferTxResult": {
            "type": "object",
            "required": [
                "exchange"
            ],
            "properties": {
                "exchange": {
                    "$ref": "#/definitions/db.Exchange"
                }
            }
        },
        "db.AddCartItemRow": {
            "type": "object",
            "required": [
                "cart_item_id",
                "gundam_id",
                "gundam_image_url",
                "gundam_name",
                "gundam_price",
                "seller_avatar_url",
                "seller_id",
                "seller_name"
            ],
            "properties": {
                "cart_item_id": {
                    "type": "string"
                },
                "gundam_id": {
                    "type": "integer"
                },
                "gundam_image_url": {
                    "type": "string"
                },
                "gundam_name": {
                    "type": "string"
                },
                "gundam_price": {
                    "type": "integer"
                },
                "seller_avatar_url": {
                    "type": "string"
                },
                "seller_id": {
                    "type": "string"
                },
                "seller_name": {
                    "type": "string"
                }
            }
        },
        "db.ApproveAuctionRequestTxResult": {
            "type": "object",
            "required": [
                "created_auction",
                "updated_request"
            ],
            "properties": {
                "created_auction": {
                    "$ref": "#/definitions/db.Auction"
                },
                "updated_request": {
                    "$ref": "#/definitions/db.AuctionRequest"
                }
            }
        },
        "db.Auction": {
            "type": "object",
            "required": [
                "actual_end_time",
                "bid_increment",
                "buy_now_price",
                "canceled_by",
                "canceled_reason",
                "created_at",
                "current_price",
                "deposit_amount",
                "deposit_rate",
                "end_time",
                "gundam_id",
                "gundam_snapshot",
                "id",
                "order_id",
                "request_id",
                "seller_id",
                "start_time",
                "starting_price",
                "status",
                "total_bids",
                "total_participants",
                "updated_at",
                "winner_payment_deadline",
                "winning_bid_id"
            ],
            "properties": {
                "actual_end_time": {
                    "type": "string"
                },
                "bid_increment": {
                    "type": "integer"
                },
                "buy_now_price": {
                    "type": "integer"
                },
                "canceled_by": {
                    "type": "string"
                },
                "canceled_reason": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "current_price": {
                    "type": "integer"
                },
                "deposit_amount": {
                    "type": "integer"
                },
                "deposit_rate": {
                    "type": "number"
                },
                "end_time": {
                    "type": "string"
                },
                "gundam_id": {
                    "type": "integer"
                },
                "gundam_snapshot": {
                    "$ref": "#/definitions/db.GundamSnapshot"
                },
                "id": {
                    "type": "string"
                },
                "order_id": {
                    "type": "string"
                },
                "request_id": {
                    "type": "string"
                },
                "seller_id": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                },
                "starting_price": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/db.AuctionStatus"
                },
                "total_bids": {
                    "type": "integer"
                },
                "total_participants": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "winner_payment_deadline": {
                    "type": "string"
                },
                "winning_bid_id": {
                    "type": "string"
                }
            }
        },
        "db.AuctionBid": {
            "type": "object",
            "required": [
                "amount",
                "auction_id",
                "bidder_id",
                "created_at",
                "id",
                "participant_id"
            ],
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "auction_id": {
                    "type": "string"
                },
                "bidder_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "participant_id": {
                    "type": "string"
                }
            }
        },
        "db.AuctionDetails": {
            "type": "object",
            "required": [
                "auction",
                "auction_bids",
                "auction_participants"
            ],
            "properties": {
                "auction": {
                    "description": "Thông tin phiên đấu giá",
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.Auction"
                        }
                    ]
                },
                "auction_bids": {
                    "description": "Danh sách giá đấu",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.AuctionBid"
                    }
                },
                "auction_participants": {
                    "description": "Danh sách người tham gia đấu giá",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.AuctionParticipant"
                    }
                }
            }
        },
        "db.AuctionParticipant": {
            "type": "object",
            "required": [
                "auction_id",
                "created_at",
                "deposit_amount",
                "deposit_entry_id",
                "id",
                "is_refunded",
                "updated_at",
                "user_id"
            ],
            "properties": {
                "auction_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deposit_amount": {
                    "type": "integer"
                },
                "deposit_entry_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "is_refunded": {
                    "type": "boolean"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "db.AuctionRequest": {
            "type": "object",
            "required": [
                "approved_by",
                "bid_increment",
                "buy_now_price",
                "created_at",
                "deposit_amount",
                "deposit_rate",
                "end_time",
                "gundam_id",
                "gundam_snapshot",
                "id",
                "rejected_by",
                "rejected_reason",
                "seller_id",
                "start_time",
                "starting_price",
                "status",
                "updated_at"
            ],
            "properties": {
                "approved_by": {
                    "type": "string"
                },
                "bid_increment": {
                    "type": "integer"
                },
                "buy_now_price": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "deposit_amount": {
                    "type": "integer"
                },
                "deposit_rate": {
                    "type": "number"
                },
                "end_time": {
                    "type": "string"
                },
                "gundam_id": {
                    "type": "integer"
                },
                "gundam_snapshot": {
                    "$ref": "#/definitions/db.GundamSnapshot"
                },
                "id": {
                    "type": "string"
                },
                "rejected_by": {
                    "type": "string"
                },
                "rejected_reason": {
                    "type": "string"
                },
                "seller_id": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                },
                "starting_price": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/db.AuctionRequestStatus"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "db.AuctionRequestStatus": {
            "type": "string",
            "enum": [
                "pending",
                "approved",
                "rejected"
            ],
            "x-enum-varnames": [
                "AuctionRequestStatusPending",
                "AuctionRequestStatusApproved",
                "AuctionRequestStatusRejected"
            ]
        },
        "db.AuctionStatus": {
            "type": "string",
            "enum": [
                "scheduled",
                "active",
                "ended",
                "completed",
                "canceled",
                "failed"
            ],
            "x-enum-varnames": [
                "AuctionStatusScheduled",
                "AuctionStatusActive",
                "AuctionStatusEnded",
                "AuctionStatusCompleted",
                "AuctionStatusCanceled",
                "AuctionStatusFailed"
            ]
        },
        "db.CancelExchangeTxResult": {
            "type": "object",
            "required": [
                "exchange",
                "refunded_compensation",
                "refunded_offerer_delivery_fee",
                "refunded_poster_delivery_fee"
            ],
            "properties": {
                "exchange": {
                    "$ref": "#/definitions/db.Exchange"
                },
                "refunded_compensation": {
                    "type": "boolean"
                },
                "refunded_offerer_delivery_fee": {
                    "type": "boolean"
                },
                "refunded_poster_delivery_fee": {
                    "type": "boolean"
                }
            }
        },
        "db.CancelOrderByBuyerTxResult": {
            "type": "object",
            "required": [
                "buyer_wallet",
                "order",
                "order_transaction",
                "refund_entry"
            ],
            "properties": {
                "buyer_wallet": {
                    "$ref": "#/definitions/db.Wallet"
                },
                "order": {
                    "$ref": "#/definitions/db.Order"
                },
                "order_transaction": {
                    "$ref": "#/definitions/db.OrderTransaction"
                },
                "refund_entry": {
                    "$ref": "#/definitions/db.WalletEntry"
                }
            }
        },
        "db.CancelOrderBySellerTxResult": {
            "type": "object",
            "required": [
                "buyer_wallet",
                "order",
                "order_transaction",
                "refund_entry"
            ],
            "properties": {
                "buyer_wallet": {
                    "$ref": "#/definitions/db.Wallet"
                },
                "order": {
                    "$ref": "#/definitions/db.Order"
                },
                "order_transaction": {
                    "$ref": "#/definitions/db.OrderTransaction"
                },
                "refund_entry": {
                    "$ref": "#/definitions/db.WalletEntry"
                }
            }
        },
        "db.ConfirmOrderTxResult": {
            "type": "object",
            "required": [
                "order",
                "order_items",
                "order_transaction",
                "seller_entry"
            ],
            "properties": {
                "order": {
                    "description": "Đơn hàng đã được cập nhật",
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.Order"
                        }
                    ]
                },
                "order_items": {
                    "description": "Các mặt hàng trong đơn hàng",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.OrderItem"
                    }
                },
                "order_transaction": {
                    "description": "Giao dịch đơn hàng đã được cập nhật với seller_entry_id",
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.OrderTransaction"
                        }
                    ]
                },
                "seller_entry": {
                    "description": "Bút toán cộng tiền cho người bán (pending)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.WalletEntry"
                        }
                    ]
                }
            }
        },
        "db.CreateExchangeOfferTxResult": {
            "type": "object",
            "required": [
                "offer",
                "offer_items"
            ],
            "properties": {
                "offer": {
                    "$ref": "#/definitions/db.ExchangeOffer"
                },
                "offer_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.ExchangeOfferItem"
                    }
                }
            }
        },
        "db.CreateExchangePostTxResult": {
            "type": "object",
            "required": [
                "exchange_post",
                "exchange_post_items"
            ],
            "properties": {
                "exchange_post": {
                    "$ref": "#/definitions/db.ExchangePost"
                },
                "exchange_post_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.ExchangePostItem"
                    }
                }
            }
        },
        "db.CreateOrderTxResult": {
            "type": "object",
            "required": [
                "buyer_entry",
                "order",
                "order_delivery",
                "order_items",
                "order_transaction"
            ],
            "properties": {
                "buyer_entry": {
                    "$ref": "#/definitions/db.WalletEntry"
                },
                "order": {
                    "$ref": "#/definitions/db.Order"
                },
                "order_delivery": {
                    "$ref": "#/definitions/db.OrderDelivery"
                },
                "order_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.OrderItem"
                    }
                },
                "order_transaction": {
                    "$ref": "#/definitions/db.OrderTransaction"
                }
            }
        },
        "db.DeleteExchangePostTxResult": {
            "type": "object",
            "required": [
                "deleted_exchange_post",
                "deleted_exchange_post_offers"
            ],
            "properties": {
                "deleted_exchange_post": {
                    "$ref": "#/definitions/db.ExchangePost"
                },
                "deleted_exchange_post_offers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.ExchangeOffer"
                    }
                }
            }
        },
        "db.DeliveryInformation": {
            "type": "object",
            "required": [
                "created_at",
                "detail",
                "district_name",
                "full_name",
                "ghn_district_id",
                "ghn_ward_code",
                "id",
                "phone_number",
                "province_name",
                "user_id",
                "ward_name"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "detail": {
                    "type": "string"
                },
                "district_name": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "ghn_district_id": {
                    "type": "integer"
                },
                "ghn_ward_code": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "phone_number": {
                    "type": "string"
                },
                "province_name": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "ward_name": {
                    "type": "string"
                }
            }
        },
        "db.DeliveryOverralStatus": {
            "type": "string",
            "enum": [
                "picking",
                "delivering",
                "delivered",
                "failed",
                "return"
            ],
            "x-enum-varnames": [
                "DeliveryOverralStatusPicking",
                "DeliveryOverralStatusDelivering",
                "DeliveryOverralStatusDelivered",
                "DeliveryOverralStatusFailed",
                "DeliveryOverralStatusReturn"
            ]
        },
        "db.Exchange": {
            "type": "object",
            "required": [
                "canceled_by",
                "canceled_reason",
                "compensation_amount",
                "completed_at",
                "created_at",
                "id",
                "offerer_delivery_fee",
                "offerer_delivery_fee_paid",
                "offerer_from_delivery_id",
                "offerer_id",
                "offerer_order_expected_delivery_time",
                "offerer_order_id",
                "offerer_order_note",
                "offerer_to_delivery_id",
                "payer_id",
                "poster_delivery_fee",
                "poster_delivery_fee_paid",
                "poster_from_delivery_id",
                "poster_id",
                "poster_order_expected_delivery_time",
                "poster_order_id",
                "poster_order_note",
                "poster_to_delivery_id",
                "status",
                "updated_at"
            ],
            "properties": {
                "canceled_by": {
                    "type": "string"
                },
                "canceled_reason": {
                    "type": "string"
                },
                "compensation_amount": {
                    "type": "integer"
                },
                "completed_at": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "offerer_delivery_fee": {
                    "type": "integer"
                },
                "offerer_delivery_fee_paid": {
                    "type": "boolean"
                },
                "offerer_from_delivery_id": {
                    "type": "integer"
                },
                "offerer_id": {
                    "type": "string"
                },
                "offerer_order_expected_delivery_time": {
                    "type": "string"
                },
                "offerer_order_id": {
                    "type": "string"
                },
                "offerer_order_note": {
                    "type": "string"
                },
                "offerer_to_delivery_id": {
                    "type": "integer"
                },
                "payer_id": {
                    "type": "string"
                },
                "poster_delivery_fee": {
                    "type": "integer"
                },
                "poster_delivery_fee_paid": {
                    "type": "boolean"
                },
                "poster_from_delivery_id": {
                    "type": "integer"
                },
                "poster_id": {
                    "type": "string"
                },
                "poster_order_expected_delivery_time": {
                    "type": "string"
                },
                "poster_order_id": {
                    "type": "string"
                },
                "poster_order_note": {
                    "type": "string"
                },
                "poster_to_delivery_id": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/db.ExchangeStatus"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "db.ExchangeItem": {
            "type": "object",
            "required": [
                "created_at",
                "exchange_id",
                "grade",
                "gundam_id",
                "id",
                "image_url",
                "is_from_poster",
                "name",
                "owner_id",
                "quantity",
                "scale",
                "slug",
                "weight"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "exchange_id": {
                    "type": "string"
                },
                "grade": {
                    "type": "string"
                },
                "gundam_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "image_url": {
                    "type": "string"
                },
                "is_from_poster": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "owner_id": {
                    "type": "string"
                },
                "quantity": {
                    "type": "integer"
                },
                "scale": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "weight": {
                    "type": "integer"
                }
            }
        },
        "db.ExchangeOffer": {
            "type": "object",
            "required": [
                "compensation_amount",
                "created_at",
                "id",
                "last_negotiation_at",
                "max_negotiations",
                "negotiation_requested",
                "negotiations_count",
                "note",
                "offerer_id",
                "payer_id",
                "post_id",
                "updated_at"
            ],
            "properties": {
                "compensation_amount": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_negotiation_at": {
                    "type": "string"
                },
                "max_negotiations": {
                    "type": "integer"
                },
                "negotiation_requested": {
                    "type": "boolean"
                },
                "negotiations_count": {
                    "type": "integer"
                },
                "note": {
                    "type": "string"
                },
                "offerer_id": {
                    "type": "string"
                },
                "payer_id": {
                    "type": "string"
                },
                "post_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "db.ExchangeOfferInfo": {
            "type": "object",
            "required": [
                "compensation_amount",
                "created_at",
                "id",
                "last_negotiation_at",
                "max_negotiations",
                "negotiation_notes",
                "negotiation_requested",
                "negotiations_count",
                "note",
                "offerer",
                "offerer_exchange_items",
                "payer_id",
                "post_id",
                "poster_exchange_items",
                "updated_at"
            ],
            "properties": {
                "compensation_amount": {
                    "description": "Số tiền bù",
                    "type": "integer"
                },
                "created_at": {
                    "description": "Thời gian tạo đề xuất",
                    "type": "string"
                },
                "id": {
                    "description": "ID đề xuất",
                    "type": "string"
                },
                "last_negotiation_at": {
                    "description": "Thời gian thương lượng gần nhất",
                    "type": "string"
                },
                "max_negotiations": {
                    "description": "Số lần thương lượng tối đa",
                    "type": "integer"
                },
                "negotiation_notes": {
                    "description": "Các ghi chú/tin nhắn thương lượng",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.ExchangeOfferNote"
                    }
                },
                "negotiation_requested": {
                    "description": "Đã yêu cầu thương lượng chưa",
                    "type": "boolean"
                },
                "negotiations_count": {
                    "description": "Số lần đã thương lượng",
                    "type": "integer"
                },
                "note": {
                    "description": "Ghi chú của đề xuất",
                    "type": "string"
                },
                "offerer": {
                    "description": "Thông tin người đề xuất",
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.User"
                        }
                    ]
                },
                "offerer_exchange_items": {
                    "description": "Danh sách Gundam của người đề xuất",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.GundamDetails"
                    }
                },
                "payer_id": {
                    "description": "ID người bù tiền",
                    "type": "string"
                },
                "post_id": {
                    "description": "ID bài đăng trao đổi",
                    "type": "string"
                },
                "poster_exchange_items": {
                    "description": "Danh sách Gundam của người đăng bài mà người đề xuất muốn trao đổi",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.GundamDetails"
                    }
                },
                "updated_at": {
                    "description": "Thời gian cập nhật đề xuất gần nhất",
                    "type": "string"
                }
            }
        },
        "db.ExchangeOfferItem": {
            "type": "object",
            "required": [
                "created_at",
                "gundam_id",
                "id",
                "is_from_poster",
                "offer_id"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "gundam_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "is_from_poster": {
                    "type": "boolean"
                },
                "offer_id": {
                    "type": "string"
                }
            }
        },
        "db.ExchangeOfferNote": {
            "type": "object",
            "required": [
                "content",
                "created_at",
                "id",
                "offer_id",
                "user_id"
            ],
            "properties": {
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "offer_id": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "db.ExchangePost": {
            "type": "object",
            "required": [
                "content",
                "created_at",
                "id",
                "post_image_urls",
                "status",
                "updated_at",
                "user_id"
            ],
            "properties": {
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "post_image_urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "$ref": "#/definitions/db.ExchangePostStatus"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "db.ExchangePostItem": {
            "type": "object",
            "required": [
                "created_at",
                "gundam_id",
                "id",
                "post_id"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "gundam_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "post_id": {
                    "type": "string"
                }
            }
        },
        "db.ExchangePostStatus": {
            "type": "string",
            "enum": [
                "open",
                "closed"
            ],
            "x-enum-varnames": [
                "ExchangePostStatusOpen",
                "ExchangePostStatusClosed"
            ]
        },
        "db.ExchangeStatus": {
            "type": "string",
            "enum": [
                "pending",
                "packaging",
                "delivering",
                "delivered",
                "completed",
                "canceled",
                "failed"
            ],
            "x-enum-varnames": [
                "ExchangeStatusPending",
                "ExchangeStatusPackaging",
                "ExchangeStatusDelivering",
                "ExchangeStatusDelivered",
                "ExchangeStatusCompleted",
                "ExchangeStatusCanceled",
                "ExchangeStatusFailed"
            ]
        },
        "db.ExchangeUserInfo": {
            "type": "object",
            "required": [
                "avatar_url",
                "delivery_fee",
                "delivery_fee_paid",
                "expected_delivery_time",
                "from_address",
                "full_name",
                "id",
                "items",
                "note",
                "order",
                "to_address"
            ],
            "properties": {
                "avatar_url": {
                    "description": "URL ảnh đại diện người dùng",
                    "type": "string"
                },
                "delivery_fee": {
                    "description": "Phí vận chuyển",
                    "type": "integer"
                },
                "delivery_fee_paid": {
                    "description": "Đã thanh toán phí vận chuyển chưa",
                    "type": "boolean"
                },
                "expected_delivery_time": {
                    "description": "Thời gian giao hàng dự kiến",
                    "type": "string"
                },
                "from_address": {
                    "description": "Địa chỉ gửi hàng",
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.DeliveryInformation"
                        }
                    ]
                },
                "full_name": {
                    "description": "Tên người dùng",
                    "type": "string"
                },
                "id": {
                    "description": "Thông tin cơ bản",
                    "type": "string"
                },
                "items": {
                    "description": "Danh sách Gundam",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.ExchangeItem"
                    }
                },
                "note": {
                    "description": "Ghi chú của người dùng",
                    "type": "string"
                },
                "order": {
                    "description": "Thông tin đơn hàng và vận chuyển",
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.Order"
                        }
                    ]
                },
                "to_address": {
                    "description": "Địa chỉ nhận hàng",
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.DeliveryInformation"
                        }
                    ]
                }
            }
        },
        "db.GetSellerDetailByIDRow": {
            "type": "object",
            "required": [
                "seller_profile",
                "user"
            ],
            "properties": {
                "seller_profile": {
                    "$ref": "#/definitions/db.SellerProfile"
                },
                "user": {
                    "$ref": "#/definitions/db.User"
                }
            }
        },
        "db.GundamAccessoryDTO": {
            "type": "object",
            "required": [
                "name",
                "quantity"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "quantity": {
                    "type": "integer"
                }
            }
        },
        "db.GundamDetails": {
            "type": "object",
            "required": [
                "accessories",
                "condition",
                "condition_description",
                "created_at",
                "description",
                "grade",
                "gundam_id",
                "manufacturer",
                "material",
                "name",
                "owner_id",
                "parts_total",
                "price",
                "primary_image_url",
                "quantity",
                "release_year",
                "scale",
                "secondary_image_urls",
                "series",
                "slug",
                "status",
                "updated_at",
                "version",
                "weight"
            ],
            "properties": {
                "accessories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.GundamAccessoryDTO"
                    }
                },
                "condition": {
                    "type": "string"
                },
                "condition_description": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "grade": {
                    "type": "string"
                },
                "gundam_id": {
                    "type": "integer"
                },
                "manufacturer": {
                    "type": "string"
                },
                "material": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner_id": {
                    "type": "string"
                },
                "parts_total": {
                    "type": "integer"
                },
                "price": {
                    "type": "integer"
                },
                "primary_image_url": {
                    "type": "string"
                },
                "quantity": {
                    "type": "integer"
                },
                "release_year": {
                    "type": "integer"
                },
                "scale": {
                    "type": "string"
                },
                "secondary_image_urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "series": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                },
                "weight": {
                    "type": "integer"
                }
            }
        },
        "db.GundamGrade": {
            "type": "object",
            "required": [
                "created_at",
                "display_name",
                "id",
                "name",
                "slug"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            }
        },
        "db.GundamSnapshot": {
            "type": "object",
            "required": [
                "grade",
                "id",
                "image_url",
                "name",
                "quantity",
                "scale",
                "slug",
                "weight"
            ],
            "properties": {
                "grade": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "image_url": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "quantity": {
                    "type": "integer"
                },
                "scale": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "weight": {
                    "type": "integer"
                }
            }
        },
        "db.ListCartItemsWithDetailsRow": {
            "type": "object",
            "required": [
                "cart_item_id",
                "gundam_id",
                "gundam_image_url",
                "gundam_name",
                "gundam_price",
                "seller_avatar_url",
                "seller_id",
                "seller_name"
            ],
            "properties": {
                "cart_item_id": {
                    "type": "string"
                },
                "gundam_id": {
                    "type": "integer"
                },
                "gundam_image_url": {
                    "type": "string"
                },
                "gundam_name": {
                    "type": "string"
                },
                "gundam_price": {
                    "type": "integer"
                },
                "seller_avatar_url": {
                    "type": "string"
                },
                "seller_id": {
                    "type": "string"
                },
                "seller_name": {
                    "type": "string"
                }
            }
        },
        "db.ListUserParticipatedAuctionsRow": {
            "type": "object",
            "required": [
                "auction",
                "auction_participant"
            ],
            "properties": {
                "auction": {
                    "$ref": "#/definitions/db.Auction"
                },
                "auction_participant": {
                    "$ref": "#/definitions/db.AuctionParticipant"
                }
            }
        },
        "db.MemberOrderDetails": {
            "type": "object",
            "required": [
                "from_delivery_information",
                "is_receiver",
                "is_sender",
                "order",
                "order_delivery",
                "order_items",
                "receiver",
                "sender",
                "to_delivery_information"
            ],
            "properties": {
                "from_delivery_information": {
                    "description": "Địa chỉ gửi hàng",
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.DeliveryInformation"
                        }
                    ]
                },
                "is_receiver": {
                    "description": "Có phải người nhận không",
                    "type": "boolean"
                },
                "is_sender": {
                    "description": "Có phải người gửi không",
                    "type": "boolean"
                },
                "order": {
                    "description": "Thông tin đơn hàng",
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.Order"
                        }
                    ]
                },
                "order_delivery": {
                    "description": "Thông tin vận chuyển",
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.OrderDelivery"
                        }
                    ]
                },
                "order_items": {
                    "description": "Danh sách sản phẩm trong đơn hàng",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.OrderItem"
                    }
                },
                "receiver": {
                    "description": "Thông tin người nhận hàng (null nếu là người nhận)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.User"
                        }
                    ]
                },
                "sender": {
                    "description": "Thông tin người gửi hàng (null nếu là người gửi)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.Sender"
                        }
                    ]
                },
                "to_delivery_information": {
                    "description": "Địa chỉ nhận hàng",
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.DeliveryInformation"
                        }
                    ]
                }
            }
        },
        "db.MemberOrderInfo": {
            "type": "object",
            "required": [
                "order",
                "order_items"
            ],
            "properties": {
                "order": {
                    "$ref": "#/definitions/db.Order"
                },
                "order_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.OrderItem"
                    }
                }
            }
        },
        "db.NullDeliveryOverralStatus": {
            "type": "object",
            "required": [
                "delivery_overral_status",
                "valid"
            ],
            "properties": {
                "delivery_overral_status": {
                    "$ref": "#/definitions/db.DeliveryOverralStatus"
                },
                "valid": {
                    "description": "Valid is true if DeliveryOverralStatus is not NULL",
                    "type": "boolean"
                }
            }
        },
        "db.OpenExchangePostInfo": {
            "type": "object",
            "required": [
                "exchange_post",
                "exchange_post_items",
                "offer_count",
                "poster"
            ],
            "properties": {
                "exchange_post": {
                    "description": "Thông tin bài đăng",
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.ExchangePost"
                        }
                    ]
                },
                "exchange_post_items": {
                    "description": "Danh sách Gundam mà Người đăng bài cho phép trao đổi",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.GundamDetails"
                    }
                },
                "offer_count": {
                    "description": "Số lượng offer của bài đăng",
                    "type": "integer"
                },
                "poster": {
                    "description": "Thông tin Người đăng bài",
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.User"
                        }
                    ]
                }
            }
        },
        "db.Order": {
            "type": "object",
            "required": [
                "buyer_id",
                "canceled_by",
                "canceled_reason",
                "code",
                "completed_at",
                "created_at",
                "delivery_fee",
                "id",
                "is_packaged",
                "items_subtotal",
                "note",
                "packaging_image_urls",
                "payment_method",
                "seller_id",
                "status",
                "total_amount",
                "type",
                "updated_at"
            ],
            "properties": {
                "buyer_id": {
                    "type": "string"
                },
                "canceled_by": {
                    "type": "string"
                },
                "canceled_reason": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "completed_at": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "delivery_fee": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "is_packaged": {
                    "type": "boolean"
                },
                "items_subtotal": {
                    "type": "integer"
                },
                "note": {
                    "type": "string"
                },
                "packaging_image_urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "payment_method": {
                    "$ref": "#/definitions/db.PaymentMethod"
                },
                "seller_id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/db.OrderStatus"
                },
                "total_amount": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/db.OrderType"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "db.OrderDelivery": {
            "type": "object",
            "required": [
                "created_at",
                "delivery_tracking_code",
                "expected_delivery_time",
                "from_delivery_id",
                "id",
                "order_id",
                "overall_status",
                "status",
                "to_delivery_id",
                "updated_at"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "delivery_tracking_code": {
                    "type": "string"
                },
                "expected_delivery_time": {
                    "type": "string"
                },
                "from_delivery_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "order_id": {
                    "type": "string"
                },
                "overall_status": {
                    "$ref": "#/definitions/db.NullDeliveryOverralStatus"
                },
                "status": {
                    "type": "string"
                },
                "to_delivery_id": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "db.OrderItem": {
            "type": "object",
            "required": [
                "created_at",
                "grade",
                "gundam_id",
                "id",
                "image_url",
                "name",
                "order_id",
                "price",
                "quantity",
                "scale",
                "slug",
                "weight"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "grade": {
                    "type": "string"
                },
                "gundam_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "image_url": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "order_id": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "quantity": {
                    "type": "integer"
                },
                "scale": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "weight": {
                    "type": "integer"
                }
            }
        },
        "db.OrderStatus": {
            "type": "string",
            "enum": [
                "pending",
                "packaging",
                "delivering",
                "delivered",
                "completed",
                "failed",
                "canceled"
            ],
            "x-enum-varnames": [
                "OrderStatusPending",
                "OrderStatusPackaging",
                "OrderStatusDelivering",
                "OrderStatusDelivered",
                "OrderStatusCompleted",
                "OrderStatusFailed",
                "OrderStatusCanceled"
            ]
        },
        "db.OrderTransaction": {
            "type": "object",
            "required": [
                "amount",
                "buyer_entry_id",
                "completed_at",
                "created_at",
                "id",
                "order_id",
                "seller_entry_id",
                "status",
                "updated_at"
            ],
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "buyer_entry_id": {
                    "type": "integer"
                },
                "completed_at": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "order_id": {
                    "type": "string"
                },
                "seller_entry_id": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/db.OrderTransactionStatus"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "db.OrderTransactionStatus": {
            "type": "string",
            "enum": [
                "pending",
                "completed",
                "refunded",
                "failed"
            ],
            "x-enum-varnames": [
                "OrderTransactionStatusPending",
                "OrderTransactionStatusCompleted",
                "OrderTransactionStatusRefunded",
                "OrderTransactionStatusFailed"
            ]
        },
        "db.OrderType": {
            "type": "string",
            "enum": [
                "regular",
                "exchange",
                "auction"
            ],
            "x-enum-varnames": [
                "OrderTypeRegular",
                "OrderTypeExchange",
                "OrderTypeAuction"
            ]
        },
        "db.PackageOrderTxResult": {
            "type": "object",
            "required": [
                "order",
                "order_delivery"
            ],
            "properties": {
                "order": {
                    "$ref": "#/definitions/db.Order"
                },
                "order_delivery": {
                    "$ref": "#/definitions/db.OrderDelivery"
                }
            }
        },
        "db.ParticipateInAuctionTxResult": {
            "type": "object",
            "required": [
                "auction_participant",
                "participant",
                "updated_auction",
                "updated_wallet"
            ],
            "properties": {
                "auction_participant": {
                    "$ref": "#/definitions/db.AuctionParticipant"
                },
                "participant": {
                    "$ref": "#/definitions/db.User"
                },
                "updated_auction": {
                    "$ref": "#/definitions/db.Auction"
                },
                "updated_wallet": {
                    "$ref": "#/definitions/db.Wallet"
                }
            }
        },
        "db.PayAuctionWinningBidTxResult": {
            "type": "object",
            "required": [
                "auction",
                "order",
                "remaining_amount",
                "wallet_entry"
            ],
            "properties": {
                "auction": {
                    "$ref": "#/definitions/db.Auction"
                },
                "order": {
                    "$ref": "#/definitions/db.Order"
                },
                "remaining_amount": {
                    "type": "integer"
                },
                "wallet_entry": {
                    "$ref": "#/definitions/db.WalletEntry"
                }
            }
        },
        "db.PayExchangeDeliveryFeeTxResult": {
            "type": "object",
            "required": [
                "both_parties_paid",
                "exchange",
                "offerer_order",
                "partner_has_paid",
                "poster_order"
            ],
            "properties": {
                "both_parties_paid": {
                    "type": "boolean"
                },
                "exchange": {
                    "$ref": "#/definitions/db.Exchange"
                },
                "offerer_order": {
                    "$ref": "#/definitions/db.Order"
                },
                "partner_has_paid": {
                    "type": "boolean"
                },
                "poster_order": {
                    "$ref": "#/definitions/db.Order"
                }
            }
        },
        "db.PaymentMethod": {
            "type": "string",
            "enum": [
                "cod",
                "wallet"
            ],
            "x-enum-varnames": [
                "PaymentMethodCod",
                "PaymentMethodWallet"
            ]
        },
        "db.ProvideDeliveryAddressesForExchangeTxResult": {
            "type": "object",
            "required": [
                "exchange"
            ],
            "properties": {
                "exchange": {
                    "$ref": "#/definitions/db.Exchange"
                }
            }
        },
        "db.RequestNegotiationForOfferTxResult": {
            "type": "object",
            "required": [
                "note",
                "offer"
            ],
            "properties": {
                "note": {
                    "description": "Có thể là nil nếu không có ghi chú",
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.ExchangeOfferNote"
                        }
                    ]
                },
                "offer": {
                    "$ref": "#/definitions/db.ExchangeOffer"
                }
            }
        },
        "db.SalesOrderDetails": {
            "type": "object",
            "required": [
                "from_delivery_information",
                "order",
                "order_delivery",
                "order_items",
                "receiver",
                "to_delivery_information"
            ],
            "properties": {
                "from_delivery_information": {
                    "description": "Địa chỉ gửi hàng",
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.DeliveryInformation"
                        }
                    ]
                },
                "order": {
                    "description": "Thông tin đơn hàng",
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.Order"
                        }
                    ]
                },
                "order_delivery": {
                    "description": "Thông tin vận chuyển",
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.OrderDelivery"
                        }
                    ]
                },
                "order_items": {
                    "description": "Danh sách sản phẩm trong đơn hàng",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.OrderItem"
                    }
                },
                "receiver": {
                    "description": "Thông tin người nhận hàng",
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.User"
                        }
                    ]
                },
                "to_delivery_information": {
                    "description": "Địa chỉ nhận hàng",
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.DeliveryInformation"
                        }
                    ]
                }
            }
        },
        "db.SalesOrderInfo": {
            "type": "object",
            "required": [
                "order",
                "order_items"
            ],
            "properties": {
                "order": {
                    "$ref": "#/definitions/db.Order"
                },
                "order_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.OrderItem"
                    }
                }
            }
        },
        "db.SellerProfile": {
            "type": "object",
            "required": [
                "created_at",
                "seller_id",
                "shop_name",
                "updated_at"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "seller_id": {
                    "type": "string"
                },
                "shop_name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "db.Sender": {
            "type": "object",
            "required": [
                "avatar_url",
                "created_at",
                "deleted_at",
                "email",
                "email_verified",
                "full_name",
                "google_account_id",
                "id",
                "phone_number",
                "phone_number_verified",
                "role",
                "shop_name",
                "updated_at"
            ],
            "properties": {
                "avatar_url": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "email_verified": {
                    "type": "boolean"
                },
                "full_name": {
                    "type": "string"
                },
                "google_account_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "phone_number_verified": {
                    "type": "boolean"
                },
                "role": {
                    "$ref": "#/definitions/db.UserRole"
                },
                "shop_name": {
                    "description": "Tên shop (nếu có)",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "db.UpdateExchangeOfferTxResult": {
            "type": "object",
            "required": [
                "note",
                "offer"
            ],
            "properties": {
                "note": {
                    "description": "Có thể là nil nếu không có ghi chú",
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.ExchangeOfferNote"
                        }
                    ]
                },
                "offer": {
                    "$ref": "#/definitions/db.ExchangeOffer"
                }
            }
        },
        "db.User": {
            "type": "object",
            "required": [
                "avatar_url",
                "created_at",
                "deleted_at",
                "email",
                "email_verified",
                "full_name",
                "google_account_id",
                "id",
                "phone_number",
                "phone_number_verified",
                "role",
                "updated_at"
            ],
            "properties": {
                "avatar_url": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "email_verified": {
                    "type": "boolean"
                },
                "full_name": {
                    "type": "string"
                },
                "google_account_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "phone_number_verified": {
                    "type": "boolean"
                },
                "role": {
                    "$ref": "#/definitions/db.UserRole"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "db.UserAddress": {
            "type": "object",
            "required": [
                "created_at",
                "detail",
                "district_name",
                "full_name",
                "ghn_district_id",
                "ghn_ward_code",
                "id",
                "is_pickup_address",
                "is_primary",
                "phone_number",
                "province_name",
                "updated_at",
                "user_id",
                "ward_name"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "detail": {
                    "type": "string"
                },
                "district_name": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "ghn_district_id": {
                    "type": "integer"
                },
                "ghn_ward_code": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_pickup_address": {
                    "type": "boolean"
                },
                "is_primary": {
                    "type": "boolean"
                },
                "phone_number": {
                    "type": "string"
                },
                "province_name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "ward_name": {
                    "type": "string"
                }
            }
        },
        "db.UserExchangeDetails": {
            "type": "object",
            "required": [
                "canceled_by",
                "canceled_reason",
                "compensation_amount",
                "completed_at",
                "created_at",
                "current_user",
                "id",
                "offerer_id",
                "partner",
                "payer_id",
                "poster_id",
                "status",
                "updated_at"
            ],
            "properties": {
                "canceled_by": {
                    "description": "Thông tin hủy (nếu có)",
                    "type": "string"
                },
                "canceled_reason": {
                    "description": "Lý do hủy",
                    "type": "string"
                },
                "compensation_amount": {
                    "description": "Số tiền bù (nếu có)",
                    "type": "integer"
                },
                "completed_at": {
                    "description": "Thời gian hoàn thành",
                    "type": "string"
                },
                "created_at": {
                    "description": "Thời gian tạo",
                    "type": "string"
                },
                "current_user": {
                    "description": "Thông tin về người tham gia",
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.ExchangeUserInfo"
                        }
                    ]
                },
                "id": {
                    "description": "ID của bài đăng trao đổi",
                    "type": "string"
                },
                "offerer_id": {
                    "description": "ID người đề xuất",
                    "type": "string"
                },
                "partner": {
                    "description": "Thông tin người còn lại",
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.ExchangeUserInfo"
                        }
                    ]
                },
                "payer_id": {
                    "description": "Thông tin bù tiền",
                    "type": "string"
                },
                "poster_id": {
                    "description": "Thông tin gốc về cuộc trao đổi (Ai đăng, ai đề xuất)",
                    "type": "string"
                },
                "status": {
                    "description": "Thông tin cơ bản về cuộc trao đổi",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Thời gian cập nhật",
                    "type": "string"
                }
            }
        },
        "db.UserExchangeOfferDetails": {
            "type": "object",
            "required": [
                "exchange_post",
                "exchange_post_items",
                "offer",
                "poster"
            ],
            "properties": {
                "exchange_post": {
                    "description": "Thông tin bài đăng",
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.ExchangePost"
                        }
                    ]
                },
                "exchange_post_items": {
                    "description": "Danh sách Gundam mà Người đăng bài cho phép trao đổi",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.GundamDetails"
                    }
                },
                "offer": {
                    "description": "Chi tiết đề xuất",
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.ExchangeOfferInfo"
                        }
                    ]
                },
                "poster": {
                    "description": "Thông tin Người đăng bài",
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.User"
                        }
                    ]
                }
            }
        },
        "db.UserExchangePostDetails": {
            "type": "object",
            "required": [
                "exchange_post",
                "exchange_post_items",
                "offer_count",
                "offers"
            ],
            "properties": {
                "exchange_post": {
                    "description": "Thông tin bài đăng",
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.ExchangePost"
                        }
                    ]
                },
                "exchange_post_items": {
                    "description": "Danh sách Gundam mà Người đăng bài cho phép trao đổi",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.GundamDetails"
                    }
                },
                "offer_count": {
                    "description": "Số lượng offer của bài đăng",
                    "type": "integer"
                },
                "offers": {
                    "description": "Danh sách các offer của bài đăng",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.ExchangeOfferInfo"
                    }
                }
            }
        },
        "db.UserRole": {
            "type": "string",
            "enum": [
                "member",
                "seller",
                "moderator",
                "admin"
            ],
            "x-enum-varnames": [
                "UserRoleMember",
                "UserRoleSeller",
                "UserRoleModerator",
                "UserRoleAdmin"
            ]
        },
        "db.Wallet": {
            "type": "object",
            "required": [
                "balance",
                "created_at",
                "currency",
                "non_withdrawable_amount",
                "updated_at",
                "user_id"
            ],
            "properties": {
                "balance": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "non_withdrawable_amount": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "db.WalletAffectedField": {
            "type": "string",
            "enum": [
                "balance",
                "non_withdrawable_amount",
                "both"
            ],
            "x-enum-varnames": [
                "WalletAffectedFieldBalance",
                "WalletAffectedFieldNonWithdrawableAmount",
                "WalletAffectedFieldBoth"
            ]
        },
        "db.WalletEntry": {
            "type": "object",
            "required": [
                "affected_field",
                "amount",
                "completed_at",
                "created_at",
                "entry_type",
                "id",
                "reference_id",
                "reference_type",
                "status",
                "updated_at",
                "wallet_id"
            ],
            "properties": {
                "affected_field": {
                    "$ref": "#/definitions/db.WalletAffectedField"
                },
                "amount": {
                    "type": "integer"
                },
                "completed_at": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "entry_type": {
                    "$ref": "#/definitions/db.WalletEntryType"
                },
                "id": {
                    "type": "integer"
                },
                "reference_id": {
                    "type": "string"
                },
                "reference_type": {
                    "$ref": "#/definitions/db.WalletReferenceType"
                },
                "status": {
                    "$ref": "#/definitions/db.WalletEntryStatus"
                },
                "updated_at": {
                    "type": "string"
                },
                "wallet_id": {
                    "type": "string"
                }
            }
        },
        "db.WalletEntryStatus": {
            "type": "string",
            "enum": [
                "pending",
                "completed",
                "canceled",
                "failed"
            ],
            "x-enum-varnames": [
                "WalletEntryStatusPending",
                "WalletEntryStatusCompleted",
                "WalletEntryStatusCanceled",
                "WalletEntryStatusFailed"
            ]
        },
        "db.WalletEntryType": {
            "type": "string",
            "enum": [
                "deposit",
                "withdrawal",
                "payment",
                "payment_received",
                "refund",
                "hold_funds",
                "release_funds",
                "exchange_compensation_hold",
                "exchange_compensation_transfer",
                "exchange_compensation_release",
                "auction_deposit",
                "auction_deposit_refund",
                "auction_compensation",
                "auction_winner_payment",
                "auction_seller_payment"
            ],
            "x-enum-varnames": [
                "WalletEntryTypeDeposit",
                "WalletEntryTypeWithdrawal",
                "WalletEntryTypePayment",
                "WalletEntryTypePaymentReceived",
                "WalletEntryTypeRefund",
                "WalletEntryTypeHoldFunds",
                "WalletEntryTypeReleaseFunds",
                "WalletEntryTypeExchangeCompensationHold",
                "WalletEntryTypeExchangeCompensationTransfer",
                "WalletEntryTypeExchangeCompensationRelease",
                "WalletEntryTypeAuctionDeposit",
                "WalletEntryTypeAuctionDepositRefund",
                "WalletEntryTypeAuctionCompensation",
                "WalletEntryTypeAuctionWinnerPayment",
                "WalletEntryTypeAuctionSellerPayment"
            ]
        },
        "db.WalletReferenceType": {
            "type": "string",
            "enum": [
                "order",
                "auction",
                "withdrawal_request",
                "deposit_request",
                "exchange"
            ],
            "x-enum-varnames": [
                "WalletReferenceTypeOrder",
                "WalletReferenceTypeAuction",
                "WalletReferenceTypeWithdrawalRequest",
                "WalletReferenceTypeDepositRequest",
                "WalletReferenceTypeExchange"
            ]
        },
        "multipart.FileHeader": {
            "type": "object",
            "properties": {
                "filename": {
                    "type": "string"
                },
                "header": {
                    "$ref": "#/definitions/textproto.MIMEHeader"
                },
                "size": {
                    "type": "integer"
                }
            }
        },
        "textproto.MIMEHeader": {
            "type": "object",
            "additionalProperties": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            }
        },
        "zalopay.CreateOrderZalopayResponse": {
            "type": "object",
            "required": [
                "order_token",
                "order_url",
                "qr_code",
                "return_code",
                "return_message",
                "sub_return_code",
                "sub_return_message",
                "zp_trans_token"
            ],
            "properties": {
                "order_token": {
                    "type": "string"
                },
                "order_url": {
                    "type": "string"
                },
                "qr_code": {
                    "type": "string"
                },
                "return_code": {
                    "type": "integer"
                },
                "return_message": {
                    "type": "string"
                },
                "sub_return_code": {
                    "type": "integer"
                },
                "sub_return_message": {
                    "type": "string"
                },
                "zp_trans_token": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "accessToken": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}