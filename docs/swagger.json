{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "API documentation for Gundam Platform application",
        "title": "Gundam Platform API",
        "contact": {},
        "version": "1.0.0"
    },
    "host": "localhost:8080",
    "basePath": "/v1",
    "paths": {
        "/auth/google-login": {
            "post": {
                "description": "Authenticate a user using Google ID token. If the user doesn't exist, a new user will be created.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Login or register a user with Google account",
                "parameters": [
                    {
                        "description": "Google ID Token",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.loginUserWithGoogleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully logged in",
                        "schema": {
                            "$ref": "#/definitions/api.loginUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body"
                    },
                    "401": {
                        "description": "Invalid Google ID token"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticate a user and return access token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.loginUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.loginUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters"
                    },
                    "401": {
                        "description": "Incorrect password"
                    },
                    "404": {
                        "description": "Email not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/cart/items": {
            "get": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Retrieves all items in the user's shopping cart with detailed information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cart"
                ],
                "summary": "List Cart Items",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved cart items",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.ListCartItemsWithDetailsRow"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input"
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to retrieve cart items"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Adds a Gundam model to the user's shopping cart",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cart"
                ],
                "summary": "Add Item to Cart",
                "parameters": [
                    {
                        "description": "Gundam to add to cart",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.addCartItemRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully added item to cart",
                        "schema": {
                            "$ref": "#/definitions/db.AddCartItemRow"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input"
                    },
                    "401": {
                        "description": "Unauthorized - Authentication required"
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to add cart item"
                    }
                }
            }
        },
        "/cart/items/{id}": {
            "delete": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Removes a specific item from the user's shopping cart",
                "tags": [
                    "cart"
                ],
                "summary": "Delete Cart Item",
                "parameters": [
                    {
                        "type": "string",
                        "example": "1",
                        "description": "Cart Item ID to delete",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted cart item"
                    },
                    "400": {
                        "description": "Bad Request - Invalid cart item ID"
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to delete cart item"
                    }
                }
            }
        },
        "/check-email": {
            "get": {
                "description": "Checks if an email already exists in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Check Email Exists",
                "parameters": [
                    {
                        "description": "Check email request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.checkEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "boolean"
                            }
                        }
                    }
                }
            }
        },
        "/grades": {
            "get": {
                "description": "Retrieves a list of all available Gundam model grades",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gundams"
                ],
                "summary": "List Gundam Grades",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of Gundam grades",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.GundamGrade"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to retrieve Gundam grades"
                    }
                }
            }
        },
        "/gundams": {
            "get": {
                "description": "Retrieves a list of selling Gundams, optionally filtered by grade",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gundams"
                ],
                "summary": "List Gundams",
                "parameters": [
                    {
                        "type": "string",
                        "example": "master-grade",
                        "description": "Filter by Gundam grade slug",
                        "name": "grade",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "in store",
                            "published",
                            "processing",
                            "pending auction approval",
                            "auctioning"
                        ],
                        "type": "string",
                        "description": "Filter by Gundam status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of Gundams",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.ListGundamsWithFiltersRow"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid query parameters"
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to retrieve Gundams"
                    }
                }
            }
        },
        "/gundams/{slug}": {
            "get": {
                "description": "Retrieves a specific Gundam model by its unique slug",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gundams"
                ],
                "summary": "Get Gundam by Slug",
                "parameters": [
                    {
                        "type": "string",
                        "example": "rx-78-2-gundam",
                        "description": "Gundam model slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "in store",
                            "published",
                            "processing",
                            "pending auction approval",
                            "auctioning"
                        ],
                        "type": "string",
                        "description": "Filter by Gundam status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved Gundam details",
                        "schema": {
                            "$ref": "#/definitions/api.getGundamBySlugResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Gundam with specified slug does not exist"
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to retrieve Gundam"
                    }
                }
            }
        },
        "/orders": {
            "get": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "List all purchase orders of the normal user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "List all purchase orders of the normal user",
                "responses": {
                    "200": {
                        "description": "List of orders",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.Order"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Create a new order for purchasing Gundam models",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Create a new order",
                "parameters": [
                    {
                        "description": "Order details",
                        "name": "createOrderRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.createOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Order created successfully",
                        "schema": {
                            "$ref": "#/definitions/db.CreateOrderTxResult"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "422": {
                        "description": "Invalid items or price mismatch",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        },
        "/otp/email/generate": {
            "post": {
                "description": "Generates and sends an OTP to the specified email address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Generate a One-Time Password (OTP) for email",
                "parameters": [
                    {
                        "description": "OTP Generation Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.GenerateEmailOTPRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP generated successfully",
                        "schema": {
                            "$ref": "#/definitions/api.GenerateEmailOTPResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input"
                    },
                    "429": {
                        "description": "Too Many Requests - OTP request rate limit exceeded"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/otp/email/verify": {
            "post": {
                "description": "Verifies the OTP sent to a user's email address and updates the user's email if valid",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Verify One-Time Password (OTP) via email",
                "parameters": [
                    {
                        "description": "OTP Verification Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.VerifyEmailOTPRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP verified successfully"
                    },
                    "400": {
                        "description": "Bad Request - Invalid input or OTP verification failed"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid OTP code"
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to update user information"
                    }
                }
            }
        },
        "/otp/phone_number/generate": {
            "post": {
                "description": "Generates and sends an OTP to the specified phone number. The OTP will be valid for 10 minutes.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Generate a One-Time Password (OTP) for phone number",
                "parameters": [
                    {
                        "description": "OTP Generation Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.GeneratePhoneOTPRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP generated successfully",
                        "schema": {
                            "$ref": "#/definitions/api.GeneratePhoneOTPResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid phone number format"
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to generate or send OTP"
                    }
                }
            }
        },
        "/otp/phone_number/verify": {
            "post": {
                "description": "Verifies the OTP sent to a user's phone number and updates the user's phone number if valid",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Verify One-Time Password (OTP) via phone number",
                "parameters": [
                    {
                        "description": "OTP Verification Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.VerifyPhoneOTPRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP verified successfully"
                    },
                    "400": {
                        "description": "Bad Request - Invalid input or OTP verification failed"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid OTP code"
                    },
                    "404": {
                        "description": "Not Found - User not found"
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to update user information"
                    }
                }
            }
        },
        "/sellers/:sellerID/gundams": {
            "get": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Get all gundams that belong to the specified seller ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sellers"
                ],
                "summary": "List all gundams for a specific seller",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID",
                        "name": "sellerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Gundam name to filter by",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of gundams"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Create a new Gundam model with images and accessories",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sellers"
                ],
                "summary": "Create a new Gundam model",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "sellerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Gundam name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Gundam grade ID",
                        "name": "grade_id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "enum": [
                            "new",
                            "open box",
                            "second hand"
                        ],
                        "type": "string",
                        "description": "Condition of the Gundam",
                        "name": "condition",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Manufacturer name",
                        "name": "manufacturer",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "enum": [
                            "1/144",
                            "1/100",
                            "1/60"
                        ],
                        "type": "string",
                        "description": "Gundam scale",
                        "name": "scale",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Weight in grams",
                        "name": "weight",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Detailed description",
                        "name": "description",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Price in VND",
                        "name": "price",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Primary image of the Gundam",
                        "name": "primary_image",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Secondary images of the Gundam",
                        "name": "secondary_images",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Additional details about condition",
                        "name": "condition_description",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Accessory as JSON object. Add multiple accessories by repeating this field with different values.",
                        "name": "accessory",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: Gundam created successfully"
                    },
                    "400": {
                        "description": "error details"
                    },
                    "500": {
                        "description": "internal server error"
                    }
                }
            }
        },
        "/sellers/:sellerID/orders": {
            "get": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Get all sale orders that belong to the specified seller ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sellers"
                ],
                "summary": "List all sale orders for a specific seller",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID",
                        "name": "sellerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of orders"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/sellers/:sellerID/orders/:orderID/confirm": {
            "patch": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Confirm an order for the specified seller. This endpoint checks the order's status before proceeding.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sellers"
                ],
                "summary": "Confirm an order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID",
                        "name": "sellerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "orderID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully confirmed order",
                        "schema": {
                            "$ref": "#/definitions/db.ConfirmOrderTxResult"
                        }
                    },
                    "400": {
                        "description": "Invalid order ID or seller ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Order does not belong to this seller",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "Order is not in pending status",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/sellers/:sellerID/subscriptions/active": {
            "get": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Get the current active subscription for the specified seller",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sellers"
                ],
                "summary": "Get current active subscription",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID",
                        "name": "sellerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved current active subscription"
                    },
                    "404": {
                        "description": "Subscription not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/sellers/{id}": {
            "get": {
                "description": "Get detailed information about a specific seller",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sellers"
                ],
                "summary": "Retrieve a seller by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID",
                        "name": "sellerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved seller",
                        "schema": {
                            "$ref": "#/definitions/db.User"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/sellers/{sellerID}/gundams/{gundamID}/publish": {
            "patch": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Publish a gundam for sale for the specified seller. This endpoint checks the gundam's status before proceeding.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sellers"
                ],
                "summary": "Publish a gundam for sale",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Gundam ID",
                        "name": "gundamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Seller ID",
                        "name": "sellerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully published gundam",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid gundam ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Seller does not own this gundam",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "Subscription limit exceeded\u003cbr/\u003eSubscription expired\u003cbr/\u003eGundam is not available for publishing",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/sellers/{sellerID}/gundams/{gundamID}/unpublish": {
            "patch": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Unpublish a gundam for the specified seller. This endpoint checks the gundam's status before proceeding.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sellers"
                ],
                "summary": "Unpublish a gundam",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Gundam ID",
                        "name": "gundamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Seller ID",
                        "name": "sellerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully unsold gundam with details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid gundam ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Seller does not own this gundam",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "Gundam is not currently listed for sale",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/tokens/verify": {
            "post": {
                "description": "Verifies a JWT access token and returns the associated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Verify access token",
                "parameters": [
                    {
                        "description": "Token verification request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.verifyAccessTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User information",
                        "schema": {
                            "$ref": "#/definitions/db.User"
                        }
                    },
                    "400": {
                        "description": "Invalid request format"
                    },
                    "401": {
                        "description": "Invalid or expired token"
                    }
                }
            }
        },
        "/users": {
            "post": {
                "description": "Create a new user with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.createUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created user",
                        "schema": {
                            "$ref": "#/definitions/db.User"
                        }
                    },
                    "400": {
                        "description": "Invalid request body"
                    },
                    "409": {
                        "description": "Email already exists"
                    },
                    "422": {
                        "description": "Validation error"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/users/:id/wallet/": {
            "get": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Get user wallet information details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet"
                ],
                "summary": "Get user wallet information details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User wallet information",
                        "schema": {
                            "$ref": "#/definitions/db.Wallet"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/users/become-seller": {
            "post": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Upgrade the user's role to seller and create the trial subscription",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Become a seller",
                "responses": {
                    "200": {
                        "description": "Successfully became seller",
                        "schema": {
                            "$ref": "#/definitions/db.User"
                        }
                    },
                    "409": {
                        "description": "User is already a seller"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/users/by-phone_number": {
            "get": {
                "description": "Get user details using a phone_number number as a query parameter",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Retrieve a user by phone_number number",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Phone Number",
                        "name": "phone_number",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user",
                        "schema": {
                            "$ref": "#/definitions/db.User"
                        }
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Get detailed information about a specific user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Retrieve a user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user",
                        "schema": {
                            "$ref": "#/definitions/db.User"
                        }
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "put": {
                "description": "Update specific user details by user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update a user's information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.updateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated user",
                        "schema": {
                            "$ref": "#/definitions/db.User"
                        }
                    },
                    "400": {
                        "description": "Invalid request body"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/users/{id}/addresses": {
            "get": {
                "description": "Get all addresses for a specific user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Retrieve user addresses",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user addresses",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.UserAddress"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "description": "Add a new address for a specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Address creation request",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/api.createUserAddressRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Address created successfully",
                        "schema": {
                            "$ref": "#/definitions/db.UserAddress"
                        }
                    },
                    "400": {
                        "description": "Invalid request body"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/users/{id}/addresses/pickup": {
            "get": {
                "description": "Get the pickup address of a specific user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user pickup address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user pickup address",
                        "schema": {
                            "$ref": "#/definitions/db.UserAddress"
                        }
                    },
                    "404": {
                        "description": "Pickup address not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/users/{id}/addresses/{address_id}": {
            "put": {
                "description": "Update an existing address information for a specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Address ID",
                        "name": "address_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Address information to update",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.updateUserAddressRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Address updated successfully",
                        "schema": {
                            "$ref": "#/definitions/db.UserAddress"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters"
                    },
                    "404": {
                        "description": "Address not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "delete": {
                "description": "Delete an address of a user",
                "tags": [
                    "users"
                ],
                "summary": "Delete user address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Address ID",
                        "name": "address_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Address deleted successfully"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "404": {
                        "description": "Address not found"
                    },
                    "409": {
                        "description": "Cannot delete primary or pickup address"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/users/{id}/avatar": {
            "patch": {
                "description": "Upload and update a user's profile avatar",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user avatar",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Avatar image file",
                        "name": "avatar",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated avatar",
                        "schema": {
                            "$ref": "#/definitions/api.updateAvatarResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/wallet/zalopay/create": {
            "post": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Create a ZaloPay order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "wallet"
                ],
                "summary": "Create a ZaloPay order",
                "parameters": [
                    {
                        "description": "Create ZaloPay order request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.createZalopayOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Create ZaloPay order response",
                        "schema": {
                            "$ref": "#/definitions/zalopay.CreateOrderZalopayResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        }
    },
    "definitions": {
        "api.GenerateEmailOTPRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "api.GenerateEmailOTPResponse": {
            "type": "object",
            "required": [
                "created_at",
                "email",
                "expires_at",
                "otp_code"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "string"
                },
                "otp_code": {
                    "type": "string"
                }
            }
        },
        "api.GeneratePhoneOTPRequest": {
            "type": "object",
            "required": [
                "phone_number"
            ],
            "properties": {
                "phone_number": {
                    "description": "Số điện thoại cần gửi OTP",
                    "type": "string"
                }
            }
        },
        "api.GeneratePhoneOTPResponse": {
            "type": "object",
            "required": [
                "created_at",
                "expires_at",
                "otp_code",
                "phone_number"
            ],
            "properties": {
                "created_at": {
                    "description": "Thời điểm OTP được tạo",
                    "type": "string"
                },
                "expires_at": {
                    "description": "Thời điểm OTP hết hạn",
                    "type": "string"
                },
                "otp_code": {
                    "description": "Mã OTP được tạo",
                    "type": "string"
                },
                "phone_number": {
                    "description": "Số điện thoại đã gửi OTP",
                    "type": "string"
                }
            }
        },
        "api.VerifyEmailOTPRequest": {
            "type": "object",
            "required": [
                "email",
                "otp_code"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "otp_code": {
                    "type": "string"
                }
            }
        },
        "api.VerifyPhoneOTPRequest": {
            "type": "object",
            "required": [
                "otp_code",
                "phone_number",
                "user_id"
            ],
            "properties": {
                "otp_code": {
                    "description": "Mã OTP",
                    "type": "string"
                },
                "phone_number": {
                    "description": "Số điện thoại mới",
                    "type": "string"
                },
                "user_id": {
                    "description": "ID của user cần cập nhật số điện thoại",
                    "type": "string"
                }
            }
        },
        "api.addCartItemRequest": {
            "type": "object",
            "required": [
                "gundam_id"
            ],
            "properties": {
                "gundam_id": {
                    "type": "integer"
                }
            }
        },
        "api.checkEmailRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "api.createOrderRequest": {
            "type": "object",
            "required": [
                "buyer_address_id",
                "delivery_fee",
                "expected_delivery_time",
                "gundam_ids",
                "items_subtotal",
                "note",
                "payment_method",
                "seller_id",
                "total_amount"
            ],
            "properties": {
                "buyer_address_id": {
                    "description": "ID of the buyer's address\nexample: 42",
                    "type": "integer"
                },
                "delivery_fee": {
                    "description": "Delivery fee (VND)\nminimum: 0\nexample: 30000",
                    "type": "integer",
                    "minimum": 0
                },
                "expected_delivery_time": {
                    "description": "Expected delivery time\nexample: 2025-04-05T10:00:00Z",
                    "type": "string"
                },
                "gundam_ids": {
                    "description": "List of Gundam IDs in the order\nexample: [1, 2, 3]",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "items_subtotal": {
                    "description": "Total value of all items (excluding delivery fee)\nminimum: 0\nexample: 500000",
                    "type": "integer",
                    "minimum": 0
                },
                "note": {
                    "description": "Optional note for the order\nmaxLength: 255\nexample: Please deliver in the morning",
                    "type": "string",
                    "maxLength": 255
                },
                "payment_method": {
                    "description": "Payment method (wallet: pay via platform wallet, cod: cash on delivery)\nenums: wallet,cod\nexample: wallet",
                    "type": "string",
                    "enum": [
                        "wallet",
                        "cod"
                    ]
                },
                "seller_id": {
                    "description": "ID of the seller\nexample: user123",
                    "type": "string"
                },
                "total_amount": {
                    "description": "Total order amount (including delivery fee)\nminimum: 0\nexample: 530000",
                    "type": "integer",
                    "minimum": 0
                }
            }
        },
        "api.createUserAddressRequest": {
            "type": "object",
            "required": [
                "detail",
                "district_name",
                "full_name",
                "ghn_district_id",
                "ghn_ward_code",
                "is_pickup_address",
                "is_primary",
                "phone_number",
                "province_name",
                "ward_name"
            ],
            "properties": {
                "detail": {
                    "type": "string"
                },
                "district_name": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "ghn_district_id": {
                    "type": "integer"
                },
                "ghn_ward_code": {
                    "type": "string"
                },
                "is_pickup_address": {
                    "type": "boolean"
                },
                "is_primary": {
                    "type": "boolean"
                },
                "phone_number": {
                    "type": "string"
                },
                "province_name": {
                    "type": "string"
                },
                "ward_name": {
                    "type": "string"
                }
            }
        },
        "api.createUserRequest": {
            "type": "object",
            "required": [
                "email",
                "full_name",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "api.createZalopayOrderRequest": {
            "type": "object",
            "required": [
                "amount",
                "description",
                "redirect_url"
            ],
            "properties": {
                "amount": {
                    "type": "integer",
                    "minimum": 1000
                },
                "description": {
                    "type": "string",
                    "maxLength": 256
                },
                "redirect_url": {
                    "type": "string"
                }
            }
        },
        "api.getGundamBySlugResponse": {
            "type": "object",
            "required": [
                "accessories",
                "condition",
                "created_at",
                "description",
                "grade",
                "id",
                "image_urls",
                "manufacturer",
                "name",
                "owner_id",
                "price",
                "scale",
                "slug",
                "status",
                "updated_at",
                "weight"
            ],
            "properties": {
                "accessories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.GundamAccessory"
                    }
                },
                "condition": {
                    "$ref": "#/definitions/db.GundamCondition"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "grade": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "image_urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "manufacturer": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner_id": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "scale": {
                    "$ref": "#/definitions/db.GundamScale"
                },
                "slug": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/db.GundamStatus"
                },
                "updated_at": {
                    "type": "string"
                },
                "weight": {
                    "type": "integer"
                }
            }
        },
        "api.loginUserRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "api.loginUserResponse": {
            "type": "object",
            "required": [
                "access_token",
                "access_token_expires_at",
                "user"
            ],
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "access_token_expires_at": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/db.User"
                }
            }
        },
        "api.loginUserWithGoogleRequest": {
            "type": "object",
            "required": [
                "id_token"
            ],
            "properties": {
                "id_token": {
                    "type": "string"
                }
            }
        },
        "api.updateAvatarResponse": {
            "type": "object",
            "required": [
                "avatar_url"
            ],
            "properties": {
                "avatar_url": {
                    "type": "string"
                }
            }
        },
        "api.updateUserAddressRequest": {
            "type": "object",
            "required": [
                "detail",
                "district_name",
                "full_name",
                "ghn_district_id",
                "ghn_ward_code",
                "is_pickup_address",
                "is_primary",
                "phone_number",
                "province_name",
                "ward_name"
            ],
            "properties": {
                "detail": {
                    "type": "string"
                },
                "district_name": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "ghn_district_id": {
                    "type": "integer"
                },
                "ghn_ward_code": {
                    "type": "string"
                },
                "is_pickup_address": {
                    "type": "boolean"
                },
                "is_primary": {
                    "type": "boolean"
                },
                "phone_number": {
                    "type": "string"
                },
                "province_name": {
                    "type": "string"
                },
                "ward_name": {
                    "type": "string"
                }
            }
        },
        "api.updateUserRequest": {
            "type": "object",
            "required": [
                "full_name"
            ],
            "properties": {
                "full_name": {
                    "type": "string"
                }
            }
        },
        "api.verifyAccessTokenRequest": {
            "type": "object",
            "required": [
                "access_token"
            ],
            "properties": {
                "access_token": {
                    "type": "string"
                }
            }
        },
        "db.AddCartItemRow": {
            "type": "object",
            "required": [
                "cart_item_id",
                "gundam_id",
                "gundam_image_url",
                "gundam_name",
                "gundam_price",
                "seller_avatar_url",
                "seller_id",
                "seller_name"
            ],
            "properties": {
                "cart_item_id": {
                    "type": "string"
                },
                "gundam_id": {
                    "type": "integer"
                },
                "gundam_image_url": {
                    "type": "string"
                },
                "gundam_name": {
                    "type": "string"
                },
                "gundam_price": {
                    "type": "integer"
                },
                "seller_avatar_url": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/pgtype.Text"
                        }
                    ],
                    "x-nullable": true
                },
                "seller_id": {
                    "type": "string"
                },
                "seller_name": {
                    "type": "string",
                    "x-nullable": true
                }
            }
        },
        "db.ConfirmOrderTxResult": {
            "type": "object",
            "required": [
                "order",
                "order_delivery",
                "order_items",
                "order_transaction",
                "seller_entry"
            ],
            "properties": {
                "order": {
                    "description": "Đơn hàng đã được cập nhật",
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.Order"
                        }
                    ]
                },
                "order_delivery": {
                    "description": "Thông tin giao hàng đã được cập nhật với mã GHN",
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.OrderDelivery"
                        }
                    ]
                },
                "order_items": {
                    "description": "Các mặt hàng trong đơn hàng",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.OrderItem"
                    }
                },
                "order_transaction": {
                    "description": "Giao dịch đơn hàng đã được cập nhật với seller_entry_id",
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.OrderTransaction"
                        }
                    ]
                },
                "seller_entry": {
                    "description": "Bút toán cộng tiền cho người bán (pending)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.WalletEntry"
                        }
                    ]
                }
            }
        },
        "db.CreateOrderTxResult": {
            "type": "object",
            "required": [
                "buyer_entry",
                "order",
                "order_delivery",
                "order_items",
                "order_transaction"
            ],
            "properties": {
                "buyer_entry": {
                    "$ref": "#/definitions/db.WalletEntry"
                },
                "order": {
                    "$ref": "#/definitions/db.Order"
                },
                "order_delivery": {
                    "$ref": "#/definitions/db.OrderDelivery"
                },
                "order_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.OrderItem"
                    }
                },
                "order_transaction": {
                    "$ref": "#/definitions/db.OrderTransaction"
                }
            }
        },
        "db.DeliveryOverralStatus": {
            "type": "string",
            "enum": [
                "picking",
                "delivering",
                "delivered",
                "failed",
                "return"
            ],
            "x-enum-varnames": [
                "DeliveryOverralStatusPicking",
                "DeliveryOverralStatusDelivering",
                "DeliveryOverralStatusDelivered",
                "DeliveryOverralStatusFailed",
                "DeliveryOverralStatusReturn"
            ]
        },
        "db.GundamAccessory": {
            "type": "object",
            "required": [
                "created_at",
                "gundam_id",
                "id",
                "name",
                "quantity"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "gundam_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "quantity": {
                    "type": "integer"
                }
            }
        },
        "db.GundamCondition": {
            "type": "string",
            "enum": [
                "new",
                "open box",
                "used"
            ],
            "x-enum-varnames": [
                "GundamConditionNew",
                "GundamConditionOpenbox",
                "GundamConditionUsed"
            ]
        },
        "db.GundamGrade": {
            "type": "object",
            "required": [
                "created_at",
                "display_name",
                "id",
                "name",
                "slug"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            }
        },
        "db.GundamScale": {
            "type": "string",
            "enum": [
                "1/144",
                "1/100",
                "1/60",
                "1/48"
            ],
            "x-enum-varnames": [
                "GundamScale1144",
                "GundamScale1100",
                "GundamScale160",
                "GundamScale148"
            ]
        },
        "db.GundamStatus": {
            "type": "string",
            "enum": [
                "in store",
                "published",
                "processing",
                "pending auction approval",
                "auctioning"
            ],
            "x-enum-varnames": [
                "GundamStatusInstore",
                "GundamStatusPublished",
                "GundamStatusProcessing",
                "GundamStatusPendingauctionapproval",
                "GundamStatusAuctioning"
            ]
        },
        "db.ListCartItemsWithDetailsRow": {
            "type": "object",
            "required": [
                "cart_item_id",
                "gundam_id",
                "gundam_image_url",
                "gundam_name",
                "gundam_price",
                "seller_avatar_url",
                "seller_id",
                "seller_name"
            ],
            "properties": {
                "cart_item_id": {
                    "type": "string"
                },
                "gundam_id": {
                    "type": "integer"
                },
                "gundam_image_url": {
                    "type": "string"
                },
                "gundam_name": {
                    "type": "string"
                },
                "gundam_price": {
                    "type": "integer"
                },
                "seller_avatar_url": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/pgtype.Text"
                        }
                    ],
                    "x-nullable": true
                },
                "seller_id": {
                    "type": "string"
                },
                "seller_name": {
                    "type": "string",
                    "x-nullable": true
                }
            }
        },
        "db.ListGundamsWithFiltersRow": {
            "type": "object",
            "required": [
                "condition",
                "condition_description",
                "created_at",
                "description",
                "grade",
                "id",
                "image_urls",
                "manufacturer",
                "name",
                "owner_id",
                "price",
                "scale",
                "slug",
                "status",
                "updated_at"
            ],
            "properties": {
                "condition": {
                    "$ref": "#/definitions/db.GundamCondition"
                },
                "condition_description": {
                    "$ref": "#/definitions/pgtype.Text"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "grade": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "image_urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "manufacturer": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner_id": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "scale": {
                    "$ref": "#/definitions/db.GundamScale"
                },
                "slug": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/db.GundamStatus"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "db.NullDeliveryOverralStatus": {
            "type": "object",
            "required": [
                "delivery_overral_status",
                "valid"
            ],
            "properties": {
                "delivery_overral_status": {
                    "$ref": "#/definitions/db.DeliveryOverralStatus"
                },
                "valid": {
                    "description": "Valid is true if DeliveryOverralStatus is not NULL",
                    "type": "boolean"
                }
            }
        },
        "db.Order": {
            "type": "object",
            "required": [
                "buyer_id",
                "code",
                "created_at",
                "delivery_fee",
                "id",
                "items_subtotal",
                "note",
                "payment_method",
                "seller_id",
                "status",
                "total_amount",
                "updated_at"
            ],
            "properties": {
                "buyer_id": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "delivery_fee": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "items_subtotal": {
                    "type": "integer"
                },
                "note": {
                    "$ref": "#/definitions/pgtype.Text"
                },
                "payment_method": {
                    "$ref": "#/definitions/db.PaymentMethod"
                },
                "seller_id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/db.OrderStatus"
                },
                "total_amount": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "db.OrderDelivery": {
            "type": "object",
            "required": [
                "created_at",
                "expected_delivery_time",
                "from_delivery_id",
                "ghn_order_code",
                "id",
                "order_id",
                "overall_status",
                "status",
                "to_delivery_id",
                "updated_at"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "expected_delivery_time": {
                    "type": "string"
                },
                "from_delivery_id": {
                    "type": "integer"
                },
                "ghn_order_code": {
                    "$ref": "#/definitions/pgtype.Text"
                },
                "id": {
                    "type": "integer"
                },
                "order_id": {
                    "type": "string"
                },
                "overall_status": {
                    "$ref": "#/definitions/db.NullDeliveryOverralStatus"
                },
                "status": {
                    "$ref": "#/definitions/pgtype.Text"
                },
                "to_delivery_id": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "db.OrderItem": {
            "type": "object",
            "required": [
                "created_at",
                "gundam_id",
                "id",
                "order_id",
                "price",
                "quantity",
                "weight"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "gundam_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "order_id": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "quantity": {
                    "type": "integer"
                },
                "weight": {
                    "type": "integer"
                }
            }
        },
        "db.OrderStatus": {
            "type": "string",
            "enum": [
                "pending",
                "packaging",
                "delivering",
                "delivered",
                "successful",
                "failed",
                "canceled"
            ],
            "x-enum-varnames": [
                "OrderStatusPending",
                "OrderStatusPackaging",
                "OrderStatusDelivering",
                "OrderStatusDelivered",
                "OrderStatusSuccessful",
                "OrderStatusFailed",
                "OrderStatusCanceled"
            ]
        },
        "db.OrderTransaction": {
            "type": "object",
            "required": [
                "amount",
                "buyer_entry_id",
                "completed_at",
                "created_at",
                "id",
                "order_id",
                "seller_entry_id",
                "status",
                "updated_at"
            ],
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "buyer_entry_id": {
                    "type": "integer"
                },
                "completed_at": {
                    "$ref": "#/definitions/pgtype.Timestamptz"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "order_id": {
                    "type": "string"
                },
                "seller_entry_id": {
                    "$ref": "#/definitions/pgtype.Int8"
                },
                "status": {
                    "$ref": "#/definitions/db.OrderTransactionStatus"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "db.OrderTransactionStatus": {
            "type": "string",
            "enum": [
                "pending",
                "completed",
                "refunded",
                "failed"
            ],
            "x-enum-varnames": [
                "OrderTransactionStatusPending",
                "OrderTransactionStatusCompleted",
                "OrderTransactionStatusRefunded",
                "OrderTransactionStatusFailed"
            ]
        },
        "db.PaymentMethod": {
            "type": "string",
            "enum": [
                "cod",
                "wallet"
            ],
            "x-enum-varnames": [
                "PaymentMethodCod",
                "PaymentMethodWallet"
            ]
        },
        "db.User": {
            "type": "object",
            "required": [
                "avatar_url",
                "created_at",
                "email",
                "email_verified",
                "full_name",
                "google_account_id",
                "id",
                "phone_number",
                "phone_number_verified",
                "role",
                "updated_at"
            ],
            "properties": {
                "avatar_url": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/pgtype.Text"
                        }
                    ],
                    "x-nullable": true
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "email_verified": {
                    "type": "boolean"
                },
                "full_name": {
                    "type": "string",
                    "x-nullable": true
                },
                "google_account_id": {
                    "$ref": "#/definitions/pgtype.Text"
                },
                "id": {
                    "type": "string"
                },
                "phone_number": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/pgtype.Text"
                        }
                    ],
                    "x-nullable": true
                },
                "phone_number_verified": {
                    "type": "boolean"
                },
                "role": {
                    "$ref": "#/definitions/db.UserRole"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "db.UserAddress": {
            "type": "object",
            "required": [
                "created_at",
                "detail",
                "district_name",
                "full_name",
                "ghn_district_id",
                "ghn_ward_code",
                "id",
                "is_pickup_address",
                "is_primary",
                "phone_number",
                "province_name",
                "updated_at",
                "user_id",
                "ward_name"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "detail": {
                    "type": "string"
                },
                "district_name": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "ghn_district_id": {
                    "type": "integer"
                },
                "ghn_ward_code": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_pickup_address": {
                    "type": "boolean"
                },
                "is_primary": {
                    "type": "boolean"
                },
                "phone_number": {
                    "type": "string"
                },
                "province_name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "ward_name": {
                    "type": "string"
                }
            }
        },
        "db.UserRole": {
            "type": "string",
            "enum": [
                "member",
                "seller",
                "moderator",
                "admin"
            ],
            "x-enum-varnames": [
                "UserRoleMember",
                "UserRoleSeller",
                "UserRoleModerator",
                "UserRoleAdmin"
            ]
        },
        "db.Wallet": {
            "type": "object",
            "required": [
                "balance",
                "created_at",
                "currency",
                "id",
                "non_withdrawable_amount",
                "updated_at",
                "user_id"
            ],
            "properties": {
                "balance": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "non_withdrawable_amount": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "db.WalletEntry": {
            "type": "object",
            "required": [
                "amount",
                "completed_at",
                "created_at",
                "entry_type",
                "id",
                "reference_id",
                "reference_type",
                "status",
                "updated_at",
                "wallet_id"
            ],
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "completed_at": {
                    "$ref": "#/definitions/pgtype.Timestamptz"
                },
                "created_at": {
                    "type": "string"
                },
                "entry_type": {
                    "$ref": "#/definitions/db.WalletEntryType"
                },
                "id": {
                    "type": "integer"
                },
                "reference_id": {
                    "$ref": "#/definitions/pgtype.Text"
                },
                "reference_type": {
                    "$ref": "#/definitions/db.WalletReferenceType"
                },
                "status": {
                    "$ref": "#/definitions/db.WalletEntryStatus"
                },
                "updated_at": {
                    "type": "string"
                },
                "wallet_id": {
                    "type": "integer"
                }
            }
        },
        "db.WalletEntryStatus": {
            "type": "string",
            "enum": [
                "pending",
                "completed",
                "failed"
            ],
            "x-enum-varnames": [
                "WalletEntryStatusPending",
                "WalletEntryStatusCompleted",
                "WalletEntryStatusFailed"
            ]
        },
        "db.WalletEntryType": {
            "type": "string",
            "enum": [
                "deposit",
                "withdrawal",
                "payment",
                "payment_received",
                "refund",
                "refund_deduction",
                "auction_lock",
                "auction_release",
                "auction_payment",
                "platform_fee"
            ],
            "x-enum-varnames": [
                "WalletEntryTypeDeposit",
                "WalletEntryTypeWithdrawal",
                "WalletEntryTypePayment",
                "WalletEntryTypePaymentReceived",
                "WalletEntryTypeRefund",
                "WalletEntryTypeRefundDeduction",
                "WalletEntryTypeAuctionLock",
                "WalletEntryTypeAuctionRelease",
                "WalletEntryTypeAuctionPayment",
                "WalletEntryTypePlatformFee"
            ]
        },
        "db.WalletReferenceType": {
            "type": "string",
            "enum": [
                "order",
                "auction",
                "withdrawal_request",
                "deposit_request",
                "promotion",
                "affiliate",
                "zalopay"
            ],
            "x-enum-varnames": [
                "WalletReferenceTypeOrder",
                "WalletReferenceTypeAuction",
                "WalletReferenceTypeWithdrawalRequest",
                "WalletReferenceTypeDepositRequest",
                "WalletReferenceTypePromotion",
                "WalletReferenceTypeAffiliate",
                "WalletReferenceTypeZalopay"
            ]
        },
        "gin.H": {
            "type": "object",
            "additionalProperties": {}
        },
        "pgtype.InfinityModifier": {
            "type": "integer",
            "enum": [
                1,
                0,
                -1
            ],
            "x-enum-varnames": [
                "Infinity",
                "Finite",
                "NegativeInfinity"
            ]
        },
        "pgtype.Int8": {
            "type": "object",
            "properties": {
                "int64": {
                    "type": "integer"
                },
                "valid": {
                    "type": "boolean"
                }
            }
        },
        "pgtype.Text": {
            "type": "object",
            "properties": {
                "string": {
                    "type": "string"
                },
                "valid": {
                    "type": "boolean"
                }
            }
        },
        "pgtype.Timestamptz": {
            "type": "object",
            "properties": {
                "infinity_modifier": {
                    "$ref": "#/definitions/pgtype.InfinityModifier"
                },
                "time": {
                    "type": "string"
                },
                "valid": {
                    "type": "boolean"
                }
            }
        },
        "zalopay.CreateOrderZalopayResponse": {
            "type": "object",
            "required": [
                "order_token",
                "order_url",
                "qr_code",
                "return_code",
                "return_message",
                "sub_return_code",
                "sub_return_message",
                "zp_trans_token"
            ],
            "properties": {
                "order_token": {
                    "type": "string"
                },
                "order_url": {
                    "type": "string"
                },
                "qr_code": {
                    "type": "string"
                },
                "return_code": {
                    "type": "integer"
                },
                "return_message": {
                    "type": "string"
                },
                "sub_return_code": {
                    "type": "integer"
                },
                "sub_return_message": {
                    "type": "string"
                },
                "zp_trans_token": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "accessToken": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}