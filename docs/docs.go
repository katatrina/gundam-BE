// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/google-login": {
            "post": {
                "description": "Authenticate a user using Google ID token. If the user doesn't exist, a new user will be created.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Login or register a user with Google account",
                "parameters": [
                    {
                        "description": "Google ID Token",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.loginUserWithGoogleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully logged in",
                        "schema": {
                            "$ref": "#/definitions/api.loginUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body"
                    },
                    "401": {
                        "description": "Invalid Google ID token"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticate a user and return access token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.loginUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.loginUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters"
                    },
                    "401": {
                        "description": "Incorrect password"
                    },
                    "404": {
                        "description": "Email not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/cart/items": {
            "get": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Retrieves all items in the user's shopping cart with detailed information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cart"
                ],
                "summary": "List Cart Items",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved cart items",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.ListCartItemsWithDetailsRow"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to retrieve cart items"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Adds a Gundam model to the user's shopping cart",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cart"
                ],
                "summary": "Add Item to Cart",
                "parameters": [
                    {
                        "description": "Gundam to add to cart",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.addCartItemRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully added item to cart",
                        "schema": {
                            "$ref": "#/definitions/db.AddCartItemRow"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input"
                    },
                    "401": {
                        "description": "Unauthorized - Authentication required"
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to add cart item"
                    }
                }
            }
        },
        "/cart/items/{id}": {
            "delete": {
                "security": [
                    {
                        "accessToken": []
                    }
                ],
                "description": "Removes a specific item from the user's shopping cart",
                "tags": [
                    "cart"
                ],
                "summary": "Delete Cart Item",
                "parameters": [
                    {
                        "type": "string",
                        "example": "1",
                        "description": "Cart Item ID to delete",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted cart item"
                    },
                    "400": {
                        "description": "Bad Request - Invalid cart item ID"
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to delete cart item"
                    }
                }
            }
        },
        "/grades": {
            "get": {
                "description": "Retrieves a list of all available Gundam model grades",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gundams"
                ],
                "summary": "List Gundam Grades",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of Gundam grades",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.GundamGrade"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to retrieve Gundam grades"
                    }
                }
            }
        },
        "/gundams": {
            "get": {
                "description": "Retrieves a list of Gundams, optionally filtered by grade",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gundams"
                ],
                "summary": "List Gundams",
                "parameters": [
                    {
                        "type": "string",
                        "example": "master-grade",
                        "description": "Filter by Gundam grade slug",
                        "name": "grade",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of Gundams",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.ListGundamsWithFiltersRow"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid query parameters"
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to retrieve Gundams"
                    }
                }
            }
        },
        "/gundams/{slug}": {
            "get": {
                "description": "Retrieves a specific Gundam model by its unique slug",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gundams"
                ],
                "summary": "Get Gundam by Slug",
                "parameters": [
                    {
                        "type": "string",
                        "example": "rx-78-2-gundam",
                        "description": "Gundam model slug",
                        "name": "slug",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved Gundam details",
                        "schema": {
                            "$ref": "#/definitions/db.GetGundamBySlugRow"
                        }
                    },
                    "404": {
                        "description": "Not Found - Gundam with specified slug does not exist"
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to retrieve Gundam"
                    }
                }
            }
        },
        "/otp/generate": {
            "post": {
                "description": "Generates and sends an OTP to the specified phone number",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Generate a One-Time Password (OTP)",
                "parameters": [
                    {
                        "description": "OTP Generation Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.GenerateOTPRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP generated successfully",
                        "schema": {
                            "$ref": "#/definitions/api.GenerateOTPResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input"
                    },
                    "429": {
                        "description": "Too Many Requests - OTP request rate limit exceeded"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/otp/verify": {
            "post": {
                "description": "Verifies the OTP sent to a user's phone number and updates the user's phone number if valid",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Verify One-Time Password (OTP)",
                "parameters": [
                    {
                        "description": "OTP Verification Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.VerifyOTPRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP verified successfully"
                    },
                    "400": {
                        "description": "Bad Request - Invalid input or OTP verification failed"
                    },
                    "401": {
                        "description": "Unauthorized - Invalid OTP code"
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to update user information"
                    }
                }
            }
        },
        "/sellers/{id}": {
            "get": {
                "description": "Get detailed information about a specific seller",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sellers"
                ],
                "summary": "Retrieve a seller by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seller ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved seller",
                        "schema": {
                            "$ref": "#/definitions/db.User"
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/tokens/verify": {
            "post": {
                "description": "Verifies a JWT access token and returns the associated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Verify access token",
                "parameters": [
                    {
                        "description": "Token verification request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.verifyAccessTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User information",
                        "schema": {
                            "$ref": "#/definitions/db.User"
                        }
                    },
                    "400": {
                        "description": "Invalid request format"
                    },
                    "401": {
                        "description": "Invalid or expired token"
                    }
                }
            }
        },
        "/users": {
            "post": {
                "description": "Create a new user with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.createUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created user",
                        "schema": {
                            "$ref": "#/definitions/db.User"
                        }
                    },
                    "400": {
                        "description": "Invalid request body"
                    },
                    "409": {
                        "description": "Email already exists"
                    },
                    "422": {
                        "description": "Validation error"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/users/by-phone": {
            "get": {
                "description": "Get user details using a phone number as a query parameter",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Retrieve a user by phone number",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Phone Number",
                        "name": "phone_number",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user",
                        "schema": {
                            "$ref": "#/definitions/db.User"
                        }
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Get detailed information about a specific user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Retrieve a user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user",
                        "schema": {
                            "$ref": "#/definitions/db.User"
                        }
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "put": {
                "description": "Update specific user details by user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update a user's information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.updateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated user",
                        "schema": {
                            "$ref": "#/definitions/db.User"
                        }
                    },
                    "400": {
                        "description": "Invalid request body"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/users/{id}/addresses": {
            "get": {
                "description": "Get all addresses for a specific user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Retrieve user addresses",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user addresses",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.UserAddress"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "post": {
                "description": "Add a new address for a specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Address creation request",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/api.createUserAddressRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Address created successfully",
                        "schema": {
                            "$ref": "#/definitions/db.CreateUserAddressTxResult"
                        }
                    },
                    "400": {
                        "description": "Invalid request body"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/users/{id}/addresses/{address_id}": {
            "put": {
                "description": "Update an existing address information for a specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Address ID",
                        "name": "address_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Address information to update",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.updateUserAddressRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Address updated successfully"
                    },
                    "400": {
                        "description": "Invalid request parameters"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/users/{id}/avatar": {
            "patch": {
                "description": "Upload and update a user's profile avatar",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user avatar",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Avatar image file",
                        "name": "avatar",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated avatar",
                        "schema": {
                            "$ref": "#/definitions/api.updateAvatarResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        }
    },
    "definitions": {
        "api.GenerateOTPRequest": {
            "type": "object",
            "required": [
                "phone_number"
            ],
            "properties": {
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "api.GenerateOTPResponse": {
            "type": "object",
            "required": [
                "can_resend_in",
                "expires_at",
                "otp_code",
                "phone_number"
            ],
            "properties": {
                "can_resend_in": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "string"
                },
                "otp_code": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "api.VerifyOTPRequest": {
            "type": "object",
            "required": [
                "otp_code",
                "phone_number",
                "user_id"
            ],
            "properties": {
                "otp_code": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "api.addCartItemRequest": {
            "type": "object",
            "required": [
                "gundam_id"
            ],
            "properties": {
                "gundam_id": {
                    "type": "integer"
                }
            }
        },
        "api.createUserAddressRequest": {
            "type": "object",
            "required": [
                "detail",
                "district_name",
                "full_name",
                "ghn_district_id",
                "ghn_ward_code",
                "is_pickup_address",
                "is_primary",
                "phone_number",
                "province_name",
                "ward_name"
            ],
            "properties": {
                "detail": {
                    "type": "string"
                },
                "district_name": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "ghn_district_id": {
                    "type": "integer"
                },
                "ghn_ward_code": {
                    "type": "string"
                },
                "is_pickup_address": {
                    "type": "boolean"
                },
                "is_primary": {
                    "type": "boolean"
                },
                "phone_number": {
                    "type": "string"
                },
                "province_name": {
                    "type": "string"
                },
                "ward_name": {
                    "type": "string"
                }
            }
        },
        "api.createUserRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "api.loginUserRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "api.loginUserResponse": {
            "type": "object",
            "required": [
                "access_token",
                "access_token_expires_at",
                "user"
            ],
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "access_token_expires_at": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/db.User"
                }
            }
        },
        "api.loginUserWithGoogleRequest": {
            "type": "object",
            "required": [
                "id_token"
            ],
            "properties": {
                "id_token": {
                    "type": "string"
                }
            }
        },
        "api.updateAvatarResponse": {
            "type": "object",
            "required": [
                "avatar_url"
            ],
            "properties": {
                "avatar_url": {
                    "type": "string"
                }
            }
        },
        "api.updateUserAddressRequest": {
            "type": "object",
            "required": [
                "detail",
                "district_name",
                "full_name",
                "ghn_district_id",
                "ghn_ward_code",
                "is_pickup_address",
                "is_primary",
                "phone_number",
                "province_name",
                "ward_name"
            ],
            "properties": {
                "detail": {
                    "type": "string"
                },
                "district_name": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "ghn_district_id": {
                    "type": "integer"
                },
                "ghn_ward_code": {
                    "type": "string"
                },
                "is_pickup_address": {
                    "type": "boolean"
                },
                "is_primary": {
                    "type": "boolean"
                },
                "phone_number": {
                    "type": "string"
                },
                "province_name": {
                    "type": "string"
                },
                "ward_name": {
                    "type": "string"
                }
            }
        },
        "api.updateUserRequest": {
            "type": "object",
            "required": [
                "full_name"
            ],
            "properties": {
                "full_name": {
                    "type": "string"
                }
            }
        },
        "api.verifyAccessTokenRequest": {
            "type": "object",
            "required": [
                "access_token"
            ],
            "properties": {
                "access_token": {
                    "type": "string"
                }
            }
        },
        "db.AddCartItemRow": {
            "type": "object",
            "required": [
                "cart_item_id",
                "gundam_id",
                "gundam_image_url",
                "gundam_name",
                "gundam_price",
                "seller_avatar_url",
                "seller_id",
                "seller_name"
            ],
            "properties": {
                "cart_item_id": {
                    "type": "string"
                },
                "gundam_id": {
                    "type": "integer"
                },
                "gundam_image_url": {
                    "type": "string"
                },
                "gundam_name": {
                    "type": "string"
                },
                "gundam_price": {
                    "type": "integer"
                },
                "seller_avatar_url": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/pgtype.Text"
                        }
                    ],
                    "x-nullable": true
                },
                "seller_id": {
                    "type": "string"
                },
                "seller_name": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/pgtype.Text"
                        }
                    ],
                    "x-nullable": true
                }
            }
        },
        "db.CreateUserAddressTxResult": {
            "type": "object",
            "required": [
                "created_at",
                "detail",
                "district_name",
                "full_name",
                "ghn_district_id",
                "ghn_ward_code",
                "id",
                "is_pickup_address",
                "is_primary",
                "phone_number",
                "province_name",
                "updated_at",
                "user_id",
                "ward_name"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "detail": {
                    "type": "string"
                },
                "district_name": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "ghn_district_id": {
                    "type": "integer"
                },
                "ghn_ward_code": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_pickup_address": {
                    "type": "boolean"
                },
                "is_primary": {
                    "type": "boolean"
                },
                "phone_number": {
                    "type": "string"
                },
                "province_name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "ward_name": {
                    "type": "string"
                }
            }
        },
        "db.GetGundamBySlugRow": {
            "type": "object",
            "required": [
                "condition",
                "created_at",
                "description",
                "grade",
                "id",
                "image_urls",
                "manufacturer",
                "name",
                "owner_id",
                "price",
                "scale",
                "slug",
                "status",
                "updated_at"
            ],
            "properties": {
                "condition": {
                    "$ref": "#/definitions/db.GundamCondition"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "grade": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "image_urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "manufacturer": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner_id": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "scale": {
                    "$ref": "#/definitions/db.GundamScale"
                },
                "slug": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/db.GundamStatus"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "db.GundamCondition": {
            "type": "string",
            "enum": [
                "new",
                "open box",
                "second hand"
            ],
            "x-enum-varnames": [
                "GundamConditionNew",
                "GundamConditionOpenbox",
                "GundamConditionSecondhand"
            ]
        },
        "db.GundamGrade": {
            "type": "object",
            "required": [
                "created_at",
                "display_name",
                "id",
                "name",
                "slug"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            }
        },
        "db.GundamScale": {
            "type": "string",
            "enum": [
                "1/144",
                "1/100",
                "1/60",
                "1/48"
            ],
            "x-enum-varnames": [
                "GundamScale1144",
                "GundamScale1100",
                "GundamScale160",
                "GundamScale148"
            ]
        },
        "db.GundamStatus": {
            "type": "string",
            "enum": [
                "available",
                "selling",
                "auction",
                "exchange"
            ],
            "x-enum-varnames": [
                "GundamStatusAvailable",
                "GundamStatusSelling",
                "GundamStatusAuction",
                "GundamStatusExchange"
            ]
        },
        "db.ListCartItemsWithDetailsRow": {
            "type": "object",
            "required": [
                "cart_item_id",
                "gundam_id",
                "gundam_image_url",
                "gundam_name",
                "gundam_price",
                "seller_avatar_url",
                "seller_id",
                "seller_name"
            ],
            "properties": {
                "cart_item_id": {
                    "type": "string"
                },
                "gundam_id": {
                    "type": "integer"
                },
                "gundam_image_url": {
                    "type": "string"
                },
                "gundam_name": {
                    "type": "string"
                },
                "gundam_price": {
                    "type": "integer"
                },
                "seller_avatar_url": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/pgtype.Text"
                        }
                    ],
                    "x-nullable": true
                },
                "seller_id": {
                    "type": "string"
                },
                "seller_name": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/pgtype.Text"
                        }
                    ],
                    "x-nullable": true
                }
            }
        },
        "db.ListGundamsWithFiltersRow": {
            "type": "object",
            "required": [
                "condition",
                "created_at",
                "description",
                "grade",
                "id",
                "image_urls",
                "manufacturer",
                "name",
                "owner_id",
                "price",
                "scale",
                "slug",
                "status",
                "updated_at"
            ],
            "properties": {
                "condition": {
                    "$ref": "#/definitions/db.GundamCondition"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "grade": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "image_urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "manufacturer": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner_id": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "scale": {
                    "$ref": "#/definitions/db.GundamScale"
                },
                "slug": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/db.GundamStatus"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "db.User": {
            "type": "object",
            "required": [
                "avatar_url",
                "created_at",
                "email",
                "email_verified",
                "full_name",
                "id",
                "phone_number",
                "phone_number_verified",
                "role",
                "updated_at"
            ],
            "properties": {
                "avatar_url": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/pgtype.Text"
                        }
                    ],
                    "x-nullable": true
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "email_verified": {
                    "type": "boolean"
                },
                "full_name": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/pgtype.Text"
                        }
                    ],
                    "x-nullable": true
                },
                "id": {
                    "type": "string"
                },
                "phone_number": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/pgtype.Text"
                        }
                    ],
                    "x-nullable": true
                },
                "phone_number_verified": {
                    "type": "boolean"
                },
                "role": {
                    "$ref": "#/definitions/db.UserRole"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "db.UserAddress": {
            "type": "object",
            "required": [
                "created_at",
                "detail",
                "district_name",
                "full_name",
                "ghn_district_id",
                "ghn_ward_code",
                "id",
                "is_pickup_address",
                "is_primary",
                "phone_number",
                "province_name",
                "updated_at",
                "user_id",
                "ward_name"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "detail": {
                    "type": "string"
                },
                "district_name": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "ghn_district_id": {
                    "type": "integer"
                },
                "ghn_ward_code": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_pickup_address": {
                    "type": "boolean"
                },
                "is_primary": {
                    "type": "boolean"
                },
                "phone_number": {
                    "type": "string"
                },
                "province_name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "ward_name": {
                    "type": "string"
                }
            }
        },
        "db.UserRole": {
            "type": "string",
            "enum": [
                "member",
                "seller",
                "moderator",
                "admin"
            ],
            "x-enum-varnames": [
                "UserRoleMember",
                "UserRoleSeller",
                "UserRoleModerator",
                "UserRoleAdmin"
            ]
        },
        "pgtype.Text": {
            "type": "object",
            "properties": {
                "string": {
                    "type": "string"
                },
                "valid": {
                    "type": "boolean"
                }
            }
        }
    },
    "securityDefinitions": {
        "accessToken": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.0",
	Host:             "localhost:8080",
	BasePath:         "/v1",
	Schemes:          []string{"http", "https"},
	Title:            "Gundam Platform API",
	Description:      "API documentation for Gundam Platform application",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
