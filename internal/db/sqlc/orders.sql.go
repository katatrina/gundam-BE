// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: orders.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const confirmOrderByID = `-- name: ConfirmOrderByID :one
UPDATE orders
SET status = 'packaging',
    updated_at = now()
WHERE id = $1
  AND seller_id = $2 RETURNING id, code, buyer_id, seller_id, items_subtotal, delivery_fee, total_amount, status, payment_method, note, is_packaged, packaging_images, created_at, updated_at
`

type ConfirmOrderByIDParams struct {
	OrderID  uuid.UUID `json:"order_id"`
	SellerID string    `json:"seller_id"`
}

func (q *Queries) ConfirmOrderByID(ctx context.Context, arg ConfirmOrderByIDParams) (Order, error) {
	row := q.db.QueryRow(ctx, confirmOrderByID, arg.OrderID, arg.SellerID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.BuyerID,
		&i.SellerID,
		&i.ItemsSubtotal,
		&i.DeliveryFee,
		&i.TotalAmount,
		&i.Status,
		&i.PaymentMethod,
		&i.Note,
		&i.IsPackaged,
		&i.PackagingImages,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (id,
                    code,
                    buyer_id,
                    seller_id,
                    items_subtotal,
                    delivery_fee,
                    total_amount,
                    status,
                    payment_method,
                    note)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING id, code, buyer_id, seller_id, items_subtotal, delivery_fee, total_amount, status, payment_method, note, is_packaged, packaging_images, created_at, updated_at
`

type CreateOrderParams struct {
	ID            uuid.UUID     `json:"id"`
	Code          string        `json:"code"`
	BuyerID       string        `json:"buyer_id"`
	SellerID      string        `json:"seller_id"`
	ItemsSubtotal int64         `json:"items_subtotal"`
	DeliveryFee   int64         `json:"delivery_fee"`
	TotalAmount   int64         `json:"total_amount"`
	Status        OrderStatus   `json:"status"`
	PaymentMethod PaymentMethod `json:"payment_method"`
	Note          pgtype.Text   `json:"note"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.ID,
		arg.Code,
		arg.BuyerID,
		arg.SellerID,
		arg.ItemsSubtotal,
		arg.DeliveryFee,
		arg.TotalAmount,
		arg.Status,
		arg.PaymentMethod,
		arg.Note,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.BuyerID,
		&i.SellerID,
		&i.ItemsSubtotal,
		&i.DeliveryFee,
		&i.TotalAmount,
		&i.Status,
		&i.PaymentMethod,
		&i.Note,
		&i.IsPackaged,
		&i.PackagingImages,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT id, code, buyer_id, seller_id, items_subtotal, delivery_fee, total_amount, status, payment_method, note, is_packaged, packaging_images, created_at, updated_at
FROM orders
WHERE id = $1
`

func (q *Queries) GetOrderByID(ctx context.Context, id uuid.UUID) (Order, error) {
	row := q.db.QueryRow(ctx, getOrderByID, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.BuyerID,
		&i.SellerID,
		&i.ItemsSubtotal,
		&i.DeliveryFee,
		&i.TotalAmount,
		&i.Status,
		&i.PaymentMethod,
		&i.Note,
		&i.IsPackaged,
		&i.PackagingImages,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSalesOrderBySellerID = `-- name: GetSalesOrderBySellerID :one
SELECT id, code, buyer_id, seller_id, items_subtotal, delivery_fee, total_amount, status, payment_method, note, is_packaged, packaging_images, created_at, updated_at
FROM orders
WHERE id = $1
  AND seller_id = $2
    FOR UPDATE
`

type GetSalesOrderBySellerIDParams struct {
	OrderID  uuid.UUID `json:"order_id"`
	SellerID string    `json:"seller_id"`
}

func (q *Queries) GetSalesOrderBySellerID(ctx context.Context, arg GetSalesOrderBySellerIDParams) (Order, error) {
	row := q.db.QueryRow(ctx, getSalesOrderBySellerID, arg.OrderID, arg.SellerID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.BuyerID,
		&i.SellerID,
		&i.ItemsSubtotal,
		&i.DeliveryFee,
		&i.TotalAmount,
		&i.Status,
		&i.PaymentMethod,
		&i.Note,
		&i.IsPackaged,
		&i.PackagingImages,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOrdersByUserID = `-- name: ListOrdersByUserID :many
SELECT id, code, buyer_id, seller_id, items_subtotal, delivery_fee, total_amount, status, payment_method, note, is_packaged, packaging_images, created_at, updated_at
FROM orders
WHERE buyer_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListOrdersByUserID(ctx context.Context, buyerID string) ([]Order, error) {
	rows, err := q.db.Query(ctx, listOrdersByUserID, buyerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.BuyerID,
			&i.SellerID,
			&i.ItemsSubtotal,
			&i.DeliveryFee,
			&i.TotalAmount,
			&i.Status,
			&i.PaymentMethod,
			&i.Note,
			&i.IsPackaged,
			&i.PackagingImages,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE orders
SET is_packaged      = COALESCE($1, is_packaged),
    packaging_images = COALESCE($2, packaging_images),
    status           = COALESCE($3, status),
    updated_at       = now()
WHERE id = $4 RETURNING id, code, buyer_id, seller_id, items_subtotal, delivery_fee, total_amount, status, payment_method, note, is_packaged, packaging_images, created_at, updated_at
`

type UpdateOrderParams struct {
	IsPackaged      pgtype.Bool     `json:"is_packaged"`
	PackagingImages []string        `json:"packaging_images"`
	Status          NullOrderStatus `json:"status"`
	OrderID         uuid.UUID       `json:"order_id"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrder,
		arg.IsPackaged,
		arg.PackagingImages,
		arg.Status,
		arg.OrderID,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.BuyerID,
		&i.SellerID,
		&i.ItemsSubtotal,
		&i.DeliveryFee,
		&i.TotalAmount,
		&i.Status,
		&i.PaymentMethod,
		&i.Note,
		&i.IsPackaged,
		&i.PackagingImages,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const validateGundamBeforeCheckout = `-- name: ValidateGundamBeforeCheckout :one
SELECT g.id, g.owner_id, g.name, g.slug, g.grade_id, g.quantity, g.condition, g.condition_description, g.manufacturer, g.weight, g.scale, g.description, g.price, g.status, g.created_at, g.updated_at, g.deleted_at,
       CASE
           WHEN g.id IS NOT NULL AND g.status = 'published' AND g.deleted_at IS NULL
               THEN true
           ELSE false
           END as valid
FROM gundams g
         JOIN users u ON g.owner_id = u.id
WHERE g.id = $1
`

type ValidateGundamBeforeCheckoutRow struct {
	Gundam Gundam `json:"gundam"`
	Valid  bool   `json:"valid"`
}

func (q *Queries) ValidateGundamBeforeCheckout(ctx context.Context, id int64) (ValidateGundamBeforeCheckoutRow, error) {
	row := q.db.QueryRow(ctx, validateGundamBeforeCheckout, id)
	var i ValidateGundamBeforeCheckoutRow
	err := row.Scan(
		&i.Gundam.ID,
		&i.Gundam.OwnerID,
		&i.Gundam.Name,
		&i.Gundam.Slug,
		&i.Gundam.GradeID,
		&i.Gundam.Quantity,
		&i.Gundam.Condition,
		&i.Gundam.ConditionDescription,
		&i.Gundam.Manufacturer,
		&i.Gundam.Weight,
		&i.Gundam.Scale,
		&i.Gundam.Description,
		&i.Gundam.Price,
		&i.Gundam.Status,
		&i.Gundam.CreatedAt,
		&i.Gundam.UpdatedAt,
		&i.Gundam.DeletedAt,
		&i.Valid,
	)
	return i, err
}
