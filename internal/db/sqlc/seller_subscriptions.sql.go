// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: seller_subscriptions.sql

package db

import (
	"context"
	"time"
)

const createTrialSubscriptionForSeller = `-- name: CreateTrialSubscriptionForSeller :exec
WITH trial_plan AS (SELECT id
                    FROM subscription_plans
                    WHERE name = 'GÓI DÙNG THỬ' LIMIT 1
    )
INSERT
INTO seller_subscriptions (seller_id,
                           plan_id,
                           start_date,
                           end_date,
                           is_active)
VALUES (
    $1, (SELECT id FROM trial_plan), now(), NULL, true
    )
`

func (q *Queries) CreateTrialSubscriptionForSeller(ctx context.Context, sellerID string) error {
	_, err := q.db.Exec(ctx, createTrialSubscriptionForSeller, sellerID)
	return err
}

const getCurrentActiveSubscriptionDetailsForSeller = `-- name: GetCurrentActiveSubscriptionDetailsForSeller :one
SELECT ss.id,
       ss.plan_id,
       p.name                                        AS subscription_name,
       p.price                                       AS subscription_price, -- ✨ Thêm giá gói
       ss.seller_id,
       p.max_listings,
       ss.listings_used,
       (p.max_listings - ss.listings_used)           AS listings_remaining, -- ✨ Số lượt còn lại
       p.max_open_auctions,
       ss.open_auctions_used,
       (p.max_open_auctions - ss.open_auctions_used) AS auctions_remaining, -- ✨ Số lượt đấu giá còn lại
       ss.is_active,
       p.is_unlimited,
       p.duration_days,                                                     -- ✨ Thời hạn gói
       ss.start_date,
       ss.end_date,
       CASE
           WHEN ss.end_date IS NULL THEN NULL
           ELSE (ss.end_date - NOW())
           END                                       AS days_remaining      -- ✨ Số ngày còn lại
FROM seller_subscriptions ss
         JOIN subscription_plans p ON ss.plan_id = p.id
WHERE ss.seller_id = $1
  AND ss.is_active = true
`

type GetCurrentActiveSubscriptionDetailsForSellerRow struct {
	ID                int64       `json:"id"`
	PlanID            int64       `json:"plan_id"`
	SubscriptionName  string      `json:"subscription_name"`
	SubscriptionPrice int64       `json:"subscription_price"`
	SellerID          string      `json:"seller_id"`
	MaxListings       *int64      `json:"max_listings"`
	ListingsUsed      int64       `json:"listings_used"`
	ListingsRemaining int32       `json:"listings_remaining"`
	MaxOpenAuctions   *int64      `json:"max_open_auctions"`
	OpenAuctionsUsed  int64       `json:"open_auctions_used"`
	AuctionsRemaining int32       `json:"auctions_remaining"`
	IsActive          bool        `json:"is_active"`
	IsUnlimited       bool        `json:"is_unlimited"`
	DurationDays      *int64      `json:"duration_days"`
	StartDate         time.Time   `json:"start_date"`
	EndDate           *time.Time  `json:"end_date"`
	DaysRemaining     interface{} `json:"days_remaining"`
}

func (q *Queries) GetCurrentActiveSubscriptionDetailsForSeller(ctx context.Context, sellerID string) (GetCurrentActiveSubscriptionDetailsForSellerRow, error) {
	row := q.db.QueryRow(ctx, getCurrentActiveSubscriptionDetailsForSeller, sellerID)
	var i GetCurrentActiveSubscriptionDetailsForSellerRow
	err := row.Scan(
		&i.ID,
		&i.PlanID,
		&i.SubscriptionName,
		&i.SubscriptionPrice,
		&i.SellerID,
		&i.MaxListings,
		&i.ListingsUsed,
		&i.ListingsRemaining,
		&i.MaxOpenAuctions,
		&i.OpenAuctionsUsed,
		&i.AuctionsRemaining,
		&i.IsActive,
		&i.IsUnlimited,
		&i.DurationDays,
		&i.StartDate,
		&i.EndDate,
		&i.DaysRemaining,
	)
	return i, err
}

const updateCurrentActiveSubscriptionForSeller = `-- name: UpdateCurrentActiveSubscriptionForSeller :exec
UPDATE seller_subscriptions
SET listings_used      = COALESCE($1, listings_used),
    open_auctions_used = COALESCE($2, open_auctions_used),
    updated_at         = now()
WHERE id = $3
  AND seller_id = $4
  AND is_active = true
`

type UpdateCurrentActiveSubscriptionForSellerParams struct {
	ListingsUsed     *int64 `json:"listings_used"`
	OpenAuctionsUsed *int64 `json:"open_auctions_used"`
	SubscriptionID   int64  `json:"subscription_id"`
	SellerID         string `json:"seller_id"`
}

func (q *Queries) UpdateCurrentActiveSubscriptionForSeller(ctx context.Context, arg UpdateCurrentActiveSubscriptionForSellerParams) error {
	_, err := q.db.Exec(ctx, updateCurrentActiveSubscriptionForSeller,
		arg.ListingsUsed,
		arg.OpenAuctionsUsed,
		arg.SubscriptionID,
		arg.SellerID,
	)
	return err
}
