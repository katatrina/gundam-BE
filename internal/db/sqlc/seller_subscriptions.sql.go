// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: seller_subscriptions.sql

package db

import (
	"context"
	"time"
)

const createSellerSubscription = `-- name: CreateSellerSubscription :one
INSERT INTO seller_subscriptions (seller_id,
                                  plan_id,
                                  start_date,
                                  end_date,
                                  listings_used,
                                  open_auctions_used,
                                  is_active)
VALUES ($1, $2, NOW(), $3, $4, $5, $6) RETURNING id, seller_id, plan_id, start_date, end_date, listings_used, open_auctions_used, is_active, created_at, updated_at
`

type CreateSellerSubscriptionParams struct {
	SellerID         string     `json:"seller_id"`
	PlanID           int64      `json:"plan_id"`
	EndDate          *time.Time `json:"end_date"`
	ListingsUsed     int64      `json:"listings_used"`
	OpenAuctionsUsed int64      `json:"open_auctions_used"`
	IsActive         bool       `json:"is_active"`
}

func (q *Queries) CreateSellerSubscription(ctx context.Context, arg CreateSellerSubscriptionParams) (SellerSubscription, error) {
	row := q.db.QueryRow(ctx, createSellerSubscription,
		arg.SellerID,
		arg.PlanID,
		arg.EndDate,
		arg.ListingsUsed,
		arg.OpenAuctionsUsed,
		arg.IsActive,
	)
	var i SellerSubscription
	err := row.Scan(
		&i.ID,
		&i.SellerID,
		&i.PlanID,
		&i.StartDate,
		&i.EndDate,
		&i.ListingsUsed,
		&i.OpenAuctionsUsed,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createTrialSubscriptionForSeller = `-- name: CreateTrialSubscriptionForSeller :exec
WITH trial_plan AS (SELECT id
                    FROM subscription_plans
                    WHERE name = 'GÓI DÙNG THỬ' LIMIT 1
    )
INSERT
INTO seller_subscriptions (seller_id,
                           plan_id,
                           start_date,
                           end_date,
                           is_active)
VALUES (
    $1, (SELECT id FROM trial_plan), now(), NULL, true
    )
`

func (q *Queries) CreateTrialSubscriptionForSeller(ctx context.Context, sellerID string) error {
	_, err := q.db.Exec(ctx, createTrialSubscriptionForSeller, sellerID)
	return err
}

const getCurrentActiveSubscriptionDetailsForSeller = `-- name: GetCurrentActiveSubscriptionDetailsForSeller :one
SELECT ss.id,
       ss.plan_id,
       p.name  AS subscription_name,
       p.price AS subscription_price,
       ss.seller_id,
       p.max_listings,
       ss.listings_used,
       p.max_open_auctions,
       ss.open_auctions_used,
       ss.is_active,
       p.is_unlimited,
       p.duration_days,
       ss.start_date,
       ss.end_date
FROM seller_subscriptions ss
         JOIN subscription_plans p ON ss.plan_id = p.id
WHERE ss.seller_id = $1
  AND ss.is_active = true
`

type GetCurrentActiveSubscriptionDetailsForSellerRow struct {
	ID                int64      `json:"id"`
	PlanID            int64      `json:"plan_id"`
	SubscriptionName  string     `json:"subscription_name"`
	SubscriptionPrice int64      `json:"subscription_price"`
	SellerID          string     `json:"seller_id"`
	MaxListings       *int64     `json:"max_listings"`
	ListingsUsed      int64      `json:"listings_used"`
	MaxOpenAuctions   *int64     `json:"max_open_auctions"`
	OpenAuctionsUsed  int64      `json:"open_auctions_used"`
	IsActive          bool       `json:"is_active"`
	IsUnlimited       bool       `json:"is_unlimited"`
	DurationDays      *int64     `json:"duration_days"`
	StartDate         time.Time  `json:"start_date"`
	EndDate           *time.Time `json:"end_date"`
}

func (q *Queries) GetCurrentActiveSubscriptionDetailsForSeller(ctx context.Context, sellerID string) (GetCurrentActiveSubscriptionDetailsForSellerRow, error) {
	row := q.db.QueryRow(ctx, getCurrentActiveSubscriptionDetailsForSeller, sellerID)
	var i GetCurrentActiveSubscriptionDetailsForSellerRow
	err := row.Scan(
		&i.ID,
		&i.PlanID,
		&i.SubscriptionName,
		&i.SubscriptionPrice,
		&i.SellerID,
		&i.MaxListings,
		&i.ListingsUsed,
		&i.MaxOpenAuctions,
		&i.OpenAuctionsUsed,
		&i.IsActive,
		&i.IsUnlimited,
		&i.DurationDays,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const listSubscriptionHistory = `-- name: ListSubscriptionHistory :many
SELECT ss.id,
       ss.plan_id,
       p.name  AS subscription_name,
       p.price AS subscription_price,
       ss.start_date,
       ss.end_date,
       ss.is_active,
       ss.created_at
FROM seller_subscriptions ss
         JOIN subscription_plans p ON ss.plan_id = p.id
WHERE ss.seller_id = $1
ORDER BY ss.created_at DESC
`

type ListSubscriptionHistoryRow struct {
	ID                int64      `json:"id"`
	PlanID            int64      `json:"plan_id"`
	SubscriptionName  string     `json:"subscription_name"`
	SubscriptionPrice int64      `json:"subscription_price"`
	StartDate         time.Time  `json:"start_date"`
	EndDate           *time.Time `json:"end_date"`
	IsActive          bool       `json:"is_active"`
	CreatedAt         time.Time  `json:"created_at"`
}

func (q *Queries) ListSubscriptionHistory(ctx context.Context, sellerID string) ([]ListSubscriptionHistoryRow, error) {
	rows, err := q.db.Query(ctx, listSubscriptionHistory, sellerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListSubscriptionHistoryRow{}
	for rows.Next() {
		var i ListSubscriptionHistoryRow
		if err := rows.Scan(
			&i.ID,
			&i.PlanID,
			&i.SubscriptionName,
			&i.SubscriptionPrice,
			&i.StartDate,
			&i.EndDate,
			&i.IsActive,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCurrentActiveSubscriptionForSeller = `-- name: UpdateCurrentActiveSubscriptionForSeller :one
UPDATE seller_subscriptions
SET listings_used      = COALESCE($1, listings_used),
    open_auctions_used = COALESCE($2, open_auctions_used),
    is_active          = COALESCE($3, is_active),
    updated_at         = now()
WHERE id = $4
  AND seller_id = $5
  AND is_active = true RETURNING id, seller_id, plan_id, start_date, end_date, listings_used, open_auctions_used, is_active, created_at, updated_at
`

type UpdateCurrentActiveSubscriptionForSellerParams struct {
	ListingsUsed     *int64 `json:"listings_used"`
	OpenAuctionsUsed *int64 `json:"open_auctions_used"`
	IsActive         *bool  `json:"is_active"`
	SubscriptionID   int64  `json:"subscription_id"`
	SellerID         string `json:"seller_id"`
}

func (q *Queries) UpdateCurrentActiveSubscriptionForSeller(ctx context.Context, arg UpdateCurrentActiveSubscriptionForSellerParams) (SellerSubscription, error) {
	row := q.db.QueryRow(ctx, updateCurrentActiveSubscriptionForSeller,
		arg.ListingsUsed,
		arg.OpenAuctionsUsed,
		arg.IsActive,
		arg.SubscriptionID,
		arg.SellerID,
	)
	var i SellerSubscription
	err := row.Scan(
		&i.ID,
		&i.SellerID,
		&i.PlanID,
		&i.StartDate,
		&i.EndDate,
		&i.ListingsUsed,
		&i.OpenAuctionsUsed,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
