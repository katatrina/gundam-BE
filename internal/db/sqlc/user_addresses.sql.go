// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user_addresses.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUserAddress = `-- name: CreateUserAddress :one
INSERT INTO user_addresses (user_id, full_name, phone_number, province_name, district_name, ghn_district_id, ward_name,
                            ghn_ward_code,
                            detail, is_primary, is_pickup_address)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) RETURNING id, user_id, full_name, phone_number, province_name, district_name, ghn_district_id, ward_name, ghn_ward_code, detail, is_primary, is_pickup_address, created_at, updated_at
`

type CreateUserAddressParams struct {
	UserID          string `json:"user_id"`
	FullName        string `json:"full_name"`
	PhoneNumber     string `json:"phone_number"`
	ProvinceName    string `json:"province_name"`
	DistrictName    string `json:"district_name"`
	GhnDistrictID   int64  `json:"ghn_district_id"`
	WardName        string `json:"ward_name"`
	GhnWardCode     string `json:"ghn_ward_code"`
	Detail          string `json:"detail"`
	IsPrimary       bool   `json:"is_primary"`
	IsPickupAddress bool   `json:"is_pickup_address"`
}

func (q *Queries) CreateUserAddress(ctx context.Context, arg CreateUserAddressParams) (UserAddress, error) {
	row := q.db.QueryRow(ctx, createUserAddress,
		arg.UserID,
		arg.FullName,
		arg.PhoneNumber,
		arg.ProvinceName,
		arg.DistrictName,
		arg.GhnDistrictID,
		arg.WardName,
		arg.GhnWardCode,
		arg.Detail,
		arg.IsPrimary,
		arg.IsPickupAddress,
	)
	var i UserAddress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FullName,
		&i.PhoneNumber,
		&i.ProvinceName,
		&i.DistrictName,
		&i.GhnDistrictID,
		&i.WardName,
		&i.GhnWardCode,
		&i.Detail,
		&i.IsPrimary,
		&i.IsPickupAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUserAddresses = `-- name: ListUserAddresses :many
SELECT id, user_id, full_name, phone_number, province_name, district_name, ghn_district_id, ward_name, ghn_ward_code, detail, is_primary, is_pickup_address, created_at, updated_at
FROM user_addresses
WHERE user_id = $1
ORDER BY is_primary DESC, created_at DESC
`

func (q *Queries) ListUserAddresses(ctx context.Context, userID string) ([]UserAddress, error) {
	rows, err := q.db.Query(ctx, listUserAddresses, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserAddress{}
	for rows.Next() {
		var i UserAddress
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FullName,
			&i.PhoneNumber,
			&i.ProvinceName,
			&i.DistrictName,
			&i.GhnDistrictID,
			&i.WardName,
			&i.GhnWardCode,
			&i.Detail,
			&i.IsPrimary,
			&i.IsPickupAddress,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unsetPickupAddress = `-- name: UnsetPickupAddress :exec
UPDATE user_addresses
SET is_pickup_address = false,
    updated_at        = now()
WHERE user_id = $1
  AND is_pickup_address = true
`

func (q *Queries) UnsetPickupAddress(ctx context.Context, userID string) error {
	_, err := q.db.Exec(ctx, unsetPickupAddress, userID)
	return err
}

const unsetPrimaryAddress = `-- name: UnsetPrimaryAddress :exec
UPDATE user_addresses
SET is_primary = false,
    updated_at = now()
WHERE user_id = $1
  AND is_primary = true
`

func (q *Queries) UnsetPrimaryAddress(ctx context.Context, userID string) error {
	_, err := q.db.Exec(ctx, unsetPrimaryAddress, userID)
	return err
}

const updateUserAddress = `-- name: UpdateUserAddress :exec
UPDATE user_addresses
SET full_name = COALESCE($1, full_name),
    phone_number = COALESCE($2, phone_number),
    province_name = COALESCE($3, province_name),
    district_name = COALESCE($4, district_name),
    ghn_district_id = COALESCE($5, ghn_district_id),
    ward_name = COALESCE($6, ward_name),
    ghn_ward_code = COALESCE($7, ghn_ward_code),
    detail = COALESCE($8, detail),
    is_primary = COALESCE($9, is_primary),
    is_pickup_address = COALESCE($10, is_pickup_address),
    updated_at = now()
WHERE id = $11
`

type UpdateUserAddressParams struct {
	FullName        pgtype.Text `json:"full_name"`
	PhoneNumber     pgtype.Text `json:"phone_number"`
	ProvinceName    pgtype.Text `json:"province_name"`
	DistrictName    pgtype.Text `json:"district_name"`
	GhnDistrictID   pgtype.Int8 `json:"ghn_district_id"`
	WardName        pgtype.Text `json:"ward_name"`
	GhnWardCode     pgtype.Text `json:"ghn_ward_code"`
	Detail          pgtype.Text `json:"detail"`
	IsPrimary       pgtype.Bool `json:"is_primary"`
	IsPickupAddress pgtype.Bool `json:"is_pickup_address"`
	AddressID       int64       `json:"address_id"`
}

func (q *Queries) UpdateUserAddress(ctx context.Context, arg UpdateUserAddressParams) error {
	_, err := q.db.Exec(ctx, updateUserAddress,
		arg.FullName,
		arg.PhoneNumber,
		arg.ProvinceName,
		arg.DistrictName,
		arg.GhnDistrictID,
		arg.WardName,
		arg.GhnWardCode,
		arg.Detail,
		arg.IsPrimary,
		arg.IsPickupAddress,
		arg.AddressID,
	)
	return err
}
