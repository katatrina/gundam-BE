// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: order_transactions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrderTransaction = `-- name: CreateOrderTransaction :one
INSERT INTO order_transactions (order_id,
                                amount,
                                status,
                                buyer_entry_id)
VALUES ($1, $2, $3, $4) RETURNING id, order_id, amount, status, buyer_entry_id, seller_entry_id, created_at, updated_at, completed_at
`

type CreateOrderTransactionParams struct {
	OrderID      string                 `json:"order_id"`
	Amount       int64                  `json:"amount"`
	Status       OrderTransactionStatus `json:"status"`
	BuyerEntryID int64                  `json:"buyer_entry_id"`
}

func (q *Queries) CreateOrderTransaction(ctx context.Context, arg CreateOrderTransactionParams) (OrderTransaction, error) {
	row := q.db.QueryRow(ctx, createOrderTransaction,
		arg.OrderID,
		arg.Amount,
		arg.Status,
		arg.BuyerEntryID,
	)
	var i OrderTransaction
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Amount,
		&i.Status,
		&i.BuyerEntryID,
		&i.SellerEntryID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompletedAt,
	)
	return i, err
}

const getOrderTransactionByOrderID = `-- name: GetOrderTransactionByOrderID :one
SELECT id, order_id, amount, status, buyer_entry_id, seller_entry_id, created_at, updated_at, completed_at
FROM order_transactions
WHERE order_id = $1
`

func (q *Queries) GetOrderTransactionByOrderID(ctx context.Context, orderID string) (OrderTransaction, error) {
	row := q.db.QueryRow(ctx, getOrderTransactionByOrderID, orderID)
	var i OrderTransaction
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Amount,
		&i.Status,
		&i.BuyerEntryID,
		&i.SellerEntryID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompletedAt,
	)
	return i, err
}

const updateOrderTransaction = `-- name: UpdateOrderTransaction :one
UPDATE order_transactions
SET amount          = COALESCE($1, amount),
    status          = COALESCE($2, status),
    buyer_entry_id  = COALESCE($3, buyer_entry_id),
    seller_entry_id = COALESCE($4, seller_entry_id),
    updated_at      = now()
WHERE order_id = $5 RETURNING id, order_id, amount, status, buyer_entry_id, seller_entry_id, created_at, updated_at, completed_at
`

type UpdateOrderTransactionParams struct {
	Amount        pgtype.Int8                `json:"amount"`
	Status        NullOrderTransactionStatus `json:"status"`
	BuyerEntryID  pgtype.Int8                `json:"buyer_entry_id"`
	SellerEntryID pgtype.Int8                `json:"seller_entry_id"`
	OrderID       string                     `json:"order_id"`
}

func (q *Queries) UpdateOrderTransaction(ctx context.Context, arg UpdateOrderTransactionParams) (OrderTransaction, error) {
	row := q.db.QueryRow(ctx, updateOrderTransaction,
		arg.Amount,
		arg.Status,
		arg.BuyerEntryID,
		arg.SellerEntryID,
		arg.OrderID,
	)
	var i OrderTransaction
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Amount,
		&i.Status,
		&i.BuyerEntryID,
		&i.SellerEntryID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompletedAt,
	)
	return i, err
}
