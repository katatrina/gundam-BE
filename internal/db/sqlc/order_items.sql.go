// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: order_items.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (order_id,
                         gundam_id,
                         name,
                         slug,
                         grade,
                         scale,
                         price,
                         quantity,
                         weight,
                         image_url)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING id, order_id, gundam_id, name, slug, grade, scale, quantity, price, weight, image_url, created_at
`

type CreateOrderItemParams struct {
	OrderID  uuid.UUID `json:"order_id"`
	GundamID *int64    `json:"gundam_id"`
	Name     string    `json:"name"`
	Slug     string    `json:"slug"`
	Grade    string    `json:"grade"`
	Scale    string    `json:"scale"`
	Price    int64     `json:"price"`
	Quantity int64     `json:"quantity"`
	Weight   int64     `json:"weight"`
	ImageURL string    `json:"image_url"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRow(ctx, createOrderItem,
		arg.OrderID,
		arg.GundamID,
		arg.Name,
		arg.Slug,
		arg.Grade,
		arg.Scale,
		arg.Price,
		arg.Quantity,
		arg.Weight,
		arg.ImageURL,
	)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.GundamID,
		&i.Name,
		&i.Slug,
		&i.Grade,
		&i.Scale,
		&i.Quantity,
		&i.Price,
		&i.Weight,
		&i.ImageURL,
		&i.CreatedAt,
	)
	return i, err
}

const listOrderItems = `-- name: ListOrderItems :many
SELECT id, order_id, gundam_id, name, slug, grade, scale, quantity, price, weight, image_url, created_at
FROM order_items
WHERE order_id = $1
`

func (q *Queries) ListOrderItems(ctx context.Context, orderID uuid.UUID) ([]OrderItem, error) {
	rows, err := q.db.Query(ctx, listOrderItems, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderItem{}
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.GundamID,
			&i.Name,
			&i.Slug,
			&i.Grade,
			&i.Scale,
			&i.Quantity,
			&i.Price,
			&i.Weight,
			&i.ImageURL,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
