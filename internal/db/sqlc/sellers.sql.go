// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: sellers.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createSellerProfile = `-- name: CreateSellerProfile :one
INSERT INTO seller_profiles (seller_id, shop_name)
VALUES ($1, $2) RETURNING seller_id, shop_name, created_at, updated_at
`

type CreateSellerProfileParams struct {
	SellerID string `json:"seller_id"`
	ShopName string `json:"shop_name"`
}

func (q *Queries) CreateSellerProfile(ctx context.Context, arg CreateSellerProfileParams) (SellerProfile, error) {
	row := q.db.QueryRow(ctx, createSellerProfile, arg.SellerID, arg.ShopName)
	var i SellerProfile
	err := row.Scan(
		&i.SellerID,
		&i.ShopName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSalesOrder = `-- name: GetSalesOrder :one
SELECT id, code, buyer_id, seller_id, items_subtotal, delivery_fee, total_amount, status, payment_method, type, note, is_packaged, packaging_image_urls, canceled_by, canceled_reason, created_at, updated_at, completed_at
FROM orders
WHERE id = $1
  AND seller_id = $2
  AND type != 'exchange'
`

type GetSalesOrderParams struct {
	OrderID  uuid.UUID `json:"order_id"`
	SellerID string    `json:"seller_id"`
}

func (q *Queries) GetSalesOrder(ctx context.Context, arg GetSalesOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, getSalesOrder, arg.OrderID, arg.SellerID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.BuyerID,
		&i.SellerID,
		&i.ItemsSubtotal,
		&i.DeliveryFee,
		&i.TotalAmount,
		&i.Status,
		&i.PaymentMethod,
		&i.Type,
		&i.Note,
		&i.IsPackaged,
		&i.PackagingImageURLs,
		&i.CanceledBy,
		&i.CanceledReason,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompletedAt,
	)
	return i, err
}

const getSellerActiveAuctionsCount = `-- name: GetSellerActiveAuctionsCount :one
SELECT COUNT(*) as count
FROM auctions
WHERE seller_id = $1 AND status = 'active'
`

// Metric 6: Đấu giá đang hoạt động của seller (bảng auctions)
func (q *Queries) GetSellerActiveAuctionsCount(ctx context.Context, sellerID string) (int64, error) {
	row := q.db.QueryRow(ctx, getSellerActiveAuctionsCount, sellerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSellerByID = `-- name: GetSellerByID :one
SELECT id, google_account_id, full_name, hashed_password, email, email_verified, phone_number, phone_number_verified, role, avatar_url, created_at, updated_at, deleted_at
FROM users
WHERE id = $1
  AND role = 'seller'
`

func (q *Queries) GetSellerByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRow(ctx, getSellerByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GoogleAccountID,
		&i.FullName,
		&i.HashedPassword,
		&i.Email,
		&i.EmailVerified,
		&i.PhoneNumber,
		&i.PhoneNumberVerified,
		&i.Role,
		&i.AvatarURL,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getSellerCompletedOrdersCount = `-- name: GetSellerCompletedOrdersCount :one
SELECT COUNT(*) as count
FROM orders
WHERE seller_id = $1 AND status = 'completed'
`

// Metric 3: Đơn hàng hoàn thành của seller (bảng orders)
func (q *Queries) GetSellerCompletedOrdersCount(ctx context.Context, sellerID string) (int64, error) {
	row := q.db.QueryRow(ctx, getSellerCompletedOrdersCount, sellerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSellerDetailByID = `-- name: GetSellerDetailByID :one
SELECT u.id, u.google_account_id, u.full_name, u.hashed_password, u.email, u.email_verified, u.phone_number, u.phone_number_verified, u.role, u.avatar_url, u.created_at, u.updated_at, u.deleted_at,
       sp.seller_id, sp.shop_name, sp.created_at, sp.updated_at
FROM users u
         JOIN seller_profiles sp ON u.id = sp.seller_id
WHERE u.id = $1
`

type GetSellerDetailByIDRow struct {
	User          User          `json:"user"`
	SellerProfile SellerProfile `json:"seller_profile"`
}

func (q *Queries) GetSellerDetailByID(ctx context.Context, id string) (GetSellerDetailByIDRow, error) {
	row := q.db.QueryRow(ctx, getSellerDetailByID, id)
	var i GetSellerDetailByIDRow
	err := row.Scan(
		&i.User.ID,
		&i.User.GoogleAccountID,
		&i.User.FullName,
		&i.User.HashedPassword,
		&i.User.Email,
		&i.User.EmailVerified,
		&i.User.PhoneNumber,
		&i.User.PhoneNumberVerified,
		&i.User.Role,
		&i.User.AvatarURL,
		&i.User.CreatedAt,
		&i.User.UpdatedAt,
		&i.User.DeletedAt,
		&i.SellerProfile.SellerID,
		&i.SellerProfile.ShopName,
		&i.SellerProfile.CreatedAt,
		&i.SellerProfile.UpdatedAt,
	)
	return i, err
}

const getSellerIncomeThisMonth = `-- name: GetSellerIncomeThisMonth :one
SELECT COALESCE(SUM(amount), 0) ::bigint as income_this_month
FROM wallet_entries
WHERE wallet_id = $1
  AND entry_type IN ('payment_received', 'auction_seller_payment')
  AND status = 'completed'
  AND created_at >= date_trunc('month', CURRENT_DATE)
`

// Metric 5: Thu nhập tháng này của seller (bảng wallet_entries)
func (q *Queries) GetSellerIncomeThisMonth(ctx context.Context, walletID string) (int64, error) {
	row := q.db.QueryRow(ctx, getSellerIncomeThisMonth, walletID)
	var income_this_month int64
	err := row.Scan(&income_this_month)
	return income_this_month, err
}

const getSellerPendingAuctionRequestsCount = `-- name: GetSellerPendingAuctionRequestsCount :one
SELECT COUNT(*) as count
FROM auction_requests
WHERE seller_id = $1 AND status = 'pending'
`

// Metric 7: Yêu cầu đấu giá chờ duyệt của seller (bảng auction_requests)
func (q *Queries) GetSellerPendingAuctionRequestsCount(ctx context.Context, sellerID string) (int64, error) {
	row := q.db.QueryRow(ctx, getSellerPendingAuctionRequestsCount, sellerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSellerProcessingOrdersCount = `-- name: GetSellerProcessingOrdersCount :one
SELECT COUNT(*) as count
FROM orders
WHERE seller_id = $1 AND status IN ('pending', 'packaging', 'delivering')
`

// Metric 4: Đơn hàng đang xử lý của seller (bảng orders)
func (q *Queries) GetSellerProcessingOrdersCount(ctx context.Context, sellerID string) (int64, error) {
	row := q.db.QueryRow(ctx, getSellerProcessingOrdersCount, sellerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSellerProfileByID = `-- name: GetSellerProfileByID :one
SELECT seller_id, shop_name, created_at, updated_at
FROM seller_profiles
WHERE seller_id = $1
`

func (q *Queries) GetSellerProfileByID(ctx context.Context, sellerID string) (SellerProfile, error) {
	row := q.db.QueryRow(ctx, getSellerProfileByID, sellerID)
	var i SellerProfile
	err := row.Scan(
		&i.SellerID,
		&i.ShopName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSellerPublishedGundamsCount = `-- name: GetSellerPublishedGundamsCount :one
SELECT COUNT(*) as count
FROM gundams
WHERE owner_id = $1 AND status = 'published'
`

// Metric 1: Gundam đang bán của seller này (bảng gundams)
func (q *Queries) GetSellerPublishedGundamsCount(ctx context.Context, ownerID string) (int64, error) {
	row := q.db.QueryRow(ctx, getSellerPublishedGundamsCount, ownerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSellerTotalIncome = `-- name: GetSellerTotalIncome :one
SELECT COALESCE(SUM(amount), 0) ::bigint as total_income
FROM wallet_entries
WHERE wallet_id = $1
  AND entry_type IN ('payment_received', 'auction_seller_payment')
  AND status = 'completed'
`

// Metric 2: Tổng thu nhập của seller (bảng wallet_entries)
func (q *Queries) GetSellerTotalIncome(ctx context.Context, walletID string) (int64, error) {
	row := q.db.QueryRow(ctx, getSellerTotalIncome, walletID)
	var total_income int64
	err := row.Scan(&total_income)
	return total_income, err
}

const listSalesOrders = `-- name: ListSalesOrders :many
SELECT id, code, buyer_id, seller_id, items_subtotal, delivery_fee, total_amount, status, payment_method, type, note, is_packaged, packaging_image_urls, canceled_by, canceled_reason, created_at, updated_at, completed_at
FROM orders
WHERE seller_id = $1
  AND type != 'exchange'
  AND status = COALESCE($2::order_status, status)
ORDER BY updated_at DESC, created_at DESC
`

type ListSalesOrdersParams struct {
	SellerID string          `json:"seller_id"`
	Status   NullOrderStatus `json:"status"`
}

func (q *Queries) ListSalesOrders(ctx context.Context, arg ListSalesOrdersParams) ([]Order, error) {
	rows, err := q.db.Query(ctx, listSalesOrders, arg.SellerID, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.BuyerID,
			&i.SellerID,
			&i.ItemsSubtotal,
			&i.DeliveryFee,
			&i.TotalAmount,
			&i.Status,
			&i.PaymentMethod,
			&i.Type,
			&i.Note,
			&i.IsPackaged,
			&i.PackagingImageURLs,
			&i.CanceledBy,
			&i.CanceledReason,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSellerProfileByID = `-- name: UpdateSellerProfileByID :one
UPDATE seller_profiles
SET shop_name  = COALESCE($2, shop_name),
    updated_at = now()
WHERE seller_id = $1 RETURNING seller_id, shop_name, created_at, updated_at
`

type UpdateSellerProfileByIDParams struct {
	SellerID string  `json:"seller_id"`
	ShopName *string `json:"shop_name"`
}

func (q *Queries) UpdateSellerProfileByID(ctx context.Context, arg UpdateSellerProfileByIDParams) (SellerProfile, error) {
	row := q.db.QueryRow(ctx, updateSellerProfileByID, arg.SellerID, arg.ShopName)
	var i SellerProfile
	err := row.Scan(
		&i.SellerID,
		&i.ShopName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
