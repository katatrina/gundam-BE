// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: gundams.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccessory = `-- name: CreateAccessory :exec
INSERT INTO gundam_accessories (gundam_id,
                                name,
                                quantity)
VALUES ($1, $2, $3)
`

type CreateAccessoryParams struct {
	GundamID int64  `json:"gundam_id"`
	Name     string `json:"name"`
	Quantity int64  `json:"quantity"`
}

func (q *Queries) CreateAccessory(ctx context.Context, arg CreateAccessoryParams) error {
	_, err := q.db.Exec(ctx, createAccessory, arg.GundamID, arg.Name, arg.Quantity)
	return err
}

const createGundam = `-- name: CreateGundam :one
INSERT INTO gundams (owner_id,
                     name,
                     slug,
                     grade_id,
                     condition,
                     condition_description,
                     manufacturer,
                     weight,
                     scale,
                     description,
                     price)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) RETURNING id, owner_id, name, slug, grade_id, quantity, condition, condition_description, manufacturer, weight, scale, description, price, status, created_at, updated_at, deleted_at
`

type CreateGundamParams struct {
	OwnerID              string          `json:"owner_id"`
	Name                 string          `json:"name"`
	Slug                 string          `json:"slug"`
	GradeID              int64           `json:"grade_id"`
	Condition            GundamCondition `json:"condition"`
	ConditionDescription pgtype.Text     `json:"condition_description"`
	Manufacturer         string          `json:"manufacturer"`
	Weight               int64           `json:"weight"`
	Scale                GundamScale     `json:"scale"`
	Description          string          `json:"description"`
	Price                int64           `json:"price"`
}

func (q *Queries) CreateGundam(ctx context.Context, arg CreateGundamParams) (Gundam, error) {
	row := q.db.QueryRow(ctx, createGundam,
		arg.OwnerID,
		arg.Name,
		arg.Slug,
		arg.GradeID,
		arg.Condition,
		arg.ConditionDescription,
		arg.Manufacturer,
		arg.Weight,
		arg.Scale,
		arg.Description,
		arg.Price,
	)
	var i Gundam
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Slug,
		&i.GradeID,
		&i.Quantity,
		&i.Condition,
		&i.ConditionDescription,
		&i.Manufacturer,
		&i.Weight,
		&i.Scale,
		&i.Description,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createGundamAccessory = `-- name: CreateGundamAccessory :one
INSERT INTO gundam_accessories (name,
                                gundam_id,
                                quantity)
VALUES ($1, $2, $3) RETURNING id, name, gundam_id, quantity, created_at
`

type CreateGundamAccessoryParams struct {
	Name     string `json:"name"`
	GundamID int64  `json:"gundam_id"`
	Quantity int64  `json:"quantity"`
}

func (q *Queries) CreateGundamAccessory(ctx context.Context, arg CreateGundamAccessoryParams) (GundamAccessory, error) {
	row := q.db.QueryRow(ctx, createGundamAccessory, arg.Name, arg.GundamID, arg.Quantity)
	var i GundamAccessory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.GundamID,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const getGundamAccessories = `-- name: GetGundamAccessories :many
SELECT id, name, gundam_id, quantity, created_at
FROM gundam_accessories
WHERE gundam_id = $1
`

func (q *Queries) GetGundamAccessories(ctx context.Context, gundamID int64) ([]GundamAccessory, error) {
	rows, err := q.db.Query(ctx, getGundamAccessories, gundamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GundamAccessory{}
	for rows.Next() {
		var i GundamAccessory
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.GundamID,
			&i.Quantity,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGundamByID = `-- name: GetGundamByID :one
SELECT id, owner_id, name, slug, grade_id, quantity, condition, condition_description, manufacturer, weight, scale, description, price, status, created_at, updated_at, deleted_at
FROM gundams
WHERE id = $1
`

func (q *Queries) GetGundamByID(ctx context.Context, id int64) (Gundam, error) {
	row := q.db.QueryRow(ctx, getGundamByID, id)
	var i Gundam
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Slug,
		&i.GradeID,
		&i.Quantity,
		&i.Condition,
		&i.ConditionDescription,
		&i.Manufacturer,
		&i.Weight,
		&i.Scale,
		&i.Description,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getGundamBySlug = `-- name: GetGundamBySlug :one
SELECT g.id,
       g.owner_id,
       g.name,
       g.slug,
       gg.display_name             AS grade,
       g.condition,
       g.manufacturer,
       g.scale,
       g.weight,
       g.description,
       g.price,
       g.status,
       (SELECT array_agg(gi.url ORDER BY is_primary DESC, created_at DESC) ::TEXT[]
        FROM gundam_images gi
        WHERE gi.gundam_id = g.id) AS image_urls,
       g.created_at,
       g.updated_at
FROM gundams g
         JOIN users u ON g.owner_id = u.id
         JOIN gundam_grades gg ON g.grade_id = gg.id
WHERE g.slug = $1
  AND ($2::text IS NULL OR g.status = $2::text)
ORDER BY g.created_at DESC
`

type GetGundamBySlugParams struct {
	Slug   string      `json:"slug"`
	Status pgtype.Text `json:"status"`
}

type GetGundamBySlugRow struct {
	ID           int64           `json:"id"`
	OwnerID      string          `json:"owner_id"`
	Name         string          `json:"name"`
	Slug         string          `json:"slug"`
	Grade        string          `json:"grade"`
	Condition    GundamCondition `json:"condition"`
	Manufacturer string          `json:"manufacturer"`
	Scale        GundamScale     `json:"scale"`
	Weight       int64           `json:"weight"`
	Description  string          `json:"description"`
	Price        int64           `json:"price"`
	Status       GundamStatus    `json:"status"`
	ImageURLs    []string        `json:"image_urls"`
	CreatedAt    time.Time       `json:"created_at"`
	UpdatedAt    time.Time       `json:"updated_at"`
}

func (q *Queries) GetGundamBySlug(ctx context.Context, arg GetGundamBySlugParams) (GetGundamBySlugRow, error) {
	row := q.db.QueryRow(ctx, getGundamBySlug, arg.Slug, arg.Status)
	var i GetGundamBySlugRow
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Slug,
		&i.Grade,
		&i.Condition,
		&i.Manufacturer,
		&i.Scale,
		&i.Weight,
		&i.Description,
		&i.Price,
		&i.Status,
		&i.ImageURLs,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listGundamGrades = `-- name: ListGundamGrades :many
SELECT id, name, display_name, slug, created_at
FROM gundam_grades
`

func (q *Queries) ListGundamGrades(ctx context.Context) ([]GundamGrade, error) {
	rows, err := q.db.Query(ctx, listGundamGrades)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GundamGrade{}
	for rows.Next() {
		var i GundamGrade
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.DisplayName,
			&i.Slug,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGundamsWithFilters = `-- name: ListGundamsWithFilters :many
SELECT g.id,
       g.owner_id,
       g.name,
       g.slug,
       gg.display_name             AS grade,
       g.condition,
       g.condition_description,
       g.manufacturer,
       g.scale,
       g.description,
       g.price,
       g.status,
       g.created_at,
       g.updated_at,
       (SELECT array_agg(gi.url ORDER BY is_primary DESC, created_at DESC) ::TEXT[]
        FROM gundam_images gi
        WHERE gi.gundam_id = g.id) AS image_urls
FROM gundams g
         JOIN users u ON g.owner_id = u.id
         JOIN gundam_grades gg ON g.grade_id = gg.id
WHERE gg.slug = COALESCE($1::text, gg.slug)
  AND ($2::text IS NULL OR g.status = $2::text)
ORDER BY g.created_at DESC
`

type ListGundamsWithFiltersParams struct {
	GradeSlug pgtype.Text `json:"grade_slug"`
	Status    pgtype.Text `json:"status"`
}

type ListGundamsWithFiltersRow struct {
	ID                   int64           `json:"id"`
	OwnerID              string          `json:"owner_id"`
	Name                 string          `json:"name"`
	Slug                 string          `json:"slug"`
	Grade                string          `json:"grade"`
	Condition            GundamCondition `json:"condition"`
	ConditionDescription pgtype.Text     `json:"condition_description"`
	Manufacturer         string          `json:"manufacturer"`
	Scale                GundamScale     `json:"scale"`
	Description          string          `json:"description"`
	Price                int64           `json:"price"`
	Status               GundamStatus    `json:"status"`
	CreatedAt            time.Time       `json:"created_at"`
	UpdatedAt            time.Time       `json:"updated_at"`
	ImageURLs            []string        `json:"image_urls"`
}

func (q *Queries) ListGundamsWithFilters(ctx context.Context, arg ListGundamsWithFiltersParams) ([]ListGundamsWithFiltersRow, error) {
	rows, err := q.db.Query(ctx, listGundamsWithFilters, arg.GradeSlug, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListGundamsWithFiltersRow{}
	for rows.Next() {
		var i ListGundamsWithFiltersRow
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Name,
			&i.Slug,
			&i.Grade,
			&i.Condition,
			&i.ConditionDescription,
			&i.Manufacturer,
			&i.Scale,
			&i.Description,
			&i.Price,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ImageURLs,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const storeGundamImageURL = `-- name: StoreGundamImageURL :exec
INSERT INTO gundam_images (gundam_id,
                           url,
                           is_primary)
VALUES ($1, $2, $3)
`

type StoreGundamImageURLParams struct {
	GundamID  int64  `json:"gundam_id"`
	Url       string `json:"url"`
	IsPrimary bool   `json:"is_primary"`
}

func (q *Queries) StoreGundamImageURL(ctx context.Context, arg StoreGundamImageURLParams) error {
	_, err := q.db.Exec(ctx, storeGundamImageURL, arg.GundamID, arg.Url, arg.IsPrimary)
	return err
}

const updateGundam = `-- name: UpdateGundam :exec
UPDATE gundams
SET status = coalesce($1, status)
WHERE id = $2
`

type UpdateGundamParams struct {
	Status NullGundamStatus `json:"status"`
	ID     int64            `json:"id"`
}

func (q *Queries) UpdateGundam(ctx context.Context, arg UpdateGundamParams) error {
	_, err := q.db.Exec(ctx, updateGundam, arg.Status, arg.ID)
	return err
}
