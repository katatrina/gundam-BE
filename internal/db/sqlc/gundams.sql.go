// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: gundams.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGundam = `-- name: CreateGundam :one
INSERT INTO gundams (owner_id, name, slug, grade_id, condition, manufacturer, scale, description, price, status)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING id, owner_id, name, slug, grade_id, condition, manufacturer, scale, description, price, status, created_at, updated_at, deleted_at
`

type CreateGundamParams struct {
	OwnerID      string          `json:"owner_id"`
	Name         string          `json:"name"`
	Slug         string          `json:"slug"`
	GradeID      int64           `json:"grade_id"`
	Condition    GundamCondition `json:"condition"`
	Manufacturer string          `json:"manufacturer"`
	Scale        GundamScale     `json:"scale"`
	Description  string          `json:"description"`
	Price        int64           `json:"price"`
	Status       GundamStatus    `json:"status"`
}

func (q *Queries) CreateGundam(ctx context.Context, arg CreateGundamParams) (Gundam, error) {
	row := q.db.QueryRow(ctx, createGundam,
		arg.OwnerID,
		arg.Name,
		arg.Slug,
		arg.GradeID,
		arg.Condition,
		arg.Manufacturer,
		arg.Scale,
		arg.Description,
		arg.Price,
		arg.Status,
	)
	var i Gundam
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Slug,
		&i.GradeID,
		&i.Condition,
		&i.Manufacturer,
		&i.Scale,
		&i.Description,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getGundamBySlug = `-- name: GetGundamBySlug :one
SELECT g.id,
       g.owner_id,
       g.name,
       g.slug,
       gg.display_name             AS grade,
       g.condition,
       g.manufacturer,
       g.scale,
       g.description,
       g.price,
       g.status,
       g.created_at,
       g.updated_at,
       (SELECT array_agg(gi.url ORDER BY is_primary DESC, created_at DESC) ::TEXT[]
        FROM gundam_images gi
        WHERE gi.gundam_id = g.id) AS image_urls
FROM gundams g
         JOIN users u ON g.owner_id = u.id
         JOIN gundam_grades gg ON g.grade_id = gg.id
WHERE g.slug = $1
ORDER BY g.created_at DESC
`

type GetGundamBySlugRow struct {
	ID           int64           `json:"id"`
	OwnerID      string          `json:"owner_id"`
	Name         string          `json:"name"`
	Slug         string          `json:"slug"`
	Grade        string          `json:"grade"`
	Condition    GundamCondition `json:"condition"`
	Manufacturer string          `json:"manufacturer"`
	Scale        GundamScale     `json:"scale"`
	Description  string          `json:"description"`
	Price        int64           `json:"price"`
	Status       GundamStatus    `json:"status"`
	CreatedAt    time.Time       `json:"created_at"`
	UpdatedAt    time.Time       `json:"updated_at"`
	ImageURLs    []string        `json:"image_urls"`
}

func (q *Queries) GetGundamBySlug(ctx context.Context, slug string) (GetGundamBySlugRow, error) {
	row := q.db.QueryRow(ctx, getGundamBySlug, slug)
	var i GetGundamBySlugRow
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Slug,
		&i.Grade,
		&i.Condition,
		&i.Manufacturer,
		&i.Scale,
		&i.Description,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ImageURLs,
	)
	return i, err
}

const listGundamsWithFilters = `-- name: ListGundamsWithFilters :many
SELECT g.id,
       g.owner_id,
       g.name,
       g.slug,
       gg.display_name             AS grade,
       g.condition,
       g.manufacturer,
       g.scale,
       g.description,
       g.price,
       g.status,
       g.created_at,
       g.updated_at,
       (SELECT array_agg(gi.url ORDER BY is_primary DESC, created_at DESC) ::TEXT[]
        FROM gundam_images gi
        WHERE gi.gundam_id = g.id) AS image_urls
FROM gundams g
         JOIN users u ON g.owner_id = u.id
         JOIN gundam_grades gg ON g.grade_id = gg.id
WHERE gg.slug = COALESCE($1::text, gg.slug)
ORDER BY g.created_at DESC
`

type ListGundamsWithFiltersRow struct {
	ID           int64           `json:"id"`
	OwnerID      string          `json:"owner_id"`
	Name         string          `json:"name"`
	Slug         string          `json:"slug"`
	Grade        string          `json:"grade"`
	Condition    GundamCondition `json:"condition"`
	Manufacturer string          `json:"manufacturer"`
	Scale        GundamScale     `json:"scale"`
	Description  string          `json:"description"`
	Price        int64           `json:"price"`
	Status       GundamStatus    `json:"status"`
	CreatedAt    time.Time       `json:"created_at"`
	UpdatedAt    time.Time       `json:"updated_at"`
	ImageURLs    []string        `json:"image_urls"`
}

func (q *Queries) ListGundamsWithFilters(ctx context.Context, gradeSlug pgtype.Text) ([]ListGundamsWithFiltersRow, error) {
	rows, err := q.db.Query(ctx, listGundamsWithFilters, gradeSlug)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListGundamsWithFiltersRow{}
	for rows.Next() {
		var i ListGundamsWithFiltersRow
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Name,
			&i.Slug,
			&i.Grade,
			&i.Condition,
			&i.Manufacturer,
			&i.Scale,
			&i.Description,
			&i.Price,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ImageURLs,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
