// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: gundams.sql

package db

import (
	"context"
	"time"
)

const bulkUpdateGundamsExchanging = `-- name: BulkUpdateGundamsExchanging :exec
UPDATE gundams
SET status     = 'exchanging',
    updated_at = NOW() FROM
    (SELECT unnest($2::bigint[]) as id) as data
WHERE
    gundams.id = data.id
  AND gundams.status = 'for exchange'
  AND gundams.owner_id = $1
`

type BulkUpdateGundamsExchangingParams struct {
	OwnerID   string  `json:"owner_id"`
	GundamIds []int64 `json:"gundam_ids"`
}

func (q *Queries) BulkUpdateGundamsExchanging(ctx context.Context, arg BulkUpdateGundamsExchangingParams) error {
	_, err := q.db.Exec(ctx, bulkUpdateGundamsExchanging, arg.OwnerID, arg.GundamIds)
	return err
}

const bulkUpdateGundamsForExchange = `-- name: BulkUpdateGundamsForExchange :exec
UPDATE gundams
SET status     = 'for exchange',
    updated_at = NOW() FROM
    (SELECT unnest($2::bigint[]) as id) as data
WHERE
    gundams.id = data.id
  AND gundams.status = 'in store'
  AND gundams.owner_id = $1
`

type BulkUpdateGundamsForExchangeParams struct {
	OwnerID   string  `json:"owner_id"`
	GundamIds []int64 `json:"gundam_ids"`
}

func (q *Queries) BulkUpdateGundamsForExchange(ctx context.Context, arg BulkUpdateGundamsForExchangeParams) error {
	_, err := q.db.Exec(ctx, bulkUpdateGundamsForExchange, arg.OwnerID, arg.GundamIds)
	return err
}

const bulkUpdateGundamsInStore = `-- name: BulkUpdateGundamsInStore :exec
UPDATE gundams
SET status     = 'in store',
    updated_at = NOW() FROM
    (SELECT unnest($2::bigint[]) as id) as data
WHERE
    gundams.id = data.id
  AND gundams.status = 'for exchange'
  AND gundams.owner_id = $1
`

type BulkUpdateGundamsInStoreParams struct {
	OwnerID   string  `json:"owner_id"`
	GundamIds []int64 `json:"gundam_ids"`
}

func (q *Queries) BulkUpdateGundamsInStore(ctx context.Context, arg BulkUpdateGundamsInStoreParams) error {
	_, err := q.db.Exec(ctx, bulkUpdateGundamsInStore, arg.OwnerID, arg.GundamIds)
	return err
}

const createAccessory = `-- name: CreateAccessory :exec
INSERT INTO gundam_accessories (gundam_id,
                                name,
                                quantity)
VALUES ($1, $2, $3)
`

type CreateAccessoryParams struct {
	GundamID int64  `json:"gundam_id"`
	Name     string `json:"name"`
	Quantity int64  `json:"quantity"`
}

func (q *Queries) CreateAccessory(ctx context.Context, arg CreateAccessoryParams) error {
	_, err := q.db.Exec(ctx, createAccessory, arg.GundamID, arg.Name, arg.Quantity)
	return err
}

const createGundam = `-- name: CreateGundam :one
INSERT INTO gundams (owner_id,
                     name,
                     slug,
                     grade_id,
                     series,
                     parts_total,
                     material,
                     version,
                     quantity,
                     condition,
                     condition_description,
                     manufacturer,
                     weight,
                     scale,
                     description,
                     price,
                     release_year)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17) RETURNING id, owner_id, name, slug, grade_id, series, parts_total, material, version, quantity, condition, condition_description, manufacturer, weight, scale, description, price, release_year, status, created_at, updated_at
`

type CreateGundamParams struct {
	OwnerID              string          `json:"owner_id"`
	Name                 string          `json:"name"`
	Slug                 string          `json:"slug"`
	GradeID              int64           `json:"grade_id"`
	Series               string          `json:"series"`
	PartsTotal           int64           `json:"parts_total"`
	Material             string          `json:"material"`
	Version              string          `json:"version"`
	Quantity             int64           `json:"quantity"`
	Condition            GundamCondition `json:"condition"`
	ConditionDescription *string         `json:"condition_description"`
	Manufacturer         string          `json:"manufacturer"`
	Weight               int64           `json:"weight"`
	Scale                GundamScale     `json:"scale"`
	Description          string          `json:"description"`
	Price                *int64          `json:"price"`
	ReleaseYear          *int64          `json:"release_year"`
}

func (q *Queries) CreateGundam(ctx context.Context, arg CreateGundamParams) (Gundam, error) {
	row := q.db.QueryRow(ctx, createGundam,
		arg.OwnerID,
		arg.Name,
		arg.Slug,
		arg.GradeID,
		arg.Series,
		arg.PartsTotal,
		arg.Material,
		arg.Version,
		arg.Quantity,
		arg.Condition,
		arg.ConditionDescription,
		arg.Manufacturer,
		arg.Weight,
		arg.Scale,
		arg.Description,
		arg.Price,
		arg.ReleaseYear,
	)
	var i Gundam
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Slug,
		&i.GradeID,
		&i.Series,
		&i.PartsTotal,
		&i.Material,
		&i.Version,
		&i.Quantity,
		&i.Condition,
		&i.ConditionDescription,
		&i.Manufacturer,
		&i.Weight,
		&i.Scale,
		&i.Description,
		&i.Price,
		&i.ReleaseYear,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createGundamAccessory = `-- name: CreateGundamAccessory :one
INSERT INTO gundam_accessories (name,
                                gundam_id,
                                quantity)
VALUES ($1, $2, $3) RETURNING id, name, gundam_id, quantity, created_at
`

type CreateGundamAccessoryParams struct {
	Name     string `json:"name"`
	GundamID int64  `json:"gundam_id"`
	Quantity int64  `json:"quantity"`
}

func (q *Queries) CreateGundamAccessory(ctx context.Context, arg CreateGundamAccessoryParams) (GundamAccessory, error) {
	row := q.db.QueryRow(ctx, createGundamAccessory, arg.Name, arg.GundamID, arg.Quantity)
	var i GundamAccessory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.GundamID,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const deleteGundam = `-- name: DeleteGundam :exec
DELETE
FROM gundams
WHERE id = $1
  AND owner_id = $2
`

type DeleteGundamParams struct {
	ID      int64  `json:"id"`
	OwnerID string `json:"owner_id"`
}

func (q *Queries) DeleteGundam(ctx context.Context, arg DeleteGundamParams) error {
	_, err := q.db.Exec(ctx, deleteGundam, arg.ID, arg.OwnerID)
	return err
}

const getGundamAccessories = `-- name: GetGundamAccessories :many
SELECT id, name, gundam_id, quantity, created_at
FROM gundam_accessories
WHERE gundam_id = $1
`

func (q *Queries) GetGundamAccessories(ctx context.Context, gundamID int64) ([]GundamAccessory, error) {
	rows, err := q.db.Query(ctx, getGundamAccessories, gundamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GundamAccessory{}
	for rows.Next() {
		var i GundamAccessory
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.GundamID,
			&i.Quantity,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGundamByID = `-- name: GetGundamByID :one
SELECT id, owner_id, name, slug, grade_id, series, parts_total, material, version, quantity, condition, condition_description, manufacturer, weight, scale, description, price, release_year, status, created_at, updated_at
FROM gundams
WHERE id = $1
`

func (q *Queries) GetGundamByID(ctx context.Context, id int64) (Gundam, error) {
	row := q.db.QueryRow(ctx, getGundamByID, id)
	var i Gundam
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Slug,
		&i.GradeID,
		&i.Series,
		&i.PartsTotal,
		&i.Material,
		&i.Version,
		&i.Quantity,
		&i.Condition,
		&i.ConditionDescription,
		&i.Manufacturer,
		&i.Weight,
		&i.Scale,
		&i.Description,
		&i.Price,
		&i.ReleaseYear,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGundamBySlug = `-- name: GetGundamBySlug :one
SELECT g.id            AS gundam_id,
       g.owner_id,
       g.name,
       g.slug,
       gg.display_name AS grade,
       g.series,
       g.parts_total,
       g.material,
       g.version,
       g.quantity,
       g.condition,
       g.condition_description,
       g.manufacturer,
       g.scale,
       g.weight,
       g.description,
       g.price,
       g.release_year,
       g.status,
       g.created_at,
       g.updated_at
FROM gundams g
         JOIN gundam_grades gg ON g.grade_id = gg.id
WHERE g.slug = $1
  AND ($2::text IS NULL OR g.status = $2::gundam_status)
`

type GetGundamBySlugParams struct {
	Slug   string  `json:"slug"`
	Status *string `json:"status"`
}

type GetGundamBySlugRow struct {
	GundamID             int64           `json:"gundam_id"`
	OwnerID              string          `json:"owner_id"`
	Name                 string          `json:"name"`
	Slug                 string          `json:"slug"`
	Grade                string          `json:"grade"`
	Series               string          `json:"series"`
	PartsTotal           int64           `json:"parts_total"`
	Material             string          `json:"material"`
	Version              string          `json:"version"`
	Quantity             int64           `json:"quantity"`
	Condition            GundamCondition `json:"condition"`
	ConditionDescription *string         `json:"condition_description"`
	Manufacturer         string          `json:"manufacturer"`
	Scale                GundamScale     `json:"scale"`
	Weight               int64           `json:"weight"`
	Description          string          `json:"description"`
	Price                *int64          `json:"price"`
	ReleaseYear          *int64          `json:"release_year"`
	Status               GundamStatus    `json:"status"`
	CreatedAt            time.Time       `json:"created_at"`
	UpdatedAt            time.Time       `json:"updated_at"`
}

func (q *Queries) GetGundamBySlug(ctx context.Context, arg GetGundamBySlugParams) (GetGundamBySlugRow, error) {
	row := q.db.QueryRow(ctx, getGundamBySlug, arg.Slug, arg.Status)
	var i GetGundamBySlugRow
	err := row.Scan(
		&i.GundamID,
		&i.OwnerID,
		&i.Name,
		&i.Slug,
		&i.Grade,
		&i.Series,
		&i.PartsTotal,
		&i.Material,
		&i.Version,
		&i.Quantity,
		&i.Condition,
		&i.ConditionDescription,
		&i.Manufacturer,
		&i.Scale,
		&i.Weight,
		&i.Description,
		&i.Price,
		&i.ReleaseYear,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listGundamGrades = `-- name: ListGundamGrades :many
SELECT id, name, display_name, slug, created_at
FROM gundam_grades
`

func (q *Queries) ListGundamGrades(ctx context.Context) ([]GundamGrade, error) {
	rows, err := q.db.Query(ctx, listGundamGrades)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GundamGrade{}
	for rows.Next() {
		var i GundamGrade
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.DisplayName,
			&i.Slug,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGundamsByUserID = `-- name: ListGundamsByUserID :many
SELECT g.id, g.owner_id, g.name, g.slug, g.grade_id, g.series, g.parts_total, g.material, g.version, g.quantity, g.condition, g.condition_description, g.manufacturer, g.weight, g.scale, g.description, g.price, g.release_year, g.status, g.created_at, g.updated_at,
       gg.display_name AS grade
FROM gundams g
         JOIN gundam_grades gg ON g.grade_id = gg.id
WHERE owner_id = $1
  AND ($2::text IS NULL OR g.name ILIKE concat('%', $2::text, '%'))
ORDER BY g.created_at DESC, g.updated_at DESC
`

type ListGundamsByUserIDParams struct {
	OwnerID string  `json:"owner_id"`
	Name    *string `json:"name"`
}

type ListGundamsByUserIDRow struct {
	ID                   int64           `json:"id"`
	OwnerID              string          `json:"owner_id"`
	Name                 string          `json:"name"`
	Slug                 string          `json:"slug"`
	GradeID              int64           `json:"grade_id"`
	Series               string          `json:"series"`
	PartsTotal           int64           `json:"parts_total"`
	Material             string          `json:"material"`
	Version              string          `json:"version"`
	Quantity             int64           `json:"quantity"`
	Condition            GundamCondition `json:"condition"`
	ConditionDescription *string         `json:"condition_description"`
	Manufacturer         string          `json:"manufacturer"`
	Weight               int64           `json:"weight"`
	Scale                GundamScale     `json:"scale"`
	Description          string          `json:"description"`
	Price                *int64          `json:"price"`
	ReleaseYear          *int64          `json:"release_year"`
	Status               GundamStatus    `json:"status"`
	CreatedAt            time.Time       `json:"created_at"`
	UpdatedAt            time.Time       `json:"updated_at"`
	Grade                string          `json:"grade"`
}

func (q *Queries) ListGundamsByUserID(ctx context.Context, arg ListGundamsByUserIDParams) ([]ListGundamsByUserIDRow, error) {
	rows, err := q.db.Query(ctx, listGundamsByUserID, arg.OwnerID, arg.Name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListGundamsByUserIDRow{}
	for rows.Next() {
		var i ListGundamsByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Name,
			&i.Slug,
			&i.GradeID,
			&i.Series,
			&i.PartsTotal,
			&i.Material,
			&i.Version,
			&i.Quantity,
			&i.Condition,
			&i.ConditionDescription,
			&i.Manufacturer,
			&i.Weight,
			&i.Scale,
			&i.Description,
			&i.Price,
			&i.ReleaseYear,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Grade,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGundamsWithFilters = `-- name: ListGundamsWithFilters :many
SELECT g.id            AS gundam_id,
       g.owner_id,
       g.name,
       g.slug,
       gg.display_name AS grade,
       g.series,
       g.parts_total,
       g.material,
       g.version,
       g.quantity,
       g.condition,
       g.condition_description,
       g.manufacturer,
       g.scale,
       g.weight,
       g.description,
       g.price,
       g.release_year,
       g.status,
       g.created_at,
       g.updated_at
FROM gundams g
         JOIN gundam_grades gg ON g.grade_id = gg.id
WHERE ($1::text IS NULL OR g.name ILIKE '%' || $1::text || '%')
  AND gg.slug = COALESCE($2::text, gg.slug)
  AND ($3::text IS NULL OR g.status = $3::gundam_status)
ORDER BY g.created_at DESC
`

type ListGundamsWithFiltersParams struct {
	Name      *string `json:"name"`
	GradeSlug *string `json:"grade_slug"`
	Status    *string `json:"status"`
}

type ListGundamsWithFiltersRow struct {
	GundamID             int64           `json:"gundam_id"`
	OwnerID              string          `json:"owner_id"`
	Name                 string          `json:"name"`
	Slug                 string          `json:"slug"`
	Grade                string          `json:"grade"`
	Series               string          `json:"series"`
	PartsTotal           int64           `json:"parts_total"`
	Material             string          `json:"material"`
	Version              string          `json:"version"`
	Quantity             int64           `json:"quantity"`
	Condition            GundamCondition `json:"condition"`
	ConditionDescription *string         `json:"condition_description"`
	Manufacturer         string          `json:"manufacturer"`
	Scale                GundamScale     `json:"scale"`
	Weight               int64           `json:"weight"`
	Description          string          `json:"description"`
	Price                *int64          `json:"price"`
	ReleaseYear          *int64          `json:"release_year"`
	Status               GundamStatus    `json:"status"`
	CreatedAt            time.Time       `json:"created_at"`
	UpdatedAt            time.Time       `json:"updated_at"`
}

func (q *Queries) ListGundamsWithFilters(ctx context.Context, arg ListGundamsWithFiltersParams) ([]ListGundamsWithFiltersRow, error) {
	rows, err := q.db.Query(ctx, listGundamsWithFilters, arg.Name, arg.GradeSlug, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListGundamsWithFiltersRow{}
	for rows.Next() {
		var i ListGundamsWithFiltersRow
		if err := rows.Scan(
			&i.GundamID,
			&i.OwnerID,
			&i.Name,
			&i.Slug,
			&i.Grade,
			&i.Series,
			&i.PartsTotal,
			&i.Material,
			&i.Version,
			&i.Quantity,
			&i.Condition,
			&i.ConditionDescription,
			&i.Manufacturer,
			&i.Scale,
			&i.Weight,
			&i.Description,
			&i.Price,
			&i.ReleaseYear,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const storeGundamImageURL = `-- name: StoreGundamImageURL :exec
INSERT INTO gundam_images (gundam_id,
                           url,
                           is_primary)
VALUES ($1, $2, $3)
`

type StoreGundamImageURLParams struct {
	GundamID  int64  `json:"gundam_id"`
	URL       string `json:"url"`
	IsPrimary bool   `json:"is_primary"`
}

func (q *Queries) StoreGundamImageURL(ctx context.Context, arg StoreGundamImageURLParams) error {
	_, err := q.db.Exec(ctx, storeGundamImageURL, arg.GundamID, arg.URL, arg.IsPrimary)
	return err
}

const updateGundam = `-- name: UpdateGundam :exec
UPDATE gundams
SET owner_id              = coalesce($1, owner_id),
    name                  = coalesce($2, name),
    grade_id              = coalesce($3, grade_id),
    series                = coalesce($4, series),
    parts_total           = coalesce($5, parts_total),
    material              = coalesce($6, material),
    version               = coalesce($7, version),
    quantity              = coalesce($8, quantity),
    condition             = coalesce($9, condition),
    condition_description = coalesce($10, condition_description),
    manufacturer          = coalesce($11, manufacturer),
    weight                = coalesce($12, weight),
    scale                 = coalesce($13, scale),
    description           = coalesce($14, description),
    price                 = coalesce($15, price),
    release_year          = coalesce($16, release_year),
    status                = coalesce($17, status),
    updated_at            = now()
WHERE id = $18
`

type UpdateGundamParams struct {
	OwnerID              *string             `json:"owner_id"`
	Name                 *string             `json:"name"`
	GradeID              *int64              `json:"grade_id"`
	Series               *string             `json:"series"`
	PartsTotal           *int64              `json:"parts_total"`
	Material             *string             `json:"material"`
	Version              *string             `json:"version"`
	Quantity             *int64              `json:"quantity"`
	Condition            NullGundamCondition `json:"condition"`
	ConditionDescription *string             `json:"condition_description"`
	Manufacturer         *string             `json:"manufacturer"`
	Weight               *int64              `json:"weight"`
	Scale                NullGundamScale     `json:"scale"`
	Description          *string             `json:"description"`
	Price                *int64              `json:"price"`
	ReleaseYear          *int64              `json:"release_year"`
	Status               NullGundamStatus    `json:"status"`
	ID                   int64               `json:"id"`
}

func (q *Queries) UpdateGundam(ctx context.Context, arg UpdateGundamParams) error {
	_, err := q.db.Exec(ctx, updateGundam,
		arg.OwnerID,
		arg.Name,
		arg.GradeID,
		arg.Series,
		arg.PartsTotal,
		arg.Material,
		arg.Version,
		arg.Quantity,
		arg.Condition,
		arg.ConditionDescription,
		arg.Manufacturer,
		arg.Weight,
		arg.Scale,
		arg.Description,
		arg.Price,
		arg.ReleaseYear,
		arg.Status,
		arg.ID,
	)
	return err
}
