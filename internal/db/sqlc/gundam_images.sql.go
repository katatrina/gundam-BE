// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: gundam_images.sql

package db

import (
	"context"
)

const getGundamPrimaryImageURL = `-- name: GetGundamPrimaryImageURL :one
SELECT url
FROM gundam_images
WHERE gundam_id = $1
  AND is_primary = true
`

func (q *Queries) GetGundamPrimaryImageURL(ctx context.Context, gundamID int64) (string, error) {
	row := q.db.QueryRow(ctx, getGundamPrimaryImageURL, gundamID)
	var url string
	err := row.Scan(&url)
	return url, err
}

const getGundamSecondaryImageURLs = `-- name: GetGundamSecondaryImageURLs :many
SELECT url
FROM gundam_images
WHERE gundam_id = $1
  AND is_primary = false
ORDER BY created_at DESC
`

func (q *Queries) GetGundamSecondaryImageURLs(ctx context.Context, gundamID int64) ([]string, error) {
	rows, err := q.db.Query(ctx, getGundamSecondaryImageURLs, gundamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var url string
		if err := rows.Scan(&url); err != nil {
			return nil, err
		}
		items = append(items, url)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGundamPrimaryImage = `-- name: UpdateGundamPrimaryImage :exec
UPDATE gundam_images
SET url = $2
WHERE gundam_id = $1
  AND is_primary = true
`

type UpdateGundamPrimaryImageParams struct {
	GundamID int64  `json:"gundam_id"`
	URL      string `json:"url"`
}

func (q *Queries) UpdateGundamPrimaryImage(ctx context.Context, arg UpdateGundamPrimaryImageParams) error {
	_, err := q.db.Exec(ctx, updateGundamPrimaryImage, arg.GundamID, arg.URL)
	return err
}
