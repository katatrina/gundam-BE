// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: wallet_entries.sql

package db

import (
	"context"
	"time"
)

const createWalletEntry = `-- name: CreateWalletEntry :one
INSERT INTO wallet_entries (wallet_id,
                            reference_id,
                            reference_type,
                            entry_type,
                            affected_field,
                            amount,
                            status,
                            completed_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id, wallet_id, reference_id, reference_type, entry_type, affected_field, amount, status, created_at, updated_at, completed_at
`

type CreateWalletEntryParams struct {
	WalletID      string              `json:"wallet_id"`
	ReferenceID   *string             `json:"reference_id"`
	ReferenceType WalletReferenceType `json:"reference_type"`
	EntryType     WalletEntryType     `json:"entry_type"`
	AffectedField WalletAffectedField `json:"affected_field"`
	Amount        int64               `json:"amount"`
	Status        WalletEntryStatus   `json:"status"`
	CompletedAt   *time.Time          `json:"completed_at"`
}

func (q *Queries) CreateWalletEntry(ctx context.Context, arg CreateWalletEntryParams) (WalletEntry, error) {
	row := q.db.QueryRow(ctx, createWalletEntry,
		arg.WalletID,
		arg.ReferenceID,
		arg.ReferenceType,
		arg.EntryType,
		arg.AffectedField,
		arg.Amount,
		arg.Status,
		arg.CompletedAt,
	)
	var i WalletEntry
	err := row.Scan(
		&i.ID,
		&i.WalletID,
		&i.ReferenceID,
		&i.ReferenceType,
		&i.EntryType,
		&i.AffectedField,
		&i.Amount,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompletedAt,
	)
	return i, err
}

const getPendingExchangeCompensationEntry = `-- name: GetPendingExchangeCompensationEntry :one
SELECT id, wallet_id, reference_id, reference_type, entry_type, affected_field, amount, status, created_at, updated_at, completed_at
FROM wallet_entries
WHERE reference_id = $1
  AND reference_type = 'exchange'
  AND entry_type = 'exchange_compensation_transfer'
  AND status = 'pending'
  AND wallet_id = $2 LIMIT 1
`

type GetPendingExchangeCompensationEntryParams struct {
	ReferenceID *string `json:"reference_id"`
	WalletID    string  `json:"wallet_id"`
}

func (q *Queries) GetPendingExchangeCompensationEntry(ctx context.Context, arg GetPendingExchangeCompensationEntryParams) (WalletEntry, error) {
	row := q.db.QueryRow(ctx, getPendingExchangeCompensationEntry, arg.ReferenceID, arg.WalletID)
	var i WalletEntry
	err := row.Scan(
		&i.ID,
		&i.WalletID,
		&i.ReferenceID,
		&i.ReferenceType,
		&i.EntryType,
		&i.AffectedField,
		&i.Amount,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompletedAt,
	)
	return i, err
}

const getWalletEntryByID = `-- name: GetWalletEntryByID :one
SELECT id, wallet_id, reference_id, reference_type, entry_type, affected_field, amount, status, created_at, updated_at, completed_at
FROM wallet_entries
WHERE id = $1
`

func (q *Queries) GetWalletEntryByID(ctx context.Context, id int64) (WalletEntry, error) {
	row := q.db.QueryRow(ctx, getWalletEntryByID, id)
	var i WalletEntry
	err := row.Scan(
		&i.ID,
		&i.WalletID,
		&i.ReferenceID,
		&i.ReferenceType,
		&i.EntryType,
		&i.AffectedField,
		&i.Amount,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompletedAt,
	)
	return i, err
}

const listUserWalletEntries = `-- name: ListUserWalletEntries :many
SELECT id, wallet_id, reference_id, reference_type, entry_type, affected_field, amount, status, created_at, updated_at, completed_at
FROM wallet_entries
WHERE wallet_id = $1
  AND status = COALESCE($2, status)
ORDER BY created_at DESC
`

type ListUserWalletEntriesParams struct {
	WalletID string                `json:"wallet_id"`
	Status   NullWalletEntryStatus `json:"status"`
}

func (q *Queries) ListUserWalletEntries(ctx context.Context, arg ListUserWalletEntriesParams) ([]WalletEntry, error) {
	rows, err := q.db.Query(ctx, listUserWalletEntries, arg.WalletID, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WalletEntry{}
	for rows.Next() {
		var i WalletEntry
		if err := rows.Scan(
			&i.ID,
			&i.WalletID,
			&i.ReferenceID,
			&i.ReferenceType,
			&i.EntryType,
			&i.AffectedField,
			&i.Amount,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWalletEntryByID = `-- name: UpdateWalletEntryByID :one
UPDATE wallet_entries
SET status       = COALESCE($1, status),
    completed_at = COALESCE($2, completed_at),
    updated_at   = now()
WHERE id = $3 RETURNING id, wallet_id, reference_id, reference_type, entry_type, affected_field, amount, status, created_at, updated_at, completed_at
`

type UpdateWalletEntryByIDParams struct {
	Status      NullWalletEntryStatus `json:"status"`
	CompletedAt *time.Time            `json:"completed_at"`
	ID          int64                 `json:"id"`
}

func (q *Queries) UpdateWalletEntryByID(ctx context.Context, arg UpdateWalletEntryByIDParams) (WalletEntry, error) {
	row := q.db.QueryRow(ctx, updateWalletEntryByID, arg.Status, arg.CompletedAt, arg.ID)
	var i WalletEntry
	err := row.Scan(
		&i.ID,
		&i.WalletID,
		&i.ReferenceID,
		&i.ReferenceType,
		&i.EntryType,
		&i.AffectedField,
		&i.Amount,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompletedAt,
	)
	return i, err
}
