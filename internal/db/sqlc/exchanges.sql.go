// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: exchanges.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createExchange = `-- name: CreateExchange :one
INSERT INTO exchanges (id,
                       poster_id,
                       offerer_id,
                       payer_id,
                       compensation_amount,
                       status)
VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, poster_id, offerer_id, poster_order_id, offerer_order_id, poster_from_delivery_id, poster_to_delivery_id, offerer_from_delivery_id, offerer_to_delivery_id, poster_delivery_fee_paid, offerer_delivery_fee_paid, payer_id, compensation_amount, status, canceled_by, canceled_reason, created_at, updated_at, completed_at
`

type CreateExchangeParams struct {
	ID                 uuid.UUID      `json:"id"`
	PosterID           string         `json:"poster_id"`
	OffererID          string         `json:"offerer_id"`
	PayerID            *string        `json:"payer_id"`
	CompensationAmount *int64         `json:"compensation_amount"`
	Status             ExchangeStatus `json:"status"`
}

func (q *Queries) CreateExchange(ctx context.Context, arg CreateExchangeParams) (Exchange, error) {
	row := q.db.QueryRow(ctx, createExchange,
		arg.ID,
		arg.PosterID,
		arg.OffererID,
		arg.PayerID,
		arg.CompensationAmount,
		arg.Status,
	)
	var i Exchange
	err := row.Scan(
		&i.ID,
		&i.PosterID,
		&i.OffererID,
		&i.PosterOrderID,
		&i.OffererOrderID,
		&i.PosterFromDeliveryID,
		&i.PosterToDeliveryID,
		&i.OffererFromDeliveryID,
		&i.OffererToDeliveryID,
		&i.PosterDeliveryFeePaid,
		&i.OffererDeliveryFeePaid,
		&i.PayerID,
		&i.CompensationAmount,
		&i.Status,
		&i.CanceledBy,
		&i.CanceledReason,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompletedAt,
	)
	return i, err
}
