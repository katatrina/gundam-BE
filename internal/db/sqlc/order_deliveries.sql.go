// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: order_deliveries.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrderDelivery = `-- name: CreateOrderDelivery :one
INSERT INTO order_deliveries (order_id,
                              ghn_order_code,
                              expected_delivery_time,
                              status,
                              overall_status,
                              from_delivery_id,
                              to_delivery_id)
VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, order_id, ghn_order_code, expected_delivery_time, expected_pickup_time, status, overall_status, from_delivery_id, to_delivery_id, created_at, updated_at
`

type CreateOrderDeliveryParams struct {
	OrderID              string                    `json:"order_id"`
	GhnOrderCode         pgtype.Text               `json:"ghn_order_code"`
	ExpectedDeliveryTime time.Time                 `json:"expected_delivery_time"`
	Status               pgtype.Text               `json:"status"`
	OverallStatus        NullDeliveryOverralStatus `json:"overall_status"`
	FromDeliveryID       int64                     `json:"from_delivery_id"`
	ToDeliveryID         int64                     `json:"to_delivery_id"`
}

func (q *Queries) CreateOrderDelivery(ctx context.Context, arg CreateOrderDeliveryParams) (OrderDelivery, error) {
	row := q.db.QueryRow(ctx, createOrderDelivery,
		arg.OrderID,
		arg.GhnOrderCode,
		arg.ExpectedDeliveryTime,
		arg.Status,
		arg.OverallStatus,
		arg.FromDeliveryID,
		arg.ToDeliveryID,
	)
	var i OrderDelivery
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.GhnOrderCode,
		&i.ExpectedDeliveryTime,
		&i.ExpectedPickupTime,
		&i.Status,
		&i.OverallStatus,
		&i.FromDeliveryID,
		&i.ToDeliveryID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderDelivery = `-- name: GetOrderDelivery :one
SELECT id, order_id, ghn_order_code, expected_delivery_time, expected_pickup_time, status, overall_status, from_delivery_id, to_delivery_id, created_at, updated_at
FROM order_deliveries
WHERE order_id = $1
`

func (q *Queries) GetOrderDelivery(ctx context.Context, orderID string) (OrderDelivery, error) {
	row := q.db.QueryRow(ctx, getOrderDelivery, orderID)
	var i OrderDelivery
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.GhnOrderCode,
		&i.ExpectedDeliveryTime,
		&i.ExpectedPickupTime,
		&i.Status,
		&i.OverallStatus,
		&i.FromDeliveryID,
		&i.ToDeliveryID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateOrderDelivery = `-- name: UpdateOrderDelivery :one
UPDATE order_deliveries
SET ghn_order_code         = COALESCE($1, ghn_order_code),
    expected_delivery_time = COALESCE($2, expected_delivery_time),
    status                 = COALESCE($3, status),
    overall_status         = COALESCE($4, overall_status),
    from_delivery_id       = COALESCE($5, from_delivery_id),
    to_delivery_id         = COALESCE($6, to_delivery_id),
    updated_at             = now()
WHERE id = $7 RETURNING id, order_id, ghn_order_code, expected_delivery_time, expected_pickup_time, status, overall_status, from_delivery_id, to_delivery_id, created_at, updated_at
`

type UpdateOrderDeliveryParams struct {
	GhnOrderCode         pgtype.Text               `json:"ghn_order_code"`
	ExpectedDeliveryTime pgtype.Timestamptz        `json:"expected_delivery_time"`
	Status               pgtype.Text               `json:"status"`
	OverallStatus        NullDeliveryOverralStatus `json:"overall_status"`
	FromDeliveryID       pgtype.Int8               `json:"from_delivery_id"`
	ToDeliveryID         pgtype.Int8               `json:"to_delivery_id"`
	ID                   int64                     `json:"id"`
}

func (q *Queries) UpdateOrderDelivery(ctx context.Context, arg UpdateOrderDeliveryParams) (OrderDelivery, error) {
	row := q.db.QueryRow(ctx, updateOrderDelivery,
		arg.GhnOrderCode,
		arg.ExpectedDeliveryTime,
		arg.Status,
		arg.OverallStatus,
		arg.FromDeliveryID,
		arg.ToDeliveryID,
		arg.ID,
	)
	var i OrderDelivery
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.GhnOrderCode,
		&i.ExpectedDeliveryTime,
		&i.ExpectedPickupTime,
		&i.Status,
		&i.OverallStatus,
		&i.FromDeliveryID,
		&i.ToDeliveryID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
