// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: order_deliveries.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createOrderDelivery = `-- name: CreateOrderDelivery :one
INSERT INTO order_deliveries (order_id,
                              delivery_tracking_code,
                              expected_delivery_time,
                              status,
                              overall_status,
                              from_delivery_id,
                              to_delivery_id)
VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, order_id, delivery_tracking_code, expected_delivery_time, status, overall_status, from_delivery_id, to_delivery_id, created_at, updated_at
`

type CreateOrderDeliveryParams struct {
	OrderID              uuid.UUID                 `json:"order_id"`
	DeliveryTrackingCode *string                   `json:"delivery_tracking_code"`
	ExpectedDeliveryTime time.Time                 `json:"expected_delivery_time"`
	Status               *string                   `json:"status"`
	OverallStatus        NullDeliveryOverralStatus `json:"overall_status"`
	FromDeliveryID       int64                     `json:"from_delivery_id"`
	ToDeliveryID         int64                     `json:"to_delivery_id"`
}

func (q *Queries) CreateOrderDelivery(ctx context.Context, arg CreateOrderDeliveryParams) (OrderDelivery, error) {
	row := q.db.QueryRow(ctx, createOrderDelivery,
		arg.OrderID,
		arg.DeliveryTrackingCode,
		arg.ExpectedDeliveryTime,
		arg.Status,
		arg.OverallStatus,
		arg.FromDeliveryID,
		arg.ToDeliveryID,
	)
	var i OrderDelivery
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.DeliveryTrackingCode,
		&i.ExpectedDeliveryTime,
		&i.Status,
		&i.OverallStatus,
		&i.FromDeliveryID,
		&i.ToDeliveryID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getActiveOrderDeliveries = `-- name: GetActiveOrderDeliveries :many
SELECT od.id,
       o.id AS order_id,
       o.code AS order_code,
       o.buyer_id,
       o.seller_id,
       o.items_subtotal,
       od.status,
       od.overall_status,
       od.from_delivery_id,
       od.to_delivery_id,
       od.delivery_tracking_code,
       od.expected_delivery_time,
       od.created_at,
       od.updated_at
FROM order_deliveries od
         JOIN orders o ON od.order_id = o.id
WHERE od.overall_status IN ('picking', 'delivering')
  AND od.status IS NOT NULL
  AND od.delivery_tracking_code IS NOT NULL
  AND od.updated_at > NOW() - INTERVAL '30 days'
ORDER BY od.created_at DESC
LIMIT 100
`

type GetActiveOrderDeliveriesRow struct {
	ID                   int64                     `json:"id"`
	OrderID              uuid.UUID                 `json:"order_id"`
	OrderCode            string                    `json:"order_code"`
	BuyerID              string                    `json:"buyer_id"`
	SellerID             string                    `json:"seller_id"`
	ItemsSubtotal        int64                     `json:"items_subtotal"`
	Status               *string                   `json:"status"`
	OverallStatus        NullDeliveryOverralStatus `json:"overall_status"`
	FromDeliveryID       int64                     `json:"from_delivery_id"`
	ToDeliveryID         int64                     `json:"to_delivery_id"`
	DeliveryTrackingCode *string                   `json:"delivery_tracking_code"`
	ExpectedDeliveryTime time.Time                 `json:"expected_delivery_time"`
	CreatedAt            time.Time                 `json:"created_at"`
	UpdatedAt            time.Time                 `json:"updated_at"`
}

func (q *Queries) GetActiveOrderDeliveries(ctx context.Context) ([]GetActiveOrderDeliveriesRow, error) {
	rows, err := q.db.Query(ctx, getActiveOrderDeliveries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetActiveOrderDeliveriesRow{}
	for rows.Next() {
		var i GetActiveOrderDeliveriesRow
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.OrderCode,
			&i.BuyerID,
			&i.SellerID,
			&i.ItemsSubtotal,
			&i.Status,
			&i.OverallStatus,
			&i.FromDeliveryID,
			&i.ToDeliveryID,
			&i.DeliveryTrackingCode,
			&i.ExpectedDeliveryTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderDelivery = `-- name: GetOrderDelivery :one
SELECT id, order_id, delivery_tracking_code, expected_delivery_time, status, overall_status, from_delivery_id, to_delivery_id, created_at, updated_at
FROM order_deliveries
WHERE order_id = $1
`

func (q *Queries) GetOrderDelivery(ctx context.Context, orderID uuid.UUID) (OrderDelivery, error) {
	row := q.db.QueryRow(ctx, getOrderDelivery, orderID)
	var i OrderDelivery
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.DeliveryTrackingCode,
		&i.ExpectedDeliveryTime,
		&i.Status,
		&i.OverallStatus,
		&i.FromDeliveryID,
		&i.ToDeliveryID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateOrderDelivery = `-- name: UpdateOrderDelivery :one
UPDATE order_deliveries
SET delivery_tracking_code = COALESCE($1, delivery_tracking_code),
    expected_delivery_time = COALESCE($2, expected_delivery_time),
    status                 = COALESCE($3, status),
    overall_status         = COALESCE($4, overall_status),
    from_delivery_id       = COALESCE($5, from_delivery_id),
    to_delivery_id         = COALESCE($6, to_delivery_id),
    updated_at             = now()
WHERE id = $7 RETURNING id, order_id, delivery_tracking_code, expected_delivery_time, status, overall_status, from_delivery_id, to_delivery_id, created_at, updated_at
`

type UpdateOrderDeliveryParams struct {
	DeliveryTrackingCode *string                   `json:"delivery_tracking_code"`
	ExpectedDeliveryTime pgtype.Timestamptz        `json:"expected_delivery_time"`
	Status               *string                   `json:"status"`
	OverallStatus        NullDeliveryOverralStatus `json:"overall_status"`
	FromDeliveryID       *int64                    `json:"from_delivery_id"`
	ToDeliveryID         *int64                    `json:"to_delivery_id"`
	ID                   int64                     `json:"id"`
}

func (q *Queries) UpdateOrderDelivery(ctx context.Context, arg UpdateOrderDeliveryParams) (OrderDelivery, error) {
	row := q.db.QueryRow(ctx, updateOrderDelivery,
		arg.DeliveryTrackingCode,
		arg.ExpectedDeliveryTime,
		arg.Status,
		arg.OverallStatus,
		arg.FromDeliveryID,
		arg.ToDeliveryID,
		arg.ID,
	)
	var i OrderDelivery
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.DeliveryTrackingCode,
		&i.ExpectedDeliveryTime,
		&i.Status,
		&i.OverallStatus,
		&i.FromDeliveryID,
		&i.ToDeliveryID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
