// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: order_deliveries.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrderDelivery = `-- name: CreateOrderDelivery :one
INSERT INTO order_deliveries (order_id,
                              ghn_order_code,
                              expected_delivery_time,
                              status,
                              overall_status,
                              "fromID",
                              "toID")
VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, order_id, ghn_order_code, expected_delivery_time, status, overall_status, "fromID", "toID", created_at, updated_at
`

type CreateOrderDeliveryParams struct {
	OrderID              string                    `json:"order_id"`
	GhnOrderCode         pgtype.Text               `json:"ghn_order_code"`
	ExpectedDeliveryTime time.Time                 `json:"expected_delivery_time"`
	Status               pgtype.Text               `json:"status"`
	OverallStatus        NullDeliveryOverralStatus `json:"overall_status"`
	FromID               int64                     `json:"fromID"`
	ToID                 int64                     `json:"toID"`
}

func (q *Queries) CreateOrderDelivery(ctx context.Context, arg CreateOrderDeliveryParams) (OrderDelivery, error) {
	row := q.db.QueryRow(ctx, createOrderDelivery,
		arg.OrderID,
		arg.GhnOrderCode,
		arg.ExpectedDeliveryTime,
		arg.Status,
		arg.OverallStatus,
		arg.FromID,
		arg.ToID,
	)
	var i OrderDelivery
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.GhnOrderCode,
		&i.ExpectedDeliveryTime,
		&i.Status,
		&i.OverallStatus,
		&i.FromID,
		&i.ToID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
