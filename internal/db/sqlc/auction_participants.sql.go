// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: auction_participants.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createAuctionParticipant = `-- name: CreateAuctionParticipant :one
INSERT INTO auction_participants (id,
                                  auction_id,
                                  user_id,
                                  deposit_amount,
                                  deposit_entry_id)
VALUES ($1, $2, $3, $4, $5) RETURNING id, auction_id, user_id, deposit_amount, deposit_entry_id, is_refunded, created_at
`

type CreateAuctionParticipantParams struct {
	ID             uuid.UUID `json:"id"`
	AuctionID      uuid.UUID `json:"auction_id"`
	UserID         string    `json:"user_id"`
	DepositAmount  int64     `json:"deposit_amount"`
	DepositEntryID int64     `json:"deposit_entry_id"`
}

func (q *Queries) CreateAuctionParticipant(ctx context.Context, arg CreateAuctionParticipantParams) (AuctionParticipant, error) {
	row := q.db.QueryRow(ctx, createAuctionParticipant,
		arg.ID,
		arg.AuctionID,
		arg.UserID,
		arg.DepositAmount,
		arg.DepositEntryID,
	)
	var i AuctionParticipant
	err := row.Scan(
		&i.ID,
		&i.AuctionID,
		&i.UserID,
		&i.DepositAmount,
		&i.DepositEntryID,
		&i.IsRefunded,
		&i.CreatedAt,
	)
	return i, err
}

const incrementAuctionParticipants = `-- name: IncrementAuctionParticipants :one
UPDATE auctions
SET total_participants = total_participants + 1
WHERE id = $1 RETURNING id, request_id, gundam_id, seller_id, gundam_snapshot, starting_price, bid_increment, winning_bid_id, buy_now_price, start_time, end_time, status, current_price, deposit_rate, deposit_amount, winner_payment_deadline, total_participants, total_bids, order_id, canceled_by, canceled_reason, created_at, updated_at
`

func (q *Queries) IncrementAuctionParticipants(ctx context.Context, id uuid.UUID) (Auction, error) {
	row := q.db.QueryRow(ctx, incrementAuctionParticipants, id)
	var i Auction
	err := row.Scan(
		&i.ID,
		&i.RequestID,
		&i.GundamID,
		&i.SellerID,
		&i.GundamSnapshot,
		&i.StartingPrice,
		&i.BidIncrement,
		&i.WinningBidID,
		&i.BuyNowPrice,
		&i.StartTime,
		&i.EndTime,
		&i.Status,
		&i.CurrentPrice,
		&i.DepositRate,
		&i.DepositAmount,
		&i.WinnerPaymentDeadline,
		&i.TotalParticipants,
		&i.TotalBids,
		&i.OrderID,
		&i.CanceledBy,
		&i.CanceledReason,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
