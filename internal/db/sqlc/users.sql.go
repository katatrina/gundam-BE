// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (hashed_password, full_name, email, email_verified, phone_number, phone_number_verified, role,
                   avatar_url)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id, google_account_id, full_name, hashed_password, email, email_verified, phone_number, phone_number_verified, role, avatar_url, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	HashedPassword      *string  `json:"-"`
	FullName            string   `json:"full_name"`
	Email               string   `json:"email"`
	EmailVerified       bool     `json:"email_verified"`
	PhoneNumber         *string  `json:"phone_number"`
	PhoneNumberVerified bool     `json:"phone_number_verified"`
	Role                UserRole `json:"role"`
	AvatarURL           *string  `json:"avatar_url"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
		arg.EmailVerified,
		arg.PhoneNumber,
		arg.PhoneNumberVerified,
		arg.Role,
		arg.AvatarURL,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GoogleAccountID,
		&i.FullName,
		&i.HashedPassword,
		&i.Email,
		&i.EmailVerified,
		&i.PhoneNumber,
		&i.PhoneNumberVerified,
		&i.Role,
		&i.AvatarURL,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createUserWithGoogleAccount = `-- name: CreateUserWithGoogleAccount :one
INSERT INTO users (google_account_id, full_name, email, email_verified, avatar_url)
VALUES ($1, $2, $3, $4, $5) RETURNING id, google_account_id, full_name, hashed_password, email, email_verified, phone_number, phone_number_verified, role, avatar_url, created_at, updated_at, deleted_at
`

type CreateUserWithGoogleAccountParams struct {
	GoogleAccountID *string `json:"google_account_id"`
	FullName        string  `json:"full_name"`
	Email           string  `json:"email"`
	EmailVerified   bool    `json:"email_verified"`
	AvatarURL       *string `json:"avatar_url"`
}

func (q *Queries) CreateUserWithGoogleAccount(ctx context.Context, arg CreateUserWithGoogleAccountParams) (User, error) {
	row := q.db.QueryRow(ctx, createUserWithGoogleAccount,
		arg.GoogleAccountID,
		arg.FullName,
		arg.Email,
		arg.EmailVerified,
		arg.AvatarURL,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GoogleAccountID,
		&i.FullName,
		&i.HashedPassword,
		&i.Email,
		&i.EmailVerified,
		&i.PhoneNumber,
		&i.PhoneNumberVerified,
		&i.Role,
		&i.AvatarURL,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, google_account_id, full_name, hashed_password, email, email_verified, phone_number, phone_number_verified, role, avatar_url, created_at, updated_at, deleted_at
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GoogleAccountID,
		&i.FullName,
		&i.HashedPassword,
		&i.Email,
		&i.EmailVerified,
		&i.PhoneNumber,
		&i.PhoneNumberVerified,
		&i.Role,
		&i.AvatarURL,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, google_account_id, full_name, hashed_password, email, email_verified, phone_number, phone_number_verified, role, avatar_url, created_at, updated_at, deleted_at
FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GoogleAccountID,
		&i.FullName,
		&i.HashedPassword,
		&i.Email,
		&i.EmailVerified,
		&i.PhoneNumber,
		&i.PhoneNumberVerified,
		&i.Role,
		&i.AvatarURL,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByPhoneNumber = `-- name: GetUserByPhoneNumber :one
SELECT id, google_account_id, full_name, hashed_password, email, email_verified, phone_number, phone_number_verified, role, avatar_url, created_at, updated_at, deleted_at
FROM users
WHERE phone_number = $1
`

func (q *Queries) GetUserByPhoneNumber(ctx context.Context, phoneNumber *string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByPhoneNumber, phoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GoogleAccountID,
		&i.FullName,
		&i.HashedPassword,
		&i.Email,
		&i.EmailVerified,
		&i.PhoneNumber,
		&i.PhoneNumberVerified,
		&i.Role,
		&i.AvatarURL,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET full_name             = COALESCE($1, full_name),
    avatar_url            = COALESCE($2, avatar_url),
    phone_number          = COALESCE($3, phone_number),
    phone_number_verified = COALESCE($4, phone_number_verified),
    role                  = COALESCE($5, role),
    updated_at            = now()
WHERE id = $6 RETURNING id, google_account_id, full_name, hashed_password, email, email_verified, phone_number, phone_number_verified, role, avatar_url, created_at, updated_at, deleted_at
`

type UpdateUserParams struct {
	FullName            *string      `json:"full_name"`
	AvatarURL           *string      `json:"avatar_url"`
	PhoneNumber         *string      `json:"phone_number"`
	PhoneNumberVerified *bool        `json:"phone_number_verified"`
	Role                NullUserRole `json:"role"`
	UserID              string       `json:"user_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.FullName,
		arg.AvatarURL,
		arg.PhoneNumber,
		arg.PhoneNumberVerified,
		arg.Role,
		arg.UserID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.GoogleAccountID,
		&i.FullName,
		&i.HashedPassword,
		&i.Email,
		&i.EmailVerified,
		&i.PhoneNumber,
		&i.PhoneNumberVerified,
		&i.Role,
		&i.AvatarURL,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
