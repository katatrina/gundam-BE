// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (hashed_password, email, email_verified)
VALUES ($1, $2, $3) RETURNING id, full_name, hashed_password, email, email_verified, phone_number, phone_number_verified, role, avatar_url, created_at, updated_at
`

type CreateUserParams struct {
	HashedPassword pgtype.Text `json:"-"`
	Email          string      `json:"email"`
	EmailVerified  bool        `json:"email_verified"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.HashedPassword, arg.Email, arg.EmailVerified)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.HashedPassword,
		&i.Email,
		&i.EmailVerified,
		&i.PhoneNumber,
		&i.PhoneNumberVerified,
		&i.Role,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUserAddress = `-- name: CreateUserAddress :exec
INSERT INTO user_addresses (user_id, receiver_name, receiver_phone_number, province_name, district_name, ward_name,
                            detail, is_primary)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type CreateUserAddressParams struct {
	UserID              string `json:"user_id"`
	ReceiverName        string `json:"receiver_name"`
	ReceiverPhoneNumber string `json:"receiver_phone_number"`
	ProvinceName        string `json:"province_name"`
	DistrictName        string `json:"district_name"`
	WardName            string `json:"ward_name"`
	Detail              string `json:"detail"`
	IsPrimary           bool   `json:"is_primary"`
}

func (q *Queries) CreateUserAddress(ctx context.Context, arg CreateUserAddressParams) error {
	_, err := q.db.Exec(ctx, createUserAddress,
		arg.UserID,
		arg.ReceiverName,
		arg.ReceiverPhoneNumber,
		arg.ProvinceName,
		arg.DistrictName,
		arg.WardName,
		arg.Detail,
		arg.IsPrimary,
	)
	return err
}

const createUserWithGoogleAccount = `-- name: CreateUserWithGoogleAccount :one
INSERT INTO users (id, full_name, email, email_verified, avatar_url)
VALUES ($1, $2, $3, $4, $5) RETURNING id, full_name, hashed_password, email, email_verified, phone_number, phone_number_verified, role, avatar_url, created_at, updated_at
`

type CreateUserWithGoogleAccountParams struct {
	ID            string      `json:"id"`
	FullName      string      `json:"full_name"`
	Email         string      `json:"email"`
	EmailVerified bool        `json:"email_verified"`
	AvatarUrl     pgtype.Text `json:"avatar_url"`
}

func (q *Queries) CreateUserWithGoogleAccount(ctx context.Context, arg CreateUserWithGoogleAccountParams) (User, error) {
	row := q.db.QueryRow(ctx, createUserWithGoogleAccount,
		arg.ID,
		arg.FullName,
		arg.Email,
		arg.EmailVerified,
		arg.AvatarUrl,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.HashedPassword,
		&i.Email,
		&i.EmailVerified,
		&i.PhoneNumber,
		&i.PhoneNumberVerified,
		&i.Role,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserAddresses = `-- name: GetUserAddresses :many
SELECT id, user_id, receiver_name, receiver_phone_number, province_name, district_name, ward_name, detail, is_primary, created_at, updated_at FROM user_addresses
WHERE user_id = $1
ORDER BY is_primary DESC, created_at DESC
`

func (q *Queries) GetUserAddresses(ctx context.Context, userID string) ([]UserAddress, error) {
	rows, err := q.db.Query(ctx, getUserAddresses, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserAddress{}
	for rows.Next() {
		var i UserAddress
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ReceiverName,
			&i.ReceiverPhoneNumber,
			&i.ProvinceName,
			&i.DistrictName,
			&i.WardName,
			&i.Detail,
			&i.IsPrimary,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, full_name, hashed_password, email, email_verified, phone_number, phone_number_verified, role, avatar_url, created_at, updated_at
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.HashedPassword,
		&i.Email,
		&i.EmailVerified,
		&i.PhoneNumber,
		&i.PhoneNumberVerified,
		&i.Role,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, full_name, hashed_password, email, email_verified, phone_number, phone_number_verified, role, avatar_url, created_at, updated_at
FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.HashedPassword,
		&i.Email,
		&i.EmailVerified,
		&i.PhoneNumber,
		&i.PhoneNumberVerified,
		&i.Role,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByPhoneNumber = `-- name: GetUserByPhoneNumber :one
SELECT id, full_name, hashed_password, email, email_verified, phone_number, phone_number_verified, role, avatar_url, created_at, updated_at
FROM users
WHERE phone_number = $1
`

func (q *Queries) GetUserByPhoneNumber(ctx context.Context, phoneNumber pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByPhoneNumber, phoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.HashedPassword,
		&i.Email,
		&i.EmailVerified,
		&i.PhoneNumber,
		&i.PhoneNumberVerified,
		&i.Role,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const unsetPrimaryAddress = `-- name: UnsetPrimaryAddress :exec
UPDATE user_addresses
SET is_primary = false
WHERE user_id = $1 AND is_primary = true
`

func (q *Queries) UnsetPrimaryAddress(ctx context.Context, userID string) error {
	_, err := q.db.Exec(ctx, unsetPrimaryAddress, userID)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET full_name    = COALESCE($1, full_name),
    avatar_url   = COALESCE($2, avatar_url),
    phone_number = COALESCE($3, phone_number),
    updated_at   = now()
WHERE id = $4 RETURNING id, full_name, hashed_password, email, email_verified, phone_number, phone_number_verified, role, avatar_url, created_at, updated_at
`

type UpdateUserParams struct {
	FullName    pgtype.Text `json:"full_name"`
	AvatarUrl   pgtype.Text `json:"avatar_url"`
	PhoneNumber pgtype.Text `json:"phone_number"`
	UserID      string      `json:"user_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.FullName,
		arg.AvatarUrl,
		arg.PhoneNumber,
		arg.UserID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.HashedPassword,
		&i.Email,
		&i.EmailVerified,
		&i.PhoneNumber,
		&i.PhoneNumberVerified,
		&i.Role,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
