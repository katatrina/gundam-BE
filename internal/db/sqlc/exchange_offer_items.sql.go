// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: exchange_offer_items.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createExchangeOfferItem = `-- name: CreateExchangeOfferItem :one
INSERT INTO exchange_offer_items (id,
                                  offer_id,
                                  gundam_id)
VALUES ($1, $2, $3) RETURNING id, offer_id, gundam_id, created_at
`

type CreateExchangeOfferItemParams struct {
	ID       uuid.UUID `json:"id"`
	OfferID  uuid.UUID `json:"offer_id"`
	GundamID int64     `json:"gundam_id"`
}

func (q *Queries) CreateExchangeOfferItem(ctx context.Context, arg CreateExchangeOfferItemParams) (ExchangeOfferItem, error) {
	row := q.db.QueryRow(ctx, createExchangeOfferItem, arg.ID, arg.OfferID, arg.GundamID)
	var i ExchangeOfferItem
	err := row.Scan(
		&i.ID,
		&i.OfferID,
		&i.GundamID,
		&i.CreatedAt,
	)
	return i, err
}

const listExchangeOfferItems = `-- name: ListExchangeOfferItems :many
SELECT id, offer_id, gundam_id, created_at
FROM exchange_offer_items
WHERE offer_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListExchangeOfferItems(ctx context.Context, offerID uuid.UUID) ([]ExchangeOfferItem, error) {
	rows, err := q.db.Query(ctx, listExchangeOfferItems, offerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ExchangeOfferItem{}
	for rows.Next() {
		var i ExchangeOfferItem
		if err := rows.Scan(
			&i.ID,
			&i.OfferID,
			&i.GundamID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
