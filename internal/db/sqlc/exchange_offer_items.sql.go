// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: exchange_offer_items.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createExchangeOfferItem = `-- name: CreateExchangeOfferItem :one
INSERT INTO exchange_offer_items (id,
                                  offer_id,
                                  gundam_id,
                                  is_from_poster)
VALUES ($1, $2, $3, $4) RETURNING id, offer_id, gundam_id, is_from_poster, created_at
`

type CreateExchangeOfferItemParams struct {
	ID           uuid.UUID `json:"id"`
	OfferID      uuid.UUID `json:"offer_id"`
	GundamID     int64     `json:"gundam_id"`
	IsFromPoster bool      `json:"is_from_poster"`
}

func (q *Queries) CreateExchangeOfferItem(ctx context.Context, arg CreateExchangeOfferItemParams) (ExchangeOfferItem, error) {
	row := q.db.QueryRow(ctx, createExchangeOfferItem,
		arg.ID,
		arg.OfferID,
		arg.GundamID,
		arg.IsFromPoster,
	)
	var i ExchangeOfferItem
	err := row.Scan(
		&i.ID,
		&i.OfferID,
		&i.GundamID,
		&i.IsFromPoster,
		&i.CreatedAt,
	)
	return i, err
}

const listExchangeOfferItems = `-- name: ListExchangeOfferItems :many
SELECT id, offer_id, gundam_id, is_from_poster, created_at
FROM exchange_offer_items
WHERE offer_id = $1
  AND ($2::boolean IS NULL OR is_from_poster = $2::boolean)
ORDER BY created_at DESC
`

type ListExchangeOfferItemsParams struct {
	OfferID      uuid.UUID `json:"offer_id"`
	IsFromPoster *bool     `json:"is_from_poster"`
}

func (q *Queries) ListExchangeOfferItems(ctx context.Context, arg ListExchangeOfferItemsParams) ([]ExchangeOfferItem, error) {
	rows, err := q.db.Query(ctx, listExchangeOfferItems, arg.OfferID, arg.IsFromPoster)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ExchangeOfferItem{}
	for rows.Next() {
		var i ExchangeOfferItem
		if err := rows.Scan(
			&i.ID,
			&i.OfferID,
			&i.GundamID,
			&i.IsFromPoster,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
