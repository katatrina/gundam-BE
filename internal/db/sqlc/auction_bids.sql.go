// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: auction_bids.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createAuctionBid = `-- name: CreateAuctionBid :one
INSERT INTO auction_bids (id,
                          auction_id,
                          bidder_id,
                          participant_id,
                          amount)
VALUES ($1, $2, $3, $4, $5) RETURNING id, auction_id, bidder_id, participant_id, amount, created_at
`

type CreateAuctionBidParams struct {
	ID            uuid.UUID  `json:"id"`
	AuctionID     *uuid.UUID `json:"auction_id"`
	BidderID      *string    `json:"bidder_id"`
	ParticipantID uuid.UUID  `json:"participant_id"`
	Amount        int64      `json:"amount"`
}

func (q *Queries) CreateAuctionBid(ctx context.Context, arg CreateAuctionBidParams) (AuctionBid, error) {
	row := q.db.QueryRow(ctx, createAuctionBid,
		arg.ID,
		arg.AuctionID,
		arg.BidderID,
		arg.ParticipantID,
		arg.Amount,
	)
	var i AuctionBid
	err := row.Scan(
		&i.ID,
		&i.AuctionID,
		&i.BidderID,
		&i.ParticipantID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getAuctionBidByID = `-- name: GetAuctionBidByID :one
SELECT id, auction_id, bidder_id, participant_id, amount, created_at
FROM auction_bids
WHERE id = $1
`

func (q *Queries) GetAuctionBidByID(ctx context.Context, id uuid.UUID) (AuctionBid, error) {
	row := q.db.QueryRow(ctx, getAuctionBidByID, id)
	var i AuctionBid
	err := row.Scan(
		&i.ID,
		&i.AuctionID,
		&i.BidderID,
		&i.ParticipantID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
