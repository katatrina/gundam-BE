// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: carts.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addCartItem = `-- name: AddCartItem :one
WITH inserted_item AS (
INSERT
INTO cart_items (cart_id, gundam_id)
VALUES ($1, $2)
    RETURNING id, cart_id, gundam_id
    )
SELECT ci.id        AS cart_item_id,
       g.id         AS gundam_id,
       g.name       AS gundam_name,
       g.price      AS gundam_price,
       gi.url       AS gundam_image_url,
       s.id         AS seller_id,
       s.full_name  AS seller_name,
       s.avatar_url AS seller_avatar_url
FROM inserted_item ci
         JOIN gundams g ON ci.gundam_id = g.id
         JOIN users s ON g.owner_id = s.id
         JOIN gundam_images gi
              ON gi.gundam_id = g.id
                  AND gi.is_primary = true
`

type AddCartItemParams struct {
	CartID   int64 `json:"cart_id"`
	GundamID int64 `json:"gundam_id"`
}

type AddCartItemRow struct {
	CartItemID      string      `json:"cart_item_id"`
	GundamID        int64       `json:"gundam_id"`
	GundamName      string      `json:"gundam_name"`
	GundamPrice     int64       `json:"gundam_price"`
	GundamImageUrl  string      `json:"gundam_image_url"`
	SellerID        string      `json:"seller_id"`
	SellerName      string      `extensions:"x-nullable" json:"seller_name"`
	SellerAvatarUrl pgtype.Text `extensions:"x-nullable" json:"seller_avatar_url"`
}

func (q *Queries) AddCartItem(ctx context.Context, arg AddCartItemParams) (AddCartItemRow, error) {
	row := q.db.QueryRow(ctx, addCartItem, arg.CartID, arg.GundamID)
	var i AddCartItemRow
	err := row.Scan(
		&i.CartItemID,
		&i.GundamID,
		&i.GundamName,
		&i.GundamPrice,
		&i.GundamImageUrl,
		&i.SellerID,
		&i.SellerName,
		&i.SellerAvatarUrl,
	)
	return i, err
}

const checkCartItemExists = `-- name: CheckCartItemExists :one
SELECT EXISTS (SELECT 1
               FROM cart_items
               WHERE cart_id = $1
                 AND gundam_id = $2)
`

type CheckCartItemExistsParams struct {
	CartID   int64 `json:"cart_id"`
	GundamID int64 `json:"gundam_id"`
}

func (q *Queries) CheckCartItemExists(ctx context.Context, arg CheckCartItemExistsParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkCartItemExists, arg.CartID, arg.GundamID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getCartByUserID = `-- name: GetCartByUserID :one
SELECT id
FROM carts
WHERE user_id = $1
`

func (q *Queries) GetCartByUserID(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRow(ctx, getCartByUserID, userID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getOrCreateCartIfNotExists = `-- name: GetOrCreateCartIfNotExists :one
INSERT INTO carts (user_id)
VALUES ($1) ON CONFLICT (user_id) DO
UPDATE
    SET id = carts.id -- This is a no-op update to force a return
    RETURNING id
`

func (q *Queries) GetOrCreateCartIfNotExists(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRow(ctx, getOrCreateCartIfNotExists, userID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const listCartItemsWithDetails = `-- name: ListCartItemsWithDetails :many
SELECT ci.id        AS cart_item_id,
       g.id         AS gundam_id,
       g.name       AS gundam_name,
       g.price      AS gundam_price,
       gi.url       AS gundam_image_url,
       s.id         AS seller_id,
       s.full_name  AS seller_name,
       s.avatar_url AS seller_avatar_url
FROM cart_items ci
         JOIN gundams g ON ci.gundam_id = g.id
         JOIN users s ON g.owner_id = s.id
         JOIN gundam_images gi
              ON gi.gundam_id = g.id
                  AND gi.is_primary = true
WHERE ci.cart_id = $1
  AND g.status = 'selling'
  AND g.deleted_at IS NULL
`

type ListCartItemsWithDetailsRow struct {
	CartItemID      string      `json:"cart_item_id"`
	GundamID        int64       `json:"gundam_id"`
	GundamName      string      `json:"gundam_name"`
	GundamPrice     int64       `json:"gundam_price"`
	GundamImageUrl  string      `json:"gundam_image_url"`
	SellerID        string      `json:"seller_id"`
	SellerName      string      `extensions:"x-nullable" json:"seller_name"`
	SellerAvatarUrl pgtype.Text `extensions:"x-nullable" json:"seller_avatar_url"`
}

func (q *Queries) ListCartItemsWithDetails(ctx context.Context, cartID int64) ([]ListCartItemsWithDetailsRow, error) {
	rows, err := q.db.Query(ctx, listCartItemsWithDetails, cartID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListCartItemsWithDetailsRow{}
	for rows.Next() {
		var i ListCartItemsWithDetailsRow
		if err := rows.Scan(
			&i.CartItemID,
			&i.GundamID,
			&i.GundamName,
			&i.GundamPrice,
			&i.GundamImageUrl,
			&i.SellerID,
			&i.SellerName,
			&i.SellerAvatarUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeCartItem = `-- name: RemoveCartItem :exec
DELETE
FROM cart_items
WHERE id = $1
  AND cart_id = $2
`

type RemoveCartItemParams struct {
	ID     string `json:"id"`
	CartID int64  `json:"cart_id"`
}

func (q *Queries) RemoveCartItem(ctx context.Context, arg RemoveCartItemParams) error {
	_, err := q.db.Exec(ctx, removeCartItem, arg.ID, arg.CartID)
	return err
}
