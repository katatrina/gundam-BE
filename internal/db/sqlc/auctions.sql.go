// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: auctions.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const checkUserParticipation = `-- name: CheckUserParticipation :one
SELECT EXISTS(SELECT 1
              FROM auction_participants
              WHERE auction_id = $1
                AND user_id = $2) AS "has_participated"
`

type CheckUserParticipationParams struct {
	AuctionID uuid.UUID `json:"auction_id"`
	UserID    string    `json:"user_id"`
}

func (q *Queries) CheckUserParticipation(ctx context.Context, arg CheckUserParticipationParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkUserParticipation, arg.AuctionID, arg.UserID)
	var has_participated bool
	err := row.Scan(&has_participated)
	return has_participated, err
}

const countSellerActiveAuctions = `-- name: CountSellerActiveAuctions :one
SELECT COUNT(*)
FROM auctions
WHERE seller_id = $1
  AND status IN ('scheduled', 'active')
`

func (q *Queries) CountSellerActiveAuctions(ctx context.Context, sellerID string) (int64, error) {
	row := q.db.QueryRow(ctx, countSellerActiveAuctions, sellerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAuction = `-- name: CreateAuction :one
INSERT INTO auctions (id,
                      request_id,
                      gundam_id,
                      seller_id,
                      gundam_snapshot,
                      starting_price,
                      bid_increment,
                      buy_now_price,
                      current_price,
                      deposit_rate,
                      deposit_amount,
                      start_time,
                      end_time)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13) RETURNING id, request_id, gundam_id, seller_id, gundam_snapshot, starting_price, bid_increment, winning_bid_id, buy_now_price, start_time, end_time, status, current_price, deposit_rate, deposit_amount, winner_payment_deadline, total_participants, total_bids, order_id, canceled_by, canceled_reason, created_at, updated_at
`

type CreateAuctionParams struct {
	ID             uuid.UUID       `json:"id"`
	RequestID      *uuid.UUID      `json:"request_id"`
	GundamID       *int64          `json:"gundam_id"`
	SellerID       string          `json:"seller_id"`
	GundamSnapshot GundamSnapshot  `json:"gundam_snapshot"`
	StartingPrice  int64           `json:"starting_price"`
	BidIncrement   int64           `json:"bid_increment"`
	BuyNowPrice    *int64          `json:"buy_now_price"`
	CurrentPrice   int64           `json:"current_price"`
	DepositRate    decimal.Decimal `json:"deposit_rate"`
	DepositAmount  int64           `json:"deposit_amount"`
	StartTime      time.Time       `json:"start_time"`
	EndTime        time.Time       `json:"end_time"`
}

func (q *Queries) CreateAuction(ctx context.Context, arg CreateAuctionParams) (Auction, error) {
	row := q.db.QueryRow(ctx, createAuction,
		arg.ID,
		arg.RequestID,
		arg.GundamID,
		arg.SellerID,
		arg.GundamSnapshot,
		arg.StartingPrice,
		arg.BidIncrement,
		arg.BuyNowPrice,
		arg.CurrentPrice,
		arg.DepositRate,
		arg.DepositAmount,
		arg.StartTime,
		arg.EndTime,
	)
	var i Auction
	err := row.Scan(
		&i.ID,
		&i.RequestID,
		&i.GundamID,
		&i.SellerID,
		&i.GundamSnapshot,
		&i.StartingPrice,
		&i.BidIncrement,
		&i.WinningBidID,
		&i.BuyNowPrice,
		&i.StartTime,
		&i.EndTime,
		&i.Status,
		&i.CurrentPrice,
		&i.DepositRate,
		&i.DepositAmount,
		&i.WinnerPaymentDeadline,
		&i.TotalParticipants,
		&i.TotalBids,
		&i.OrderID,
		&i.CanceledBy,
		&i.CanceledReason,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAuctionByID = `-- name: GetAuctionByID :one
SELECT id, request_id, gundam_id, seller_id, gundam_snapshot, starting_price, bid_increment, winning_bid_id, buy_now_price, start_time, end_time, status, current_price, deposit_rate, deposit_amount, winner_payment_deadline, total_participants, total_bids, order_id, canceled_by, canceled_reason, created_at, updated_at
FROM auctions
WHERE id = $1
`

func (q *Queries) GetAuctionByID(ctx context.Context, id uuid.UUID) (Auction, error) {
	row := q.db.QueryRow(ctx, getAuctionByID, id)
	var i Auction
	err := row.Scan(
		&i.ID,
		&i.RequestID,
		&i.GundamID,
		&i.SellerID,
		&i.GundamSnapshot,
		&i.StartingPrice,
		&i.BidIncrement,
		&i.WinningBidID,
		&i.BuyNowPrice,
		&i.StartTime,
		&i.EndTime,
		&i.Status,
		&i.CurrentPrice,
		&i.DepositRate,
		&i.DepositAmount,
		&i.WinnerPaymentDeadline,
		&i.TotalParticipants,
		&i.TotalBids,
		&i.OrderID,
		&i.CanceledBy,
		&i.CanceledReason,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAuctions = `-- name: ListAuctions :many
SELECT id, request_id, gundam_id, seller_id, gundam_snapshot, starting_price, bid_increment, winning_bid_id, buy_now_price, start_time, end_time, status, current_price, deposit_rate, deposit_amount, winner_payment_deadline, total_participants, total_bids, order_id, canceled_by, canceled_reason, created_at, updated_at
FROM auctions
WHERE status = COALESCE($1, status)
ORDER BY CASE status
             -- Phiên đang diễn ra: ưu tiên theo thời gian kết thúc gần nhất
             WHEN 'active' THEN EXTRACT(EPOCH FROM end_time)
             -- Phiên sắp diễn ra: ưu tiên theo thời gian bắt đầu sớm nhất
             WHEN 'scheduled' THEN EXTRACT(EPOCH FROM start_time)
             -- Các trạng thái khác: sắp xếp theo thời gian tạo mới nhất
             ELSE EXTRACT(EPOCH FROM created_at) * -1
             END ASC,
         created_at DESC
`

func (q *Queries) ListAuctions(ctx context.Context, status NullAuctionStatus) ([]Auction, error) {
	rows, err := q.db.Query(ctx, listAuctions, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Auction{}
	for rows.Next() {
		var i Auction
		if err := rows.Scan(
			&i.ID,
			&i.RequestID,
			&i.GundamID,
			&i.SellerID,
			&i.GundamSnapshot,
			&i.StartingPrice,
			&i.BidIncrement,
			&i.WinningBidID,
			&i.BuyNowPrice,
			&i.StartTime,
			&i.EndTime,
			&i.Status,
			&i.CurrentPrice,
			&i.DepositRate,
			&i.DepositAmount,
			&i.WinnerPaymentDeadline,
			&i.TotalParticipants,
			&i.TotalBids,
			&i.OrderID,
			&i.CanceledBy,
			&i.CanceledReason,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAuction = `-- name: UpdateAuction :one
UPDATE auctions
SET status             = COALESCE($2, status),
    updated_at         = now()
WHERE id = $1 RETURNING id, request_id, gundam_id, seller_id, gundam_snapshot, starting_price, bid_increment, winning_bid_id, buy_now_price, start_time, end_time, status, current_price, deposit_rate, deposit_amount, winner_payment_deadline, total_participants, total_bids, order_id, canceled_by, canceled_reason, created_at, updated_at
`

type UpdateAuctionParams struct {
	ID     uuid.UUID         `json:"id"`
	Status NullAuctionStatus `json:"status"`
}

func (q *Queries) UpdateAuction(ctx context.Context, arg UpdateAuctionParams) (Auction, error) {
	row := q.db.QueryRow(ctx, updateAuction, arg.ID, arg.Status)
	var i Auction
	err := row.Scan(
		&i.ID,
		&i.RequestID,
		&i.GundamID,
		&i.SellerID,
		&i.GundamSnapshot,
		&i.StartingPrice,
		&i.BidIncrement,
		&i.WinningBidID,
		&i.BuyNowPrice,
		&i.StartTime,
		&i.EndTime,
		&i.Status,
		&i.CurrentPrice,
		&i.DepositRate,
		&i.DepositAmount,
		&i.WinnerPaymentDeadline,
		&i.TotalParticipants,
		&i.TotalBids,
		&i.OrderID,
		&i.CanceledBy,
		&i.CanceledReason,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
