// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: admin.sql

package db

import (
	"context"
)

const getAdminCompletedAuctionsThisWeek = `-- name: GetAdminCompletedAuctionsThisWeek :one
SELECT COUNT(*) as count
FROM auctions
WHERE status = 'completed'
  AND updated_at >= date_trunc('week'
    , CURRENT_DATE)
`

// Metric 7: Đấu giá hoàn thành thành công tuần này (bảng auctions)
func (q *Queries) GetAdminCompletedAuctionsThisWeek(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getAdminCompletedAuctionsThisWeek)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAdminCompletedExchangesThisMonth = `-- name: GetAdminCompletedExchangesThisMonth :one
SELECT COUNT(*) as count
FROM exchanges
WHERE status = 'completed'
  AND completed_at >= date_trunc('month'
    , CURRENT_DATE)
`

// Metric 6: Trao đổi hoàn thành thành công tháng này (bảng exchanges)
func (q *Queries) GetAdminCompletedExchangesThisMonth(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getAdminCompletedExchangesThisMonth)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAdminNewUsersThisWeek = `-- name: GetAdminNewUsersThisWeek :one
SELECT COUNT(*) as count
FROM users
WHERE created_at >= date_trunc('week'
    , CURRENT_DATE)
  AND deleted_at IS NULL
`

// Metric 10: Users mới đăng ký tuần này (bảng users)
func (q *Queries) GetAdminNewUsersThisWeek(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getAdminNewUsersThisWeek)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAdminTotalAuctionOrdersThisMonth = `-- name: GetAdminTotalAuctionOrdersThisMonth :one
SELECT COUNT(*) as count
FROM orders
WHERE type = 'auction'
  AND created_at >= date_trunc('month'
    , CURRENT_DATE)
`

// Metric 4: Tổng đơn hàng đấu giá tháng này (bảng orders)
func (q *Queries) GetAdminTotalAuctionOrdersThisMonth(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getAdminTotalAuctionOrdersThisMonth)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAdminTotalBusinessUsers = `-- name: GetAdminTotalBusinessUsers :one
SELECT COUNT(*) as count
FROM users
WHERE deleted_at IS NULL
  AND role IN ('seller'
    , 'member')
`

// Metric 1: Tổng users hoạt động trên nền tảng (bảng users - không tính admin và moderator)
func (q *Queries) GetAdminTotalBusinessUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getAdminTotalBusinessUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAdminTotalExchangeOrdersThisMonth = `-- name: GetAdminTotalExchangeOrdersThisMonth :one
SELECT COUNT(*) as count
FROM orders
WHERE type = 'exchange'
  AND created_at >= date_trunc('month'
    , CURRENT_DATE)
`

// Metric 3: Tổng đơn hàng trao đổi tháng này (bảng orders)
func (q *Queries) GetAdminTotalExchangeOrdersThisMonth(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getAdminTotalExchangeOrdersThisMonth)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAdminTotalPublishedGundams = `-- name: GetAdminTotalPublishedGundams :one
SELECT COUNT(*) as count
FROM gundams
WHERE status = 'published'
`

// Metric 9: Tổng Gundam đang bán trên nền tảng (bảng gundams)
func (q *Queries) GetAdminTotalPublishedGundams(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getAdminTotalPublishedGundams)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAdminTotalRegularOrdersThisMonth = `-- name: GetAdminTotalRegularOrdersThisMonth :one
SELECT COUNT(*) as count
FROM orders
WHERE type = 'regular'
  AND created_at >= date_trunc('month'
    , CURRENT_DATE)
`

// Metric 2: Tổng đơn hàng thường tháng này (bảng orders)
func (q *Queries) GetAdminTotalRegularOrdersThisMonth(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getAdminTotalRegularOrdersThisMonth)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAdminTotalRevenueThisMonth = `-- name: GetAdminTotalRevenueThisMonth :one
SELECT COALESCE(-SUM(amount), 0) ::bigint as revenue
FROM wallet_entries
WHERE entry_type = 'subscription_payment'
  AND status = 'completed'
  AND created_at >= date_trunc('month', CURRENT_DATE)
`

// Doanh thu thực của nền tảng từ subscription payments
func (q *Queries) GetAdminTotalRevenueThisMonth(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getAdminTotalRevenueThisMonth)
	var revenue int64
	err := row.Scan(&revenue)
	return revenue, err
}

const getAdminTotalWalletVolumeThisWeek = `-- name: GetAdminTotalWalletVolumeThisWeek :one
SELECT COALESCE(SUM(ABS(amount)), 0) ::bigint as total_volume
FROM wallet_entries
WHERE status = 'completed'
  AND created_at >= date_trunc('week', CURRENT_DATE)
`

// Metric 8: Tổng volume giao dịch ví thành công tuần này (bảng wallet_entries)
func (q *Queries) GetAdminTotalWalletVolumeThisWeek(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getAdminTotalWalletVolumeThisWeek)
	var total_volume int64
	err := row.Scan(&total_volume)
	return total_volume, err
}
