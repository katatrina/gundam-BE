// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: exchange_posts.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createExchangePost = `-- name: CreateExchangePost :one
INSERT INTO "exchange_posts" ("id",
                              "user_id",
                              "content",
                              "post_image_urls")
VALUES ($1, $2, $3, $4) RETURNING id, user_id, content, post_image_urls, status, created_at, updated_at
`

type CreateExchangePostParams struct {
	ID            uuid.UUID `json:"id"`
	UserID        string    `json:"user_id"`
	Content       string    `json:"content"`
	PostImageUrls []string  `json:"post_image_urls"`
}

func (q *Queries) CreateExchangePost(ctx context.Context, arg CreateExchangePostParams) (ExchangePost, error) {
	row := q.db.QueryRow(ctx, createExchangePost,
		arg.ID,
		arg.UserID,
		arg.Content,
		arg.PostImageUrls,
	)
	var i ExchangePost
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.PostImageUrls,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateExchangePost = `-- name: UpdateExchangePost :one
UPDATE "exchange_posts"
SET "post_image_urls" = $2
WHERE "id" = $1 RETURNING id, user_id, content, post_image_urls, status, created_at, updated_at
`

type UpdateExchangePostParams struct {
	ID            uuid.UUID `json:"id"`
	PostImageUrls []string  `json:"post_image_urls"`
}

func (q *Queries) UpdateExchangePost(ctx context.Context, arg UpdateExchangePostParams) (ExchangePost, error) {
	row := q.db.QueryRow(ctx, updateExchangePost, arg.ID, arg.PostImageUrls)
	var i ExchangePost
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.PostImageUrls,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
