// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: exchange_posts.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createExchangePost = `-- name: CreateExchangePost :one
INSERT INTO "exchange_posts" ("id",
                              "user_id",
                              "content",
                              "post_image_urls")
VALUES ($1, $2, $3, $4) RETURNING id, user_id, content, post_image_urls, status, created_at, updated_at
`

type CreateExchangePostParams struct {
	ID            uuid.UUID `json:"id"`
	UserID        string    `json:"user_id"`
	Content       string    `json:"content"`
	PostImageUrls []string  `json:"post_image_urls"`
}

func (q *Queries) CreateExchangePost(ctx context.Context, arg CreateExchangePostParams) (ExchangePost, error) {
	row := q.db.QueryRow(ctx, createExchangePost,
		arg.ID,
		arg.UserID,
		arg.Content,
		arg.PostImageUrls,
	)
	var i ExchangePost
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.PostImageUrls,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteExchangePost = `-- name: DeleteExchangePost :one
DELETE
FROM "exchange_posts"
WHERE id = $1 RETURNING id, user_id, content, post_image_urls, status, created_at, updated_at
`

func (q *Queries) DeleteExchangePost(ctx context.Context, id uuid.UUID) (ExchangePost, error) {
	row := q.db.QueryRow(ctx, deleteExchangePost, id)
	var i ExchangePost
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.PostImageUrls,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getExchangePost = `-- name: GetExchangePost :one
SELECT id, user_id, content, post_image_urls, status, created_at, updated_at
FROM "exchange_posts"
WHERE id = $1
`

func (q *Queries) GetExchangePost(ctx context.Context, id uuid.UUID) (ExchangePost, error) {
	row := q.db.QueryRow(ctx, getExchangePost, id)
	var i ExchangePost
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.PostImageUrls,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listExchangePostItems = `-- name: ListExchangePostItems :many
SELECT id, post_id, gundam_id, created_at
FROM "exchange_post_items"
WHERE post_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListExchangePostItems(ctx context.Context, postID uuid.UUID) ([]ExchangePostItem, error) {
	rows, err := q.db.Query(ctx, listExchangePostItems, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ExchangePostItem{}
	for rows.Next() {
		var i ExchangePostItem
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.GundamID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listExchangePosts = `-- name: ListExchangePosts :many
SELECT id, user_id, content, post_image_urls, status, created_at, updated_at
FROM "exchange_posts"
WHERE status = coalesce($1, status)
ORDER BY created_at DESC, updated_at DESC
`

func (q *Queries) ListExchangePosts(ctx context.Context, status NullExchangePostStatus) ([]ExchangePost, error) {
	rows, err := q.db.Query(ctx, listExchangePosts, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ExchangePost{}
	for rows.Next() {
		var i ExchangePost
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.PostImageUrls,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExchangePost = `-- name: UpdateExchangePost :one
UPDATE "exchange_posts"
SET "post_image_urls" = $2
WHERE "id" = $1 RETURNING id, user_id, content, post_image_urls, status, created_at, updated_at
`

type UpdateExchangePostParams struct {
	ID            uuid.UUID `json:"id"`
	PostImageUrls []string  `json:"post_image_urls"`
}

func (q *Queries) UpdateExchangePost(ctx context.Context, arg UpdateExchangePostParams) (ExchangePost, error) {
	row := q.db.QueryRow(ctx, updateExchangePost, arg.ID, arg.PostImageUrls)
	var i ExchangePost
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.PostImageUrls,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
