// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: exchange_offers.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const countExchangeOffers = `-- name: CountExchangeOffers :one
SELECT COUNT(*) AS count
FROM exchange_offers
WHERE post_id = $1
`

func (q *Queries) CountExchangeOffers(ctx context.Context, postID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countExchangeOffers, postID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createExchangeOffer = `-- name: CreateExchangeOffer :one
INSERT INTO exchange_offers (id,
                             post_id,
                             offerer_id,
                             payer_id,
                             compensation_amount,
                             negotiations_count,
                             max_negotiations,
                             negotiation_requested)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id, post_id, offerer_id, payer_id, compensation_amount, negotiations_count, max_negotiations, negotiation_requested, last_negotiation_at, created_at, updated_at
`

type CreateExchangeOfferParams struct {
	ID                   uuid.UUID `json:"id"`
	PostID               uuid.UUID `json:"post_id"`
	OffererID            string    `json:"offerer_id"`
	PayerID              *string   `json:"payer_id"`
	CompensationAmount   *int64    `json:"compensation_amount"`
	NegotiationsCount    int64     `json:"negotiations_count"`
	MaxNegotiations      int64     `json:"max_negotiations"`
	NegotiationRequested bool      `json:"negotiation_requested"`
}

func (q *Queries) CreateExchangeOffer(ctx context.Context, arg CreateExchangeOfferParams) (ExchangeOffer, error) {
	row := q.db.QueryRow(ctx, createExchangeOffer,
		arg.ID,
		arg.PostID,
		arg.OffererID,
		arg.PayerID,
		arg.CompensationAmount,
		arg.NegotiationsCount,
		arg.MaxNegotiations,
		arg.NegotiationRequested,
	)
	var i ExchangeOffer
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.OffererID,
		&i.PayerID,
		&i.CompensationAmount,
		&i.NegotiationsCount,
		&i.MaxNegotiations,
		&i.NegotiationRequested,
		&i.LastNegotiationAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getExchangeOffer = `-- name: GetExchangeOffer :one
SELECT id, post_id, offerer_id, payer_id, compensation_amount, negotiations_count, max_negotiations, negotiation_requested, last_negotiation_at, created_at, updated_at
FROM exchange_offers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetExchangeOffer(ctx context.Context, id uuid.UUID) (ExchangeOffer, error) {
	row := q.db.QueryRow(ctx, getExchangeOffer, id)
	var i ExchangeOffer
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.OffererID,
		&i.PayerID,
		&i.CompensationAmount,
		&i.NegotiationsCount,
		&i.MaxNegotiations,
		&i.NegotiationRequested,
		&i.LastNegotiationAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserExchangeOfferForPost = `-- name: GetUserExchangeOfferForPost :one
SELECT id, post_id, offerer_id, payer_id, compensation_amount, negotiations_count, max_negotiations, negotiation_requested, last_negotiation_at, created_at, updated_at
FROM exchange_offers
WHERE post_id = $1
  AND offerer_id = $2 LIMIT 1
`

type GetUserExchangeOfferForPostParams struct {
	PostID    uuid.UUID `json:"post_id"`
	OffererID string    `json:"offerer_id"`
}

func (q *Queries) GetUserExchangeOfferForPost(ctx context.Context, arg GetUserExchangeOfferForPostParams) (ExchangeOffer, error) {
	row := q.db.QueryRow(ctx, getUserExchangeOfferForPost, arg.PostID, arg.OffererID)
	var i ExchangeOffer
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.OffererID,
		&i.PayerID,
		&i.CompensationAmount,
		&i.NegotiationsCount,
		&i.MaxNegotiations,
		&i.NegotiationRequested,
		&i.LastNegotiationAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listExchangeOffers = `-- name: ListExchangeOffers :many
SELECT id, post_id, offerer_id, payer_id, compensation_amount, negotiations_count, max_negotiations, negotiation_requested, last_negotiation_at, created_at, updated_at
FROM exchange_offers
WHERE post_id = $1
ORDER BY created_at DESC, updated_at DESC
`

func (q *Queries) ListExchangeOffers(ctx context.Context, postID uuid.UUID) ([]ExchangeOffer, error) {
	rows, err := q.db.Query(ctx, listExchangeOffers, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ExchangeOffer{}
	for rows.Next() {
		var i ExchangeOffer
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.OffererID,
			&i.PayerID,
			&i.CompensationAmount,
			&i.NegotiationsCount,
			&i.MaxNegotiations,
			&i.NegotiationRequested,
			&i.LastNegotiationAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExchangeOffer = `-- name: UpdateExchangeOffer :one
UPDATE exchange_offers
SET negotiation_requested  = COALESCE($1, negotiation_requested),
    last_negotiation_at    = COALESCE($2, last_negotiation_at)
WHERE id = $3 RETURNING id, post_id, offerer_id, payer_id, compensation_amount, negotiations_count, max_negotiations, negotiation_requested, last_negotiation_at, created_at, updated_at
`

type UpdateExchangeOfferParams struct {
	NegotiationRequested *bool      `json:"negotiation_requested"`
	LastNegotiationAt    *time.Time `json:"last_negotiation_at"`
	ID                   uuid.UUID  `json:"id"`
}

func (q *Queries) UpdateExchangeOffer(ctx context.Context, arg UpdateExchangeOfferParams) (ExchangeOffer, error) {
	row := q.db.QueryRow(ctx, updateExchangeOffer, arg.NegotiationRequested, arg.LastNegotiationAt, arg.ID)
	var i ExchangeOffer
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.OffererID,
		&i.PayerID,
		&i.CompensationAmount,
		&i.NegotiationsCount,
		&i.MaxNegotiations,
		&i.NegotiationRequested,
		&i.LastNegotiationAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
