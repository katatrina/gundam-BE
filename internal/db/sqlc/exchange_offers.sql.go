// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: exchange_offers.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const countExchangeOffers = `-- name: CountExchangeOffers :one
SELECT COUNT(*) AS count
FROM exchange_offers
WHERE post_id = $1
`

func (q *Queries) CountExchangeOffers(ctx context.Context, postID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countExchangeOffers, postID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUserExchangeOfferForPost = `-- name: GetUserExchangeOfferForPost :one
SELECT id, post_id, offerer_id, payer_id, compensation_amount, created_at, updated_at
FROM exchange_offers
WHERE post_id = $1
  AND offerer_id = $2
  AND status = 'pending' LIMIT 1
`

type GetUserExchangeOfferForPostParams struct {
	PostID    uuid.UUID `json:"post_id"`
	OffererID string    `json:"offerer_id"`
}

func (q *Queries) GetUserExchangeOfferForPost(ctx context.Context, arg GetUserExchangeOfferForPostParams) (ExchangeOffer, error) {
	row := q.db.QueryRow(ctx, getUserExchangeOfferForPost, arg.PostID, arg.OffererID)
	var i ExchangeOffer
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.OffererID,
		&i.PayerID,
		&i.CompensationAmount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
