// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: auction_requests.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const countExistingPendingAuctionRequest = `-- name: CountExistingPendingAuctionRequest :one
SELECT COUNT(*)
FROM auction_requests
WHERE gundam_id = $1 AND status = 'pending'
`

func (q *Queries) CountExistingPendingAuctionRequest(ctx context.Context, gundamID *int64) (int64, error) {
	row := q.db.QueryRow(ctx, countExistingPendingAuctionRequest, gundamID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAuctionRequest = `-- name: CreateAuctionRequest :one
INSERT INTO auction_requests (id,
                              gundam_id,
                              seller_id,
                              gundam_snapshot,
                              starting_price,
                              bid_increment,
                              buy_now_price,
                              deposit_rate,
                              deposit_amount,
                              start_time,
                              end_time)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) RETURNING id, gundam_id, seller_id, gundam_snapshot, starting_price, bid_increment, buy_now_price, deposit_rate, deposit_amount, start_time, end_time, status, rejected_reason, created_at, updated_at
`

type CreateAuctionRequestParams struct {
	ID             uuid.UUID       `json:"id"`
	GundamID       *int64          `json:"gundam_id"`
	SellerID       string          `json:"seller_id"`
	GundamSnapshot GundamSnapshot  `json:"gundam_snapshot"`
	StartingPrice  int64           `json:"starting_price"`
	BidIncrement   int64           `json:"bid_increment"`
	BuyNowPrice    *int64          `json:"buy_now_price"`
	DepositRate    decimal.Decimal `json:"deposit_rate"`
	DepositAmount  int64           `json:"deposit_amount"`
	StartTime      time.Time       `json:"start_time"`
	EndTime        time.Time       `json:"end_time"`
}

func (q *Queries) CreateAuctionRequest(ctx context.Context, arg CreateAuctionRequestParams) (AuctionRequest, error) {
	row := q.db.QueryRow(ctx, createAuctionRequest,
		arg.ID,
		arg.GundamID,
		arg.SellerID,
		arg.GundamSnapshot,
		arg.StartingPrice,
		arg.BidIncrement,
		arg.BuyNowPrice,
		arg.DepositRate,
		arg.DepositAmount,
		arg.StartTime,
		arg.EndTime,
	)
	var i AuctionRequest
	err := row.Scan(
		&i.ID,
		&i.GundamID,
		&i.SellerID,
		&i.GundamSnapshot,
		&i.StartingPrice,
		&i.BidIncrement,
		&i.BuyNowPrice,
		&i.DepositRate,
		&i.DepositAmount,
		&i.StartTime,
		&i.EndTime,
		&i.Status,
		&i.RejectedReason,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
