// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: wallets.sql

package db

import (
	"context"
)

const addWalletBalance = `-- name: AddWalletBalance :one
UPDATE wallets
SET balance    = balance + $1,
    updated_at = NOW()
WHERE id = $2 RETURNING id, user_id, balance, non_withdrawable_amount, currency, created_at, updated_at
`

type AddWalletBalanceParams struct {
	Amount   int64 `json:"amount"`
	WalletID int64 `json:"wallet_id"`
}

func (q *Queries) AddWalletBalance(ctx context.Context, arg AddWalletBalanceParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, addWalletBalance, arg.Amount, arg.WalletID)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.NonWithdrawableAmount,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createWallet = `-- name: CreateWallet :exec
INSERT INTO wallets (user_id)
VALUES ($1)
`

func (q *Queries) CreateWallet(ctx context.Context, userID string) error {
	_, err := q.db.Exec(ctx, createWallet, userID)
	return err
}

const getWalletByUserID = `-- name: GetWalletByUserID :one
SELECT id, user_id, balance, non_withdrawable_amount, currency, created_at, updated_at
FROM wallets
WHERE user_id = $1
`

func (q *Queries) GetWalletByUserID(ctx context.Context, userID string) (Wallet, error) {
	row := q.db.QueryRow(ctx, getWalletByUserID, userID)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.NonWithdrawableAmount,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWalletForUpdate = `-- name: GetWalletForUpdate :one
SELECT id, user_id, balance, non_withdrawable_amount, currency, created_at, updated_at
FROM wallets
WHERE user_id = $1
    FOR UPDATE
`

func (q *Queries) GetWalletForUpdate(ctx context.Context, userID string) (Wallet, error) {
	row := q.db.QueryRow(ctx, getWalletForUpdate, userID)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.NonWithdrawableAmount,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
