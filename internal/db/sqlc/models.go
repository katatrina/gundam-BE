// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

type GundamCondition string

const (
	GundamConditionNew        GundamCondition = "new"
	GundamConditionOpenbox    GundamCondition = "open box"
	GundamConditionSecondhand GundamCondition = "second hand"
)

func (e *GundamCondition) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GundamCondition(s)
	case string:
		*e = GundamCondition(s)
	default:
		return fmt.Errorf("unsupported scan type for GundamCondition: %T", src)
	}
	return nil
}

type NullGundamCondition struct {
	GundamCondition GundamCondition `json:"gundam_condition"`
	Valid           bool            `json:"valid"` // Valid is true if GundamCondition is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGundamCondition) Scan(value interface{}) error {
	if value == nil {
		ns.GundamCondition, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GundamCondition.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGundamCondition) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GundamCondition), nil
}

type GundamScale string

const (
	GundamScale1144 GundamScale = "1/144"
	GundamScale1100 GundamScale = "1/100"
	GundamScale160  GundamScale = "1/60"
	GundamScale148  GundamScale = "1/48"
)

func (e *GundamScale) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GundamScale(s)
	case string:
		*e = GundamScale(s)
	default:
		return fmt.Errorf("unsupported scan type for GundamScale: %T", src)
	}
	return nil
}

type NullGundamScale struct {
	GundamScale GundamScale `json:"gundam_scale"`
	Valid       bool        `json:"valid"` // Valid is true if GundamScale is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGundamScale) Scan(value interface{}) error {
	if value == nil {
		ns.GundamScale, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GundamScale.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGundamScale) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GundamScale), nil
}

type GundamStatus string

const (
	GundamStatusAvailable GundamStatus = "available"
	GundamStatusSelling   GundamStatus = "selling"
	GundamStatusAuction   GundamStatus = "auction"
	GundamStatusExchange  GundamStatus = "exchange"
)

func (e *GundamStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GundamStatus(s)
	case string:
		*e = GundamStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for GundamStatus: %T", src)
	}
	return nil
}

type NullGundamStatus struct {
	GundamStatus GundamStatus `json:"gundam_status"`
	Valid        bool         `json:"valid"` // Valid is true if GundamStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGundamStatus) Scan(value interface{}) error {
	if value == nil {
		ns.GundamStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GundamStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGundamStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GundamStatus), nil
}

type UserRole string

const (
	UserRoleMember    UserRole = "member"
	UserRoleSeller    UserRole = "seller"
	UserRoleModerator UserRole = "moderator"
	UserRoleAdmin     UserRole = "admin"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type Cart struct {
	ID        int64     `json:"id"`
	UserID    string    `json:"user_id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type CartItem struct {
	ID        string    `json:"id"`
	CartID    int64     `json:"cart_id"`
	GundamID  int64     `json:"gundam_id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type Gundam struct {
	ID                   int64              `json:"id"`
	OwnerID              string             `json:"owner_id"`
	Name                 string             `json:"name"`
	Slug                 string             `json:"slug"`
	GradeID              int64              `json:"grade_id"`
	Condition            GundamCondition    `json:"condition"`
	ConditionDescription pgtype.Text        `json:"condition_description"`
	Manufacturer         string             `json:"manufacturer"`
	Weight               int64              `json:"weight"`
	Length               pgtype.Int8        `json:"length"`
	Width                pgtype.Int8        `json:"width"`
	Height               pgtype.Int8        `json:"height"`
	Scale                GundamScale        `json:"scale"`
	Description          string             `json:"description"`
	Price                int64              `json:"price"`
	Status               GundamStatus       `json:"status"`
	CreatedAt            time.Time          `json:"created_at"`
	UpdatedAt            time.Time          `json:"updated_at"`
	DeletedAt            pgtype.Timestamptz `json:"deleted_at"`
}

type GundamAccessory struct {
	ID        int64     `json:"id"`
	Name      string    `json:"name"`
	GundamID  int64     `json:"gundam_id"`
	Quantity  int64     `json:"quantity"`
	CreatedAt time.Time `json:"created_at"`
}

type GundamGrade struct {
	ID          int64     `json:"id"`
	Name        string    `json:"name"`
	DisplayName string    `json:"display_name"`
	Slug        string    `json:"slug"`
	CreatedAt   time.Time `json:"created_at"`
}

type GundamImage struct {
	ID        int64     `json:"id"`
	GundamID  int64     `json:"gundam_id"`
	Url       string    `json:"url"`
	IsPrimary bool      `json:"is_primary"`
	CreatedAt time.Time `json:"created_at"`
}

type Order struct {
	ID         int64     `json:"id"`
	BuyerID    string    `json:"buyer_id"`
	SellerID   string    `json:"seller_id"`
	TotalPrice int64     `json:"total_price"`
	Status     string    `json:"status"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
}

type OrderItem struct {
	ID        int64     `json:"id"`
	OrderID   int64     `json:"order_id"`
	GundamID  int64     `json:"gundam_id"`
	Price     int64     `json:"price"`
	CreatedAt time.Time `json:"created_at"`
}

type Shipment struct {
	ID              int64       `json:"id"`
	OrderID         pgtype.Int8 `json:"order_id"`
	TrackingCode    string      `json:"tracking_code"`
	ShippingAddress string      `json:"shipping_address"`
	ShippingMethod  string      `json:"shipping_method"`
	Status          string      `json:"status"`
	ShippingCost    int64       `json:"shipping_cost"`
	CreatedAt       time.Time   `json:"created_at"`
	UpdatedAt       time.Time   `json:"updated_at"`
}

type User struct {
	ID                  string      `json:"id"`
	FullName            pgtype.Text `extensions:"x-nullable" json:"full_name"`
	HashedPassword      pgtype.Text `json:"-"`
	Email               string      `json:"email"`
	EmailVerified       bool        `json:"email_verified"`
	PhoneNumber         pgtype.Text `extensions:"x-nullable" json:"phone_number"`
	PhoneNumberVerified bool        `json:"phone_number_verified"`
	Role                UserRole    `json:"role"`
	AvatarUrl           pgtype.Text `extensions:"x-nullable" json:"avatar_url"`
	CreatedAt           time.Time   `json:"created_at"`
	UpdatedAt           time.Time   `json:"updated_at"`
}

type UserAddress struct {
	ID              int64     `json:"id"`
	UserID          string    `json:"user_id"`
	FullName        string    `json:"full_name"`
	PhoneNumber     string    `json:"phone_number"`
	ProvinceName    string    `json:"province_name"`
	DistrictName    string    `json:"district_name"`
	GhnDistrictID   int64     `json:"ghn_district_id"`
	WardName        string    `json:"ward_name"`
	GhnWardCode     string    `json:"ghn_ward_code"`
	Detail          string    `json:"detail"`
	IsPrimary       bool      `json:"is_primary"`
	IsPickupAddress bool      `json:"is_pickup_address"`
	CreatedAt       time.Time `json:"created_at"`
	UpdatedAt       time.Time `json:"updated_at"`
}

type Wallet struct {
	ID        int64     `json:"id"`
	UserID    string    `json:"user_id"`
	Balance   int64     `json:"balance"`
	Currency  string    `json:"currency"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type WalletTransaction struct {
	ID              int64       `json:"id"`
	WalletID        int64       `json:"wallet_id"`
	TransactionType string      `json:"transaction_type"`
	Amount          int64       `json:"amount"`
	Description     pgtype.Text `json:"description"`
	Status          string      `json:"status"`
	CreatedAt       time.Time   `json:"created_at"`
	UpdatedAt       time.Time   `json:"updated_at"`
}
