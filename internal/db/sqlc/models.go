// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type DeliveryOverralStatus string

const (
	DeliveryOverralStatusPicking    DeliveryOverralStatus = "picking"
	DeliveryOverralStatusDelivering DeliveryOverralStatus = "delivering"
	DeliveryOverralStatusDelivered  DeliveryOverralStatus = "delivered"
	DeliveryOverralStatusFailed     DeliveryOverralStatus = "failed"
	DeliveryOverralStatusReturn     DeliveryOverralStatus = "return"
)

func (e *DeliveryOverralStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DeliveryOverralStatus(s)
	case string:
		*e = DeliveryOverralStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for DeliveryOverralStatus: %T", src)
	}
	return nil
}

type NullDeliveryOverralStatus struct {
	DeliveryOverralStatus DeliveryOverralStatus `json:"delivery_overral_status"`
	Valid                 bool                  `json:"valid"` // Valid is true if DeliveryOverralStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDeliveryOverralStatus) Scan(value interface{}) error {
	if value == nil {
		ns.DeliveryOverralStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DeliveryOverralStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDeliveryOverralStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DeliveryOverralStatus), nil
}

type GundamCondition string

const (
	GundamConditionNew     GundamCondition = "new"
	GundamConditionOpenbox GundamCondition = "open box"
	GundamConditionUsed    GundamCondition = "used"
)

func (e *GundamCondition) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GundamCondition(s)
	case string:
		*e = GundamCondition(s)
	default:
		return fmt.Errorf("unsupported scan type for GundamCondition: %T", src)
	}
	return nil
}

type NullGundamCondition struct {
	GundamCondition GundamCondition `json:"gundam_condition"`
	Valid           bool            `json:"valid"` // Valid is true if GundamCondition is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGundamCondition) Scan(value interface{}) error {
	if value == nil {
		ns.GundamCondition, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GundamCondition.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGundamCondition) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GundamCondition), nil
}

type GundamScale string

const (
	GundamScale1144 GundamScale = "1/144"
	GundamScale1100 GundamScale = "1/100"
	GundamScale160  GundamScale = "1/60"
	GundamScale148  GundamScale = "1/48"
)

func (e *GundamScale) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GundamScale(s)
	case string:
		*e = GundamScale(s)
	default:
		return fmt.Errorf("unsupported scan type for GundamScale: %T", src)
	}
	return nil
}

type NullGundamScale struct {
	GundamScale GundamScale `json:"gundam_scale"`
	Valid       bool        `json:"valid"` // Valid is true if GundamScale is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGundamScale) Scan(value interface{}) error {
	if value == nil {
		ns.GundamScale, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GundamScale.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGundamScale) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GundamScale), nil
}

type GundamStatus string

const (
	GundamStatusInstore                GundamStatus = "in store"
	GundamStatusPublished              GundamStatus = "published"
	GundamStatusProcessing             GundamStatus = "processing"
	GundamStatusPendingauctionapproval GundamStatus = "pending auction approval"
	GundamStatusAuctioning             GundamStatus = "auctioning"
)

func (e *GundamStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GundamStatus(s)
	case string:
		*e = GundamStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for GundamStatus: %T", src)
	}
	return nil
}

type NullGundamStatus struct {
	GundamStatus GundamStatus `json:"gundam_status"`
	Valid        bool         `json:"valid"` // Valid is true if GundamStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGundamStatus) Scan(value interface{}) error {
	if value == nil {
		ns.GundamStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GundamStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGundamStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GundamStatus), nil
}

type OrderStatus string

const (
	OrderStatusPending    OrderStatus = "pending"
	OrderStatusPackaging  OrderStatus = "packaging"
	OrderStatusDelivering OrderStatus = "delivering"
	OrderStatusDelivered  OrderStatus = "delivered"
	OrderStatusCompleted  OrderStatus = "completed"
	OrderStatusFailed     OrderStatus = "failed"
	OrderStatusCanceled   OrderStatus = "canceled"
)

func (e *OrderStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderStatus(s)
	case string:
		*e = OrderStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderStatus: %T", src)
	}
	return nil
}

type NullOrderStatus struct {
	OrderStatus OrderStatus `json:"order_status"`
	Valid       bool        `json:"valid"` // Valid is true if OrderStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrderStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderStatus), nil
}

type OrderTransactionStatus string

const (
	OrderTransactionStatusPending   OrderTransactionStatus = "pending"
	OrderTransactionStatusCompleted OrderTransactionStatus = "completed"
	OrderTransactionStatusRefunded  OrderTransactionStatus = "refunded"
	OrderTransactionStatusFailed    OrderTransactionStatus = "failed"
)

func (e *OrderTransactionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderTransactionStatus(s)
	case string:
		*e = OrderTransactionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderTransactionStatus: %T", src)
	}
	return nil
}

type NullOrderTransactionStatus struct {
	OrderTransactionStatus OrderTransactionStatus `json:"order_transaction_status"`
	Valid                  bool                   `json:"valid"` // Valid is true if OrderTransactionStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderTransactionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrderTransactionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderTransactionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderTransactionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderTransactionStatus), nil
}

type PaymentMethod string

const (
	PaymentMethodCod    PaymentMethod = "cod"
	PaymentMethodWallet PaymentMethod = "wallet"
)

func (e *PaymentMethod) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentMethod(s)
	case string:
		*e = PaymentMethod(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentMethod: %T", src)
	}
	return nil
}

type NullPaymentMethod struct {
	PaymentMethod PaymentMethod `json:"payment_method"`
	Valid         bool          `json:"valid"` // Valid is true if PaymentMethod is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentMethod) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentMethod, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentMethod.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentMethod) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentMethod), nil
}

type PaymentTransactionProvider string

const (
	PaymentTransactionProviderZalopay PaymentTransactionProvider = "zalopay"
)

func (e *PaymentTransactionProvider) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentTransactionProvider(s)
	case string:
		*e = PaymentTransactionProvider(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentTransactionProvider: %T", src)
	}
	return nil
}

type NullPaymentTransactionProvider struct {
	PaymentTransactionProvider PaymentTransactionProvider `json:"payment_transaction_provider"`
	Valid                      bool                       `json:"valid"` // Valid is true if PaymentTransactionProvider is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentTransactionProvider) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentTransactionProvider, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentTransactionProvider.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentTransactionProvider) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentTransactionProvider), nil
}

type PaymentTransactionStatus string

const (
	PaymentTransactionStatusPending   PaymentTransactionStatus = "pending"
	PaymentTransactionStatusCompleted PaymentTransactionStatus = "completed"
	PaymentTransactionStatusFailed    PaymentTransactionStatus = "failed"
)

func (e *PaymentTransactionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentTransactionStatus(s)
	case string:
		*e = PaymentTransactionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentTransactionStatus: %T", src)
	}
	return nil
}

type NullPaymentTransactionStatus struct {
	PaymentTransactionStatus PaymentTransactionStatus `json:"payment_transaction_status"`
	Valid                    bool                     `json:"valid"` // Valid is true if PaymentTransactionStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentTransactionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentTransactionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentTransactionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentTransactionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentTransactionStatus), nil
}

type PaymentTransactionType string

const (
	PaymentTransactionTypeWalletDeposit PaymentTransactionType = "wallet_deposit"
)

func (e *PaymentTransactionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentTransactionType(s)
	case string:
		*e = PaymentTransactionType(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentTransactionType: %T", src)
	}
	return nil
}

type NullPaymentTransactionType struct {
	PaymentTransactionType PaymentTransactionType `json:"payment_transaction_type"`
	Valid                  bool                   `json:"valid"` // Valid is true if PaymentTransactionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentTransactionType) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentTransactionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentTransactionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentTransactionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentTransactionType), nil
}

type UserRole string

const (
	UserRoleMember    UserRole = "member"
	UserRoleSeller    UserRole = "seller"
	UserRoleModerator UserRole = "moderator"
	UserRoleAdmin     UserRole = "admin"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type WalletEntryStatus string

const (
	WalletEntryStatusPending   WalletEntryStatus = "pending"
	WalletEntryStatusCompleted WalletEntryStatus = "completed"
	WalletEntryStatusFailed    WalletEntryStatus = "failed"
)

func (e *WalletEntryStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = WalletEntryStatus(s)
	case string:
		*e = WalletEntryStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for WalletEntryStatus: %T", src)
	}
	return nil
}

type NullWalletEntryStatus struct {
	WalletEntryStatus WalletEntryStatus `json:"wallet_entry_status"`
	Valid             bool              `json:"valid"` // Valid is true if WalletEntryStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullWalletEntryStatus) Scan(value interface{}) error {
	if value == nil {
		ns.WalletEntryStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.WalletEntryStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullWalletEntryStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.WalletEntryStatus), nil
}

type WalletEntryType string

const (
	WalletEntryTypeDeposit         WalletEntryType = "deposit"
	WalletEntryTypeWithdrawal      WalletEntryType = "withdrawal"
	WalletEntryTypePayment         WalletEntryType = "payment"
	WalletEntryTypePaymentReceived WalletEntryType = "payment_received"
	WalletEntryTypeNonWithdrawable WalletEntryType = "non_withdrawable"
	WalletEntryTypeRefund          WalletEntryType = "refund"
	WalletEntryTypeRefundDeduction WalletEntryType = "refund_deduction"
	WalletEntryTypeAuctionLock     WalletEntryType = "auction_lock"
	WalletEntryTypeAuctionRelease  WalletEntryType = "auction_release"
	WalletEntryTypeAuctionPayment  WalletEntryType = "auction_payment"
	WalletEntryTypePlatformFee     WalletEntryType = "platform_fee"
)

func (e *WalletEntryType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = WalletEntryType(s)
	case string:
		*e = WalletEntryType(s)
	default:
		return fmt.Errorf("unsupported scan type for WalletEntryType: %T", src)
	}
	return nil
}

type NullWalletEntryType struct {
	WalletEntryType WalletEntryType `json:"wallet_entry_type"`
	Valid           bool            `json:"valid"` // Valid is true if WalletEntryType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullWalletEntryType) Scan(value interface{}) error {
	if value == nil {
		ns.WalletEntryType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.WalletEntryType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullWalletEntryType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.WalletEntryType), nil
}

type WalletReferenceType string

const (
	WalletReferenceTypeOrder             WalletReferenceType = "order"
	WalletReferenceTypeAuction           WalletReferenceType = "auction"
	WalletReferenceTypeWithdrawalRequest WalletReferenceType = "withdrawal_request"
	WalletReferenceTypeDepositRequest    WalletReferenceType = "deposit_request"
	WalletReferenceTypePromotion         WalletReferenceType = "promotion"
	WalletReferenceTypeAffiliate         WalletReferenceType = "affiliate"
	WalletReferenceTypeZalopay           WalletReferenceType = "zalopay"
)

func (e *WalletReferenceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = WalletReferenceType(s)
	case string:
		*e = WalletReferenceType(s)
	default:
		return fmt.Errorf("unsupported scan type for WalletReferenceType: %T", src)
	}
	return nil
}

type NullWalletReferenceType struct {
	WalletReferenceType WalletReferenceType `json:"wallet_reference_type"`
	Valid               bool                `json:"valid"` // Valid is true if WalletReferenceType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullWalletReferenceType) Scan(value interface{}) error {
	if value == nil {
		ns.WalletReferenceType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.WalletReferenceType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullWalletReferenceType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.WalletReferenceType), nil
}

type Cart struct {
	ID        int64     `json:"id"`
	UserID    string    `json:"user_id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type CartItem struct {
	ID        string    `json:"id"`
	CartID    int64     `json:"cart_id"`
	GundamID  int64     `json:"gundam_id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type DeliveryInformation struct {
	ID            int64     `json:"id"`
	UserID        string    `json:"user_id"`
	FullName      string    `json:"full_name"`
	PhoneNumber   string    `json:"phone_number"`
	ProvinceName  string    `json:"province_name"`
	DistrictName  string    `json:"district_name"`
	GhnDistrictID int64     `json:"ghn_district_id"`
	WardName      string    `json:"ward_name"`
	GhnWardCode   string    `json:"ghn_ward_code"`
	Detail        string    `json:"detail"`
	CreatedAt     time.Time `json:"created_at"`
}

type Gundam struct {
	ID                   int64              `json:"id"`
	OwnerID              string             `json:"owner_id"`
	Name                 string             `json:"name"`
	Slug                 string             `json:"slug"`
	GradeID              int64              `json:"grade_id"`
	Quantity             int64              `json:"quantity"`
	Condition            GundamCondition    `json:"condition"`
	ConditionDescription pgtype.Text        `json:"condition_description"`
	Manufacturer         string             `json:"manufacturer"`
	Weight               int64              `json:"weight"`
	Scale                GundamScale        `json:"scale"`
	Description          string             `json:"description"`
	Price                int64              `json:"price"`
	Status               GundamStatus       `json:"status"`
	CreatedAt            time.Time          `json:"created_at"`
	UpdatedAt            time.Time          `json:"updated_at"`
	DeletedAt            pgtype.Timestamptz `json:"deleted_at"`
}

type GundamAccessory struct {
	ID        int64     `json:"id"`
	Name      string    `json:"name"`
	GundamID  int64     `json:"gundam_id"`
	Quantity  int64     `json:"quantity"`
	CreatedAt time.Time `json:"created_at"`
}

type GundamGrade struct {
	ID          int64     `json:"id"`
	Name        string    `json:"name"`
	DisplayName string    `json:"display_name"`
	Slug        string    `json:"slug"`
	CreatedAt   time.Time `json:"created_at"`
}

type GundamImage struct {
	ID        int64     `json:"id"`
	GundamID  int64     `json:"gundam_id"`
	Url       string    `json:"url"`
	IsPrimary bool      `json:"is_primary"`
	CreatedAt time.Time `json:"created_at"`
}

type Order struct {
	ID              uuid.UUID     `json:"id"`
	Code            string        `json:"code"`
	BuyerID         string        `json:"buyer_id"`
	SellerID        string        `json:"seller_id"`
	ItemsSubtotal   int64         `json:"items_subtotal"`
	DeliveryFee     int64         `json:"delivery_fee"`
	TotalAmount     int64         `json:"total_amount"`
	Status          OrderStatus   `json:"status"`
	PaymentMethod   PaymentMethod `json:"payment_method"`
	Note            pgtype.Text   `json:"note"`
	IsPackaged      bool          `json:"is_packaged"`
	PackagingImages []string      `json:"packaging_images"`
	CreatedAt       time.Time     `json:"created_at"`
	UpdatedAt       time.Time     `json:"updated_at"`
}

type OrderDelivery struct {
	ID                   int64                     `json:"id"`
	OrderID              string                    `json:"order_id"`
	DeliveryTrackingCode pgtype.Text               `json:"delivery_tracking_code"`
	ExpectedDeliveryTime time.Time                 `json:"expected_delivery_time"`
	Status               pgtype.Text               `json:"status"`
	OverallStatus        NullDeliveryOverralStatus `json:"overall_status"`
	FromDeliveryID       int64                     `json:"from_delivery_id"`
	ToDeliveryID         int64                     `json:"to_delivery_id"`
	CreatedAt            time.Time                 `json:"created_at"`
	UpdatedAt            time.Time                 `json:"updated_at"`
}

type OrderItem struct {
	ID        int64     `json:"id"`
	OrderID   string    `json:"order_id"`
	GundamID  int64     `json:"gundam_id"`
	Quantity  int64     `json:"quantity"`
	Price     int64     `json:"price"`
	Weight    int64     `json:"weight"`
	CreatedAt time.Time `json:"created_at"`
}

type OrderTransaction struct {
	ID            int64                  `json:"id"`
	OrderID       string                 `json:"order_id"`
	Amount        int64                  `json:"amount"`
	Status        OrderTransactionStatus `json:"status"`
	BuyerEntryID  int64                  `json:"buyer_entry_id"`
	SellerEntryID pgtype.Int8            `json:"seller_entry_id"`
	CreatedAt     time.Time              `json:"created_at"`
	UpdatedAt     time.Time              `json:"updated_at"`
	CompletedAt   pgtype.Timestamptz     `json:"completed_at"`
}

type PaymentTransaction struct {
	ID                    int64                      `json:"id"`
	UserID                string                     `json:"user_id"`
	Amount                int64                      `json:"amount"`
	TransactionType       PaymentTransactionType     `json:"transaction_type"`
	Provider              PaymentTransactionProvider `json:"provider"`
	ProviderTransactionID string                     `json:"provider_transaction_id"`
	Status                PaymentTransactionStatus   `json:"status"`
	Metadata              []byte                     `json:"metadata"`
	CreatedAt             time.Time                  `json:"created_at"`
	UpdatedAt             time.Time                  `json:"updated_at"`
}

type SellerSubscription struct {
	ID               int64              `json:"id"`
	SellerID         string             `json:"seller_id"`
	PlanID           int64              `json:"plan_id"`
	StartDate        time.Time          `json:"start_date"`
	EndDate          pgtype.Timestamptz `json:"end_date"`
	ListingsUsed     int64              `json:"listings_used"`
	OpenAuctionsUsed int64              `json:"open_auctions_used"`
	IsActive         bool               `json:"is_active"`
	CreatedAt        time.Time          `json:"created_at"`
	UpdatedAt        time.Time          `json:"updated_at"`
}

type SubscriptionPlan struct {
	ID              int64       `json:"id"`
	Name            string      `json:"name"`
	DurationDays    pgtype.Int8 `json:"duration_days"`
	MaxListings     pgtype.Int8 `json:"max_listings"`
	MaxOpenAuctions pgtype.Int8 `json:"max_open_auctions"`
	IsUnlimited     bool        `json:"is_unlimited"`
	Price           int64       `json:"price"`
	CreatedAt       time.Time   `json:"created_at"`
}

type User struct {
	ID                  string      `json:"id"`
	GoogleAccountID     pgtype.Text `json:"google_account_id"`
	FullName            string      `extensions:"x-nullable" json:"full_name"`
	HashedPassword      pgtype.Text `json:"-"`
	Email               string      `json:"email"`
	EmailVerified       bool        `json:"email_verified"`
	PhoneNumber         pgtype.Text `extensions:"x-nullable" json:"phone_number"`
	PhoneNumberVerified bool        `json:"phone_number_verified"`
	Role                UserRole    `json:"role"`
	AvatarUrl           pgtype.Text `extensions:"x-nullable" json:"avatar_url"`
	CreatedAt           time.Time   `json:"created_at"`
	UpdatedAt           time.Time   `json:"updated_at"`
}

type UserAddress struct {
	ID              int64     `json:"id"`
	UserID          string    `json:"user_id"`
	FullName        string    `json:"full_name"`
	PhoneNumber     string    `json:"phone_number"`
	ProvinceName    string    `json:"province_name"`
	DistrictName    string    `json:"district_name"`
	GhnDistrictID   int64     `json:"ghn_district_id"`
	WardName        string    `json:"ward_name"`
	GhnWardCode     string    `json:"ghn_ward_code"`
	Detail          string    `json:"detail"`
	IsPrimary       bool      `json:"is_primary"`
	IsPickupAddress bool      `json:"is_pickup_address"`
	CreatedAt       time.Time `json:"created_at"`
	UpdatedAt       time.Time `json:"updated_at"`
}

type Wallet struct {
	ID                    int64     `json:"id"`
	UserID                string    `json:"user_id"`
	Balance               int64     `json:"balance"`
	NonWithdrawableAmount int64     `json:"non_withdrawable_amount"`
	Currency              string    `json:"currency"`
	CreatedAt             time.Time `json:"created_at"`
	UpdatedAt             time.Time `json:"updated_at"`
}

type WalletEntry struct {
	ID            int64               `json:"id"`
	WalletID      int64               `json:"wallet_id"`
	ReferenceID   pgtype.Text         `json:"reference_id"`
	ReferenceType WalletReferenceType `json:"reference_type"`
	EntryType     WalletEntryType     `json:"entry_type"`
	Amount        int64               `json:"amount"`
	Status        WalletEntryStatus   `json:"status"`
	CreatedAt     time.Time           `json:"created_at"`
	UpdatedAt     time.Time           `json:"updated_at"`
	CompletedAt   pgtype.Timestamptz  `json:"completed_at"`
}
