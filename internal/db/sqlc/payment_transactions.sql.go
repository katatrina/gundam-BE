// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: payment_transactions.sql

package db

import (
	"context"
)

const createPaymentTransaction = `-- name: CreatePaymentTransaction :one
INSERT INTO payment_transactions (user_id,
                                  amount,
                                  transaction_type,
                                  provider,
                                  provider_transaction_id,
                                  status,
                                  metadata)
VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, user_id, amount, transaction_type, provider, provider_transaction_id, status, metadata, created_at, updated_at
`

type CreatePaymentTransactionParams struct {
	UserID                string                     `json:"user_id"`
	Amount                int64                      `json:"amount"`
	TransactionType       PaymentTransactionType     `json:"transaction_type"`
	Provider              PaymentTransactionProvider `json:"provider"`
	ProviderTransactionID string                     `json:"provider_transaction_id"`
	Status                PaymentTransactionStatus   `json:"status"`
	Metadata              []byte                     `json:"metadata"`
}

func (q *Queries) CreatePaymentTransaction(ctx context.Context, arg CreatePaymentTransactionParams) (PaymentTransaction, error) {
	row := q.db.QueryRow(ctx, createPaymentTransaction,
		arg.UserID,
		arg.Amount,
		arg.TransactionType,
		arg.Provider,
		arg.ProviderTransactionID,
		arg.Status,
		arg.Metadata,
	)
	var i PaymentTransaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.TransactionType,
		&i.Provider,
		&i.ProviderTransactionID,
		&i.Status,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPaymentTransactionByProviderID = `-- name: GetPaymentTransactionByProviderID :one
SELECT id, user_id, amount, transaction_type, provider, provider_transaction_id, status, metadata, created_at, updated_at
FROM payment_transactions
WHERE provider_transaction_id = $1
  AND provider = $2
  AND user_id = $3
`

type GetPaymentTransactionByProviderIDParams struct {
	ProviderTransactionID string                     `json:"provider_transaction_id"`
	Provider              PaymentTransactionProvider `json:"provider"`
	UserID                string                     `json:"user_id"`
}

func (q *Queries) GetPaymentTransactionByProviderID(ctx context.Context, arg GetPaymentTransactionByProviderIDParams) (PaymentTransaction, error) {
	row := q.db.QueryRow(ctx, getPaymentTransactionByProviderID, arg.ProviderTransactionID, arg.Provider, arg.UserID)
	var i PaymentTransaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.TransactionType,
		&i.Provider,
		&i.ProviderTransactionID,
		&i.Status,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePaymentTransactionStatus = `-- name: UpdatePaymentTransactionStatus :one
UPDATE payment_transactions
SET status     = $1,
    updated_at = NOW()
WHERE provider_transaction_id = $2
  AND provider = $3
  AND user_id = $4 RETURNING id, user_id, amount, transaction_type, provider, provider_transaction_id, status, metadata, created_at, updated_at
`

type UpdatePaymentTransactionStatusParams struct {
	Status                PaymentTransactionStatus   `json:"status"`
	ProviderTransactionID string                     `json:"provider_transaction_id"`
	Provider              PaymentTransactionProvider `json:"provider"`
	UserID                string                     `json:"user_id"`
}

func (q *Queries) UpdatePaymentTransactionStatus(ctx context.Context, arg UpdatePaymentTransactionStatusParams) (PaymentTransaction, error) {
	row := q.db.QueryRow(ctx, updatePaymentTransactionStatus,
		arg.Status,
		arg.ProviderTransactionID,
		arg.Provider,
		arg.UserID,
	)
	var i PaymentTransaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.TransactionType,
		&i.Provider,
		&i.ProviderTransactionID,
		&i.Status,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
